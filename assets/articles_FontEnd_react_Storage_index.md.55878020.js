import{_ as e,o as t,c as a,U as o}from"./chunks/framework.c6ee4a63.js";const u=JSON.parse('{"title":"React 全局存储/状态管理","description":"","frontmatter":{},"headers":[],"relativePath":"articles/FontEnd/react/Storage/index.md","lastUpdated":null}'),r={name:"articles/FontEnd/react/Storage/index.md"},c=o('<h1 id="react-全局存储-状态管理" tabindex="-1">React 全局存储/状态管理 <a class="header-anchor" href="#react-全局存储-状态管理" aria-label="Permalink to &quot;React 全局存储/状态管理&quot;">​</a></h1><h2 id="常见的状态管理模式" tabindex="-1">常见的状态管理模式 <a class="header-anchor" href="#常见的状态管理模式" aria-label="Permalink to &quot;常见的状态管理模式&quot;">​</a></h2><ol><li><strong>global：</strong>  全局式，也被称作单一数据源，将所有的数据放到一个大对象中，关键词：<code>combineReducers();</code></li><li><strong>multiple stores：</strong>  多数据源模式，将状态存放到多个数据源中，可在多个地方使用消费，关键词：<code>useStore()；</code></li><li><strong>atomic state：</strong>  原子状态，与创建对象形式的存储不同，针对每一个变量可以是响应式的，通过原子派生的方式来适应复杂的开发场景，关键词：<code>atom()</code>；</li></ol>',3),n=[c];function s(i,l,d,_,h,m){return t(),a("div",null,n)}const g=e(r,[["render",s]]);export{u as __pageData,g as default};
