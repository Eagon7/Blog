const e={map:'[{"resume":["0.0"],"中间件":["1.0"],"守卫":["1.1"],"拦截器":["1.2"],"管道":["1.3"],"注入基本数据":["2.0"],"案例":["3.0","39.5"],"控制反转":["4.0"],"依赖注入":["4.1"],"nest":["5.0","5.2"],"module":["5.1","5.4"],"provider":["5.3"],"动态module":["5.6"],"hi":["6.0"],"核心概念概览":["6.1"],"重点1":["6.2"],"他代表了一个http请求的执行上下文":["7.0"],"http数据传输方式":["8.0"],"urlparam":["8.1"],"form":["8.2","8.3"],"json":["8.4"],"nest实现基本的http请求":["8.5"],"nestjs":["9.0"],"register":["10.0"],"多种provider":["11.0"],"注册value值":["11.1"],"动态注册服务":["11.2"],"异步动态注册服务":["11.3"],"总结":["11.4","18.11"],"文件上传":["12.0"],"语法":["13.0"],"js":["14.0"],"项目列表":["15.0"],"高阶组件hoc":["15.1","16.0"],"两种不同的高阶组件":["16.1"],"属性代理":["16.2"],"反向继承":["16.3"],"编写hoc":["16.4"],"动态加载loading":["16.5"],"事件监控":["16.6"],"权限拦截":["16.7"],"hooks":["17.0","17.2"],"api分类":["17.1"],"useref":["17.3","33.0"],"数据更新驱动类":["17.4"],"usestate":["17.5"],"usereducer":["17.6"],"usecontext":["17.7"],"useimperativehandle":["17.8"],"react":["18.0","19.0","20.0","24.0","26.4","26.5","29.1","29.8","29.9"],"出现背景":["18.1","20.3"],"核心概念":["18.2"],"使用教程":["18.3","21.4"],"自动缓存和数据同步":["18.4"],"加载状态管理":["18.5"],"数据同步和预取":["18.6"],"自动缓存失效处理":["18.7"],"服务器状态更新":["18.8"],"更少的重复代码":["18.9"],"api":["18.10"],"快速上手":["19.1"],"原理分析":["19.2"],"核心api":["19.3"],"常见的状态管理模式":["20.1","21.1"],"flex":["20.2"],"架构特点":["20.4"],"jotai":["21.0","21.2"],"原子式解决了什么问题":["21.3"],"实际使用":["21.14"],"redux":["22.0"],"api介绍":["22.1"],"摘要":["22.2"],"context":["23.0","31.0"],"提供者provider用法":["23.1"],"消费者consumer用法":["23.2"],"生命周期":["25.0"],"useeffect":["25.1"],"uselayouteffect":["25.2"],"useinsertioneffect":["25.3"],"类组件生命周期在函数组件内使用effect替代方案":["25.4"],"渲染调优":["26.0"],"懒加载和异步渲染":["26.1"],"异步渲染":["26.2"],"懒加载":["26.3"],"props":["27.0","27.8"],"监听props改变":["27.1"],"render":["27.2","27.3"],"组合模式":["27.4"],"操作props":["27.5"],"混入":["27.6"],"抽离props":["27.7"],"demo":["27.9"],"ref":["28.0"],"获取ref的三种方式":["28.1"],"转发ref":["28.2"],"组合转发ref":["28.3"],"高阶组件转发":["28.4"],"组件通信":["28.5"],"函数组件数据缓存":["28.6"],"渲染控制":["29.0"],"usememo用法":["29.2"],"usememo原理":["29.3"],"purecomponent":["29.4"],"purecomponent原理":["29.5"],"purecomponent注意事项":["29.6"],"shouldcomponentupdate":["29.7"],"打破渲染限制的方法使memo和purecomponent失效":["29.10"],"控制渲染的场景":["29.11"],"reducer":["32.0"],"与state的区别":["32.1"],"命名原因":["32.2"],"reduce实现reducer":["32.4"],"实现usereducer":["32.5"],"实际用途":["32.6"],"base":["34.0"],"vue":["35.0"],"前置":["37.0"],"时间复杂度":["38.0"],"nest主要设计模式":["39.0"],"dependency":["39.1"],"inversion":["39.2"],"好处":["39.3"],"如何控制反转":["39.4"],"设计模式":["40.0"],"myindex":["41.0"],"记录和楠楠的日常生活":["42.0"],"我们的故事":["43.0"],"根据空格拆分字符串":["44.0"]},{"0":["21.14","22.1"],"1":["5.2","6.1","8.5","16.0","16.4","17.5","20.1","20.4","21.1","21.5","25.2","29.6","29.10","29.11","39.3","44.0"],"2":["5.2","16.4","21.6"],"3":["21.7","44.0"],"4":["21.8"],"5":["21.9"],"6":["21.10","23.2"],"7":["21.11"],"8":["21.12"],"9":["21.13"],"69":["44.0"],"123":["8.5"],"168":["44.0"],"192":["44.0"],"200":["44.0"],"48512":["44.0"],"info":["1.0","17.8","26.2"],"存在意义":["1.0"],"处理http请求的函数":["1.0"],"他可以在请求到达控制器之前":["1.0"],"之后执行一些操作":["1.0"],"他可以是全局的也可以是局部的":["1.0"],"场景":["1.0","17.3"],"身份验证":["1.0"],"日志记录":["1.0"],"guard":["1.1"],"是一种用于保护路由的机制":["1.1"],"他可以在请求到达控制器之前或者之后执行一些操作":["1.1"],"守卫可以用于实现身份验证":["1.1"],"权限控制":["1.1"],"缓存等功能":["1.1"],"在nestjs中收尾可以是全局的也可以是局部的":["1.1"],"守卫路由":["1.1"],"execution":["1.1"],"context":["1.1","23.2"],"处理http请求和响应的函数":["1.2"],"在请求到达控制器之前之后执行一些操作":["1.2"],"拦截器可以实现日志记录":["1.2"],"错误处理":["1.2"],"数据转换":["1.2"],"在nestjs中拦截器可以是全局的也可局部":["1.2"],"管道是数据流入controller前进行的一波数据处理":["1.3"],"因为普通数据服务不是class":["2.0"],"所以要使用":["2.0"],"inject来注入":["2.0"],"typescript":["2.0","3.0","21.6","39.1","39.5"],"module":["2.0","11.2"],"providers":["2.0"],"provide":["2.0"],"app":["2.0","18.9","32.5"],"name":["2.0","8.5","19.3","27.4","29.4"],"usevalue":["2.0"],"使用普通值":["2.0"],"injectable":["2.0","3.0"],"export":["2.0","3.0","16.5","16.7","18.9","21.14","28.1"],"class":["2.0","3.0","16.3","16.5","28.1","28.3","29.4","29.6","29.7","39.1","39.5"],"authservice":["2.0"],"第三方发送短信服务":["3.0"],"根据不同配置使用不同的第三方运营商":["3.0"],"sms":["3.0"],"serivce":["3.0"],"ts":["3.0","8.5","11.1","11.2","17.3","17.5","21.14","25.1","32.4"],"appcontroller":["3.0"],"constructor":["3.0"],"private":["3.0"],"ali":["3.0"],"aliservice":["3.0"],"tencent":["3.0"],"ioc":["4.0","4.1"],"di":["4.1"],"的具体实现":["4.1"],"请求声明周期":["5.0"],"controller":["5.1","8.5"],"service的关系":["5.1"],"提供了一个模块化的方式来组织和管理您的应用程序的代码":["5.1"],"请求生命周期":["5.2"],"img":["5.2"],"java":["5.2"],"收到请求":["5.2"],"提供服务":["5.3"],"用于表示应用程序中可注入的任何东西":["5.3"],"除了服务":["5.3"],"还可以提供其他类型的对象":["5.3"],"模块是一个子程序":["5.4"],"用于定义控制器":["5.4"],"提供者或向其他模块开放提供者":["5.4"],"开放模块的api":["5.4"],"默认情况下控制器":["5.4"],"提供者在当前模块可用":["5.4"],"我是eagon":["6.0"],"模块":["6.1"],"modules":["6.1"],"nestjs":["6.2"],"提供了许多属性和方法":["7.0"],"可用于在请求的生命周期内访问":["7.0"],"url":["8.0"],"query":["8.1","8.5","18.0"],"都属于get路径传参":["8.1"],"tsx":["8.1","18.9","44.0"],"params":["8.1"],"router1":["8.1","8.5"],"urlencoded":["8.2","8.4"],"直接用表单提交数据":["8.2"],"提交的就是这种":["8.2"],"他和query的区别就是把查询的query放在了body里":["8.2"],"然后指定下":["8.2"],"content":["8.2","16.5","44.0"],"type":["8.2","32.4","44.0"],"是":["8.2","26.2"],"application":["8.2"],"data":["8.3","18.10"],"不再是通过":["8.3"],"分隔数据":["8.3"],"form":["8.4","27.9","28.3"],"code":["8.5","11.0","16.7","17.3","18.9","21.6","21.8","21.9","21.10","21.14","23.2","25.4","27.6","27.7","27.9","28.1","28.2","28.3","28.5","29.1","32.4","32.5","44.0"],"group":["8.5","11.0","16.7","17.3","18.9","21.14","23.2","25.4","27.9","28.5","29.1","32.4","32.5"],"param":["8.5"],"http":["8.5","44.0"],"id":["8.5","39.1"],"router":["8.5","19.0"],"在":["8.5","17.8"],"nest":["8.5","11.0"],"里":["8.5"],"通过":["8.5"],"装饰器来取":["8.5"],"get":["8.5","44.0"],"find":["8.5"],"findall":["8.5"],"string":["8.5"],"接收账号密码argon2":["10.0"],"实现了ioc":["11.0"],"从main文件臊面":["11.0"],"分析module引用及依赖中的关系":["11.0"],"自动把provider注入到目标对象":["11.0"],"imports":["11.2"],"当需要异步获取provider时":["11.3"],"可以使用usefactory的async版本":["11.3"],"例如":["11.3"],"tip":["11.4","12.0"],"总结":["16.0"],"强化":["16.0","16.4"],"props":["16.0","16.4","17.8","27.3","27.6","29.4","29.9"],"常用的高阶组件有":["16.1"],"就是用组件包裹一层代理组件":["16.2"],"在代理组件上":["16.2"],"可以做一些":["16.2"],"对源组件的强化操作":["16.2"],"这里注意属性代理返回的是一个新组件":["16.2"],"被包裹的原始组件":["16.2"],"将在新的组件里被挂载":["16.2"],"jsx":["16.2","16.3","16.5","16.6","16.7","23.1","23.2","25.3","25.4","27.2","27.3","27.4","27.6","27.7","27.8","27.9","28.1","28.2","28.3","28.5","29.1","29.2","29.4","29.6","29.7"],"反向继承和属性代理有一定的区别":["16.3"],"在于包装后的组件继承了原始组件本身":["16.3"],"所以此时无须再去挂载业务组件":["16.3"],"index":["16.3","16.7","28.3","29.6","29.7","32.4"],"什么时候使用hoc":["16.4"],"强化props":["16.4"],"就是在原始组件的":["16.4"],"基础上":["16.4"],"加入一些其他的":["16.4"],"强化原始组件功能":["16.4"],"控制渲染":["16.4"],"hoc":["16.4","16.6","28.4"],"反向继承模式":["16.4"],"可以通过":["16.4"],"super":["16.4"],"default":["16.5","16.7","18.9","28.1"],"function":["16.5","16.6","16.7","18.9","29.1"],"dynamichoc":["16.5"],"loadrouter":["16.5"],"return":["16.5","25.1","28.3","29.1"],"extends":["16.5","28.1","28.3","29.4","29.7"],"react":["16.5","16.7","17.8","18.9","23.2","25.0","25.3","25.4","26.2","28.3","29.4","29.7"],"component":["16.5","28.1","28.3","29.7"],"不一定非要对组件本身做些什么":["16.6"],"也可以单纯增加一些事件监听":["16.6"],"错误监控":["16.6"],"以下代码hoc":["16.6"],"只对组件内的点击事件做一个监听效果":["16.6"],"clickhoc":["16.6"],"通过context传递权限":["16.7"],"const":["16.7","17.5","18.9","21.14","23.1","29.2","32.5","44.0"],"permission":["16.7"],"createcontext":["16.7"],"关键词":["17.1"],"concurrent":["17.1"],"table":["17.1"],"tr":["17.1"],"th":["17.1"],"使用范围":["17.1"],"hooks":["17.1"],"details":["17.3","17.5","21.6","21.7","21.8","21.9","21.10","27.6","27.7","28.1","28.2","28.3","28.5","29.2","29.4"],"稳定引用":["17.3"],"获取dom节点":["17.3"],"获取上一次的值":["17.3"],"闭包":["17.3"],"异步访问到旧变量的问题":["17.3"],"典型的闭包循环案例":["17.3"],"每次循环调用settimeout的时候都会保存当前的作用域":["17.3"],"state":["17.5","28.6","29.4","29.7","32.5","32.6"],"setstate":["17.5"],"initialstate":["17.5"],"参数接收一个初始值":["17.5"],"返回一个数组":["17.5"],"数组的第一个元素是当前的state":["17.5"],"第二个元素是更新state的函数":["17.5"],"注意事项":["17.5"],"对于拥有许多状态更新逻辑的组件来说":["17.6"],"过于分散的事件处理程序可能会令人不知所措":["17.6"],"对于这种情况":["17.6"],"你可以将组件的所有状态更新":["17.6"],"增删改查":["17.6"],"逻辑整合到一个外部函数中":["17.6"],"这个函数叫作":["17.6"],"reducer":["17.6","22.1"],"reducer是弥补usestate在逻辑复杂情况下的缺陷":["17.6"],"它分为三个步骤":["17.6"],"作用":["17.7"],"解决了什么问题":["17.8"],"子组件通过ref抛出方法供父组件调用":["17.8"],"react函数":["17.8"],"组件":["17.8","27.9"],"父组件需要直接访问子组件的实例方法或属性的问题":["17.8"],"中":["17.8","28.6"],"父组件通常通过":["17.8"],"向子组件传递数据和回调函数来实现组件之间的通信":["17.8"],"这种方式可以确保数据流的单向性":["17.8"],"解决问题":["18.1"],"灵魂拷问q":["18.1"],"为什么用axios不可以":["18.1"],"为什么需要出现react":["18.1"],"querya":["18.1"],"尽管可以使用普通的":["18.1"],"axios":["18.1"],"解决普通请求代码重复":["18.2"],"befor":["18.9"],"import":["18.9","21.6","21.14","26.4","32.4"],"as":["18.9"],"from":["18.9","21.14","32.4"],"存储":["18.9"],"后端返回数据":["18.9"],"zen":["18.9"],"setzen":["18.9"],"usestate":["18.9"],"加载状态":["18.9"],"isloading":["18.9","18.10"],"setisloading":["18.9"],"false":["18.9"],"是否请求成功":["18.9"],"iserror":["18.9"],"setiserror":["18.9"],"apiname":["18.10"],"are":["18.10"],"查询返回的数据":["18.10"],"表示查询是否正在加载中":["18.10"],"后端概念":["19.0"],"effect":["19.3","25.4"],"demo":["19.3"],"link":["19.3"],"普通链接":["19.3"],"全局存储":["20.0"],"global":["20.1","21.1"],"全局式":["20.1","21.1"],"架构":["20.2"],"解决痛点":["20.3"],"flux架构解决前端应用程序中状态管理和数据流动的复杂性问题":["20.3"],"在传统的mvc":["20.3"],"详细介绍":["20.4"],"flux架构通过引入单向数据流的概念":["20.4"],"将数据的流动变得可控和可预测":["20.4"],"它明确了数据流动的路径":["20.4"],"并将状态的修改限制在特定的流程中":["20.4"],"这样做的好处包括":["20.4"],"易于追踪和调试":["20.4"],"由于数据流是单向的":["20.4"],"引用来源":["21.0"],"原子状态管理":["21.2"],"reacthook":["21.3"],"使state的":["21.3"],"拆分":["21.3"],"和":["21.3","25.2","27.9","29.4"],"创建":["21.5"],"atom":["21.5","21.14"],"派生atom":["21.5"],"使用":["21.5","29.7"],"useatom":["21.5"],"异步派生":["21.6"],"view":["21.6","21.8","21.9","21.10","27.6","27.7","28.1","28.2","28.3","28.5"],"the":["21.6","21.8","21.9","21.10","27.6","27.7","28.1","28.2","28.3","28.5"],"函数组件内更新方式":["21.7"],"atom内更新方式":["21.8"],"异步更新atom":["21.9"],"区别于第二条异步获取":["21.9"],"异步更新不会阻塞线程":["21.9"],"渲染问题":["21.10"],"当我们点击add时":["21.10"],"发现a和b都重新渲染了":["21.10"],"但是问题来了":["21.10"],"a为什么要重新渲染呀":["21.10"],"a只是触发了更新操作":["21.10"],"provider":["21.12","23.0","23.1","23.2"],"store":["21.13","21.14"],"createstore":["21.14"],"jotai":["21.14"],"mystore":["21.14"],"countatom":["21.14"],"纯函数":["22.1"],"middleware":["22.2"],"中间件":["22.2"],"consumer":["23.0"],"themeprovider":["23.1"],"themecontext":["23.1"],"对于新版本想要获取":["23.2"],"的消费者":["23.2"],"提供了3种形式":["23.2"],"①":["23.2","27.2"],"类组件之contexttype":["23.2"],"方式":["23.2"],"v16":["23.2"],"提供了":["23.2"],"contexttype":["23.2"],"静态属性":["23.2"],"用来获取上面":["23.2"],"destory":["25.1"],"useeffect":["25.2","25.3","25.4","27.1"],"不同的地方是采用了同步执行":["25.2"],"在介绍":["25.3"],"用途之前":["25.3"],"先看一下":["25.3"],"的执行时机":["25.3"],"console":["25.3","29.1"],"log":["25.3","29.1"],"执行":["25.3"],"模块渲染后":["25.4"],"componentdidmount":["25.4"],"请求数据":["25.4"],"事件监听":["25.4"],"操纵dom":["25.4"],"切记":["25.4"],"dep":["25.4"],"这里要记住":["25.4"],"这样当前":["25.4"],"没有任何依赖项":["25.4"],"也就只有初始化执行一次":["25.4"],"模块卸载前":["25.4"],"componentwillunmount":["25.4"],"suspense":["26.2"],"悬念":["26.2"],"提出的一种同步的代码来实现异步操作的方案":["26.2"],"suspense可以让组件":["26.2"],"动态加载":["26.3"],"lazy":["26.4"],"接受一个函数":["26.4"],"这个函数需要动态调用":["26.4"],"它必须返回一个":["26.4"],"promise":["26.4"],"该":["26.4"],"lazy和suspense实现动态加载原理":["26.5"],"函数组件中可以用":["27.1"],"children":["27.2","27.3","27.4","28.1","29.1","29.4"],"模式":["27.2","27.3"],"container":["27.3","27.4"],"containerprops":["27.3","27.4"],"如果":["27.4"],"的":["27.4"],"既有函数也有组件":["27.4"],"这种情况应该怎么处理呢":["27.4"],"haha":["27.4"],"首先在":["27.4"],"抽象props":["27.5"],"的显式注入和隐式注入":["27.8"],"显式注入":["27.8"],"功能":["27.9"],"用于表单状态管理的":["27.9"],"formitem":["27.9"],"用于管理表单状态":["27.9"],"用于管理":["27.9"],"input":["27.9"],"输入框组件":["27.9"],"编写的组件能够实现的功能是":["27.9"],"①form":["27.9"],"组件可以被":["27.9"],"ref":["27.9","28.4","28.5"],"获取实例":["27.9"],"然后可以调用实例方法":["27.9"],"submitform":["27.9"],"获取表单内容":["27.9"],"用于提交表单":["27.9"],"ref是一个字符串":["28.1"],"类组件":["28.1"],"render":["28.1","28.3","28.6","29.1"],"div":["28.1","28.3","29.1"],"hello":["28.1"],"world":["28.1"],"跨层级获取ref":["28.2"],"如果我想在父组件":["28.2"],"获取":["28.2"],"孙":["28.2"],"子":["28.2"],"组件的实例":["28.2"],"通过回调函数将子组件的ref作为参数":["28.2"],"表单组件":["28.3"],"如果通过高阶组件包裹一个原始类组件":["28.4"],"就会产生一个问题":["28.4"],"如果高阶组件":["28.4"],"没有处理":["28.4"],"那么由于高阶组件本身会返回一个新组件":["28.4"],"所以当使用":["28.4"],"包装后组件的时候":["28.4"],"标记的":["28.4"],"类组件通信":["28.5"],"因为类组件有实例":["28.5"],"所以我们可以直接获取实例然后调用实例方法来操作":["28.5"],"函数组件通信":["28.5"],"对于函数组件":["28.5"],"本身是没有实例的":["28.5"],"所以我们要借用forwardref":["28.5"],"使函数组件可以接收ref":["28.5"],"useimperativehandle":["28.5"],"一方面第一个参数接受父组件传递的":["28.5"],"对象":["28.5","29.1"],"另一方面第二个参数是一个函数":["28.5"],"函数返回值":["28.5"],"作为":["28.5"],"对象获取的内容":["28.5"],"向传下来的ref传递方法":["28.5"],"forwardref":["28.5"],"函数组件每一次":["28.6"],"函数上下文会重新执行":["28.6"],"那么有一种情况就是":["28.6"],"在执行一些事件方法改变数据或者保存新数据的时候":["28.6"],"有没有必要更新视图":["28.6"],"有没有必要把数据放到":["28.6"],"如果视图层更新不依赖想要改变的数据":["28.6"],"那么":["28.6"],"改变带来的更新效果就是多余的":["28.6"],"几种控制":["29.1"],"方法":["29.1"],"第一种就是从父组件直接隔断子组件的渲染":["29.1"],"经典的就是":["29.1"],"memo":["29.1","29.8","29.9"],"缓存":["29.1"],"element":["29.1"],"父组件":["29.1"],"子组件有没有必要跟着父组件一起":["29.1"],"如果没有必要":["29.1"],"则就需要阻断更新":["29.1"],"导致不必要更新的demo":["29.1"],"子组件":["29.1"],"number":["29.1"],"子组件渲染":["29.1"],"let":["29.1","32.4"],"us":["29.1"],"learn":["29.1"],"cachesomething":["29.2"],"usememo":["29.2","29.3"],"会记录上一次执行":["29.3"],"create":["29.3"],"的返回值":["29.3"],"并把它绑定在函数组件对应的":["29.3"],"fiber":["29.3"],"对象上":["29.3"],"只要组件不销毁":["29.3"],"缓存值就一直存在":["29.3"],"纯组件是一种发自组件本身的渲染优化策略":["29.4"],"当开发类组件选择了继承":["29.4"],"就意味这要遵循其渲染规则":["29.4"],"规则就是浅比较":["29.4"],"是否相等":["29.4"],"基本使用":["29.4"],"纯组件本身":["29.4"],"purecomponentprototype有一个prototype属性":["29.5"],"ispurereactcomponent":["29.5"],"这个属性是一个布尔值":["29.5"],"用来标识当前组件是否是纯组件":["29.5"],"如果是纯组件":["29.5"],"那么在更新时":["29.5"],"会先进行浅比较":["29.5"],"如果相等":["29.5"],"就不会进行更新":["29.5"],"如果不相等":["29.5"],"才会进行更新":["29.5"],"这个属性在更新组件":["29.5"],"updateclassinstance":["29.5"],"purecomponent可以让组件自发的做一层性能上的调优":["29.6"],"但是父组件给是purecomponent的子组件绑定事件要小心":["29.6"],"避免两种情况":["29.6"],"避免使用箭头函数":["29.6"],"不要给是purecomponent子组件绑定箭头函数":["29.6"],"因为父组件每一次render如果是箭头函数绑定的话":["29.6"],"都会重新声场一个箭头函数":["29.6"],"purecomponent的浅比较就会失效":["29.6"],"参数函数指针改变":["29.6"],"导致子组件每一次都会重新渲染":["29.6"],"有的时候把控制渲染交给react组件本身处理靠不住":["29.7"],"那么我们便可以自定义渲染方案决定组建是否更新":["29.7"],"memo的特点":["29.9"],"当二个参数":["29.9"],"compare":["29.9"],"不存在时":["29.9"],"会用浅比较原则处理":["29.9"],"相当于仅比较":["29.9"],"版本的":["29.9"],"purecomponent":["29.9"],"同样适合类组件和函数组件":["29.9"],"大屏展示组件数据量大":["29.11"],"渲染耗时长":["29.11"],"可以使用react":["29.11"],"action":["32.0","32.5"],"state是用户触发函数来执行具体的一步一步操作":["32.1"],"reducer是根据reduce命名":["32.2"],"js":["32.4","32.5"],"tasksreducer":["32.4"],"actions":["32.4"],"added":["32.4"],"通过usestate保存当前状态":["32.5"],"new":["32.5"],"usereducer是react提供的一个hook":["32.6"],"用于管理组件的状态":["32.6"],"injection":["39.1"],"依赖注入":["39.1"],"userservice":["39.1"],"getlist":["39.1","39.5"],"获取用户的逻辑":["39.1"],"adminservice":["39.1"],"of":["39.2"],"控制反转需要的条件如下":["39.4"],"abstract":["39.5"],"service":["39.5"],"void":["39.5"],"putlist":["39.5"],"str":["44.0"],"remote":["44.0"],"addr":["44.0"],"status":["44.0"],"method":["44.0"],"proto":["44.0"],"layout":["45.0"]},{"0":["17.3","29.1","29.7","44.0"],"1":["17.6","21.8","25.1","28.6","29.1","29.4","32.4","39.4"],"2":["6.1","16.0","17.5","17.6","20.4","28.6","29.6","29.11","32.4"],"3":["5.2","17.6","20.4"],"4":["5.2"],"5":["5.2","17.1","44.0"],"10":["17.3","44.0"],"11":["44.0"],"14":["44.0"],"18":["29.4"],"123":["8.1"],"200":["18.9"],"605":["44.0"],"789":["8.1"],"9226":["44.0"],"错误处理":["1.0"],"details":["1.0","21.5","27.4"],"中间件可以执行以下任务":["1.0"],"执行任何代码操作":["1.0"],"对请求对象进行更改":["1.0"],"结束当前请求生命周期":["1.0"],"调用下一个中间件函数":["1.0"],"如果当前中间件没有":["1.0"],"手动结束生命周期":["1.0"],"执行上下文":["1.1"],"typescript":["1.1","1.2","4.1","21.5","21.7","21.8","21.9"],"n":["1.1"],"g":["1.1"],"gu":["1.1"],"xxx":["1.1"],"no":["1.1"],"spec":["1.1"],"injectable":["1.1","1.2"],"export":["1.1","1.2","23.1","26.4","29.1","29.6"],"class":["1.2","16.2","23.2","28.5","29.1"],"logginginterceptor":["1.2"],"implements":["1.2"],"nestinterceptor":["1.2"],"其中数据处理包含了对数据的转换":["1.3"],"constractor":["2.0"],"inject":["2.0","3.0"],"private":["2.0","39.5"],"appname":["2.0"],"注册类":["2.0"],"使用类将提供者注册到服务是最常用的方式":["2.0"],"autherservice":["2.0"],"以上是简写形式":["2.0"],"完整写法应该如下":["2.0"],"tencentservices":["3.0"],"smsservice":["3.0"],"base":["3.0"],"key":["3.0","27.9","39.5"],"baseconfig":["3.0"],"configtype":["3.0"],"typeof":["3.0"],"getsmsservice":["3.0"],"type":["3.0"],"string":["3.0","21.9","39.5"],"const":["3.0","16.4","16.6","21.6","21.8","21.9","23.0","23.2","27.4","28.2","28.3","29.4"],"面向对象中的设计原则":["4.0"],"用来减少计算机代码之前的耦合度":["4.0"],"在类以外的地方提供服务":["4.1"],"类内部调用的是该具体服务的抽象":["4.1"],"provider":["5.0"],"同时还允许您使用依赖注入和模块之间的依赖关系来构建更加可扩展的应用程序":["5.1"],"module是nestjs应用程序的基本构建块":["5.1"],"每个模块都有一个独立的作用域":["5.1"],"其中包含一组相关的controller":["5.1"],"全局绑定的中间件":["5.2"],"模块绑定的中间件":["5.2"],"全局守卫":["5.2"],"控制层守卫":["5.2"],"例如":["5.3"],"factory":["5.3"],"工厂":["5.3"],"配置对象":["5.3"],"连接对象等":["5.3"],"提供者使用":["5.3"],"即模块作用域":["5.4"],"若果向其他模块提供服务可以将提供者定义在export属性中":["5.4"],"其他模块需要再imports属性中引入当前模块":["5.4"],"模块是":["5.4"],"设计模式模式":["5.4"],"的":["5.4","26.4"],"多个模块共享当前模块实例":["5.4"],"今天给大家分享nest基础系列":["6.0"],"组合所有逻辑的地方":["6.1"],"我理解为di的container":["6.1"],"控制器":["6.1"],"处理https时的生命周期":["6.2"],"executioncontext是在每个请求到达控制器之前被nestjs封装产生的":["7.0"],"他的请求是将请求的上下文":["7.0"],"param":["8.0"],"query":["8.0","18.1"],"id":["8.1","32.4"],"x":["8.2","44.0"],"www":["8.2"],"jsx":["8.2","16.4","26.2","26.4","29.5","29.8","29.9"],"post":["8.2"],"a":["8.2","8.5"],"b":["8.2"],"http":["8.2"],"而是用":["8.3"],"一串数字做为":["8.3"],"boundary":["8.3"],"分隔符":["8.3"],"因为不是":["8.3"],"需要对内容做":["8.4"],"url":["8.4"],"encode":["8.4"],"age":["8.5","29.4"],"number":["8.5","29.4"],"return":["8.5","16.2","16.3","16.6","25.4","27.6","28.2","29.4","32.5"],"this":["8.5","16.5","28.1","28.3","29.1","29.4","39.1"],"action":["8.5","17.6"],"returns":["8.5"],"all":["8.5"],"把所有的参数都放到一个对象里面":["8.5"],"findone":["8.5"],"params":["8.5"],"console":["8.5","21.14","27.6","27.7","28.1","28.2","29.4","29.9"],"log":["8.5","21.14","27.6","27.7","28.1","28.2","29.4","29.9"],"hash":["10.0"],"加密插入数据库":["10.0"],"ts":["11.0","11.3"],"authmodule":["11.0"],"module":["11.0","11.1","11.3","16.5"],"imports":["11.0","11.1","11.3"],"prismamodule":["11.0","11.2"],"providers":["11.0","11.2"],"provide":["11.2"],"providertest":["11.2"],"链接redis当redis链接成功后再注册provider":["11.3"],"nestjs":["12.0"],"可以通过":["16.0"],"hoc":["16.0","16.2"],"向原始组件混入一些状态":["16.0"],"属性代理":["16.1"],"function":["16.2","23.1","25.4","26.2","27.3","27.6","27.7","28.2","29.5","29.9"],"wrapcomponent":["16.2"],"advance":["16.2"],"extends":["16.2","16.3","23.2","28.5","29.1","29.6"],"react":["16.2","16.3","16.4","18.1","21.6","27.9","28.1","28.5","29.5","29.6","29.11"],"component":["16.2","16.3","16.6","23.2","28.5","29.1","29.6"],"state":["16.2","16.5","29.1","32.0"],"render":["16.3","16.4","29.4","29.6"],"div":["16.3","27.4","32.5"],"hello":["16.3"],"world":["16.3"],"得到":["16.4"],"之后的内容":["16.4"],"利用这一点":["16.4"],"可以做渲染劫持":["16.4"],"更有甚者可以修改":["16.4"],"之后的":["16.4"],"element":["16.4"],"对象":["16.4"],"code":["16.4","21.5","21.7","27.4"],"group":["16.4"],"null":["16.5","16.6","23.2","28.2"],"componentdidmount":["16.5","28.1","28.3"],"if":["16.5","18.9","29.7"],"then":["16.5","16.7","18.9"],"wrap":["16.6"],"props":["16.6","27.1","27.2","27.4","27.7","28.3"],"dom":["16.6","25.2"],"useref":["16.6","28.2","28.5","28.6"],"rootpermission":["16.7"],"setrootpermission":["16.7"],"usestate":["16.7","28.5"],"useeffect":["16.7","28.2","28.5"],"获取权限列表":["16.7"],"getrootpermission":["16.7"],"res":["16.7"],"data":["16.7","27.8"],"as":["16.7"],"具体功能":["17.1"],"td":["17.1"],"rowspan":["17.1"],"数据更新驱动":["17.1"],"因为var不会新建作用域":["17.3"],"所以所有的settimeout都是共享一个作用域":["17.3"],"当for循环同步任务执行完毕后开始执行settimeout此时因为循环完成i的值已经为10":["17.3"],"并且所有的settimout共享一个作用域":["17.3"],"所以打印出来的结果都是10":["17.3"],"for":["17.3"],"var":["17.3"],"i":["17.3"],"在函数组件":["17.5"],"一次执行上下文中":["17.5"],"的值是":["17.5"],"固定不变的":["17.5"],"如果两次":["17.5"],"dispatchaction":["17.5"],"传入":["17.5"],"相同的":["17.5"],"值":["17.5"],"那么组件就":["17.5"],"将设置状态的逻辑":["17.6"],"修改成dispatch":["17.6"],"的一个":["17.6"],"编写":["17.6"],"一个":["17.6","26.4"],"函数":["17.6"],"传递数据":["17.7"],"但有时候父组件需要直接访问子组件的方法":["17.8"],"例如触发子组件的某个功能或获取子组件的状态":["17.8"],"传统的解决方案是使用":["17.8"],"ref":["17.8","28.1"],"来引用子组件的实例":["17.8"],"然后通过":["17.8"],"current":["17.8","28.3"],"来访问子组件的方法或属性":["17.8"],"但是":["17.8","25.4","29.3"],"这种方式需要手动编写一些额外的代码":["17.8"],"不够直观和方便":["17.8"],"的出现解决了这个问题":["17.8"],"或其他数据获取库来处理数据请求":["18.1"],"但在某些情况下":["18.1"],"使用":["18.1"],"可以带来更多的好处和便利性":["18.1"],"自动缓存和数据同步":["18.1"],"后期维护困难":["18.2"],"后端返回的错误数据":["18.9"],"errormessage":["18.9"],"seterrormessage":["18.9"],"fetchdata":["18.9"],"开始获取数据":["18.9"],"将isloading置为true":["18.9"],"true":["18.9","18.10"],"fetch":["18.9"],"https":["18.9"],"api":["18.9"],"github":["18.9"],"com":["18.9"],"async":["18.9"],"response":["18.9"],"如果请求返回status不为200":["18.9"],"则抛出后端错误":["18.9"],"status":["18.9"],"message":["18.9"],"await":["18.9"],"如果数据正在加载":["18.10"],"该属性为":["18.10"],"否则为":["18.10"],"false":["18.10","21.14","45.0"],"iserror":["18.10"],"表示查询是否遇到了错误":["18.10"],"发送url请求到服务器端":["19.0"],"server会通过不同的地址返回不同的页面":["19.0"],"为什么需要路由":["19.0"],"不会触发刷新":["19.3"],"to":["19.3","21.14"],"navlink":["19.3"],"类似link":["19.3"],"状态管理":["20.0"],"也被称作单一数据源":["20.1","21.1"],"将所有的数据放到一个大对象中":["20.1","21.1"],"关键词":["20.1","21.1"],"model":["20.3"],"view":["20.3","21.5","21.7","27.4"],"controller":["20.3","39.1"],"模式中":["20.3"],"数据的变化路径清晰可见":["20.4"],"可以更轻松地追踪数据的流动和变化过程":["20.4"],"更好的组件通信":["20.4"],"flux架构提供了明确的机制来处理组件之间的通信和状态共享":["20.4"],"使得组件间的交互更加可控和灵活":["20.4"],"状态的集中管理":["20.4"],"flux将应用程序的状态集中存储在存储器":["20.4"],"store":["20.4"],"ryun":["21.0"],"逻辑共享":["21.3"],"变得更容易":["21.3"],"但usestate":["21.3"],"the":["21.5","21.7","27.4"],"import":["21.5","27.9","28.5","29.9"],"atom":["21.6","21.8"],"useatom":["21.6"],"from":["21.6","27.9","28.5","29.9"],"jotai":["21.6"],"fc":["21.6"],"valueatom":["21.8"],"mockdata":["21.9"],"new":["21.9","39.1"],"promise":["21.9"],"r":["21.9"],"settimeout":["21.9"],"并不需要重新渲染呀":["21.10"],"这是因为":["21.10"],"如果使用useatom":["21.10"],"即使你不引入它的value值":["21.10"],"但它由useatomvalue包裹":["21.10"],"当更新时":["21.10"],"useatomvalue会触发订阅事件":["21.10"],"从而触发渲染":["21.10"],"如果不理解可以阅读":["21.10"],"recoil原理":["21.10"],"理解":["21.10"],"解决渲染问题":["21.11"],"useatomvalue":["21.11"],"正常情况下":["21.12"],"无需用provider包裹组件":["21.12"],"createstore":["21.13"],"export出去":["21.13"],"statusatom":["21.14"],"监听发生变化":["21.14"],"sub":["21.14"],"value":["21.14","23.2"],"is":["21.14"],"changed":["21.14"],"get":["21.14"],"set":["21.14"],"接收两个参数":["22.1"],"一个是state":["22.1"],"一个是action":["22.1"],"中间件用于增强":["22.2"],"dispatch":["22.2","32.5"],"功能":["22.2"],"themecontext":["23.0","23.2"],"提供者":["23.1"],"default":["23.1","26.4","29.1","29.6"],"providerdemo":["23.1"],"提供的":["23.2"],"属性":["23.2"],"这里注意的是":["23.2"],"不是上述老版的contexttypes":["23.2"],"createcontext":["23.2"],"类组件":["23.2"],"consumerdemo":["23.2"],"static":["23.2"],"hooks也提供了":["25.0"],"dep":["25.1"],"第一个参数callback":["25.1"],"返回销毁函数":["25.1"],"下次执行useeffect会首先执行这个销毁函数":["25.1"],"首先":["25.2"],"是在":["25.2"],"更新之后":["25.2"],"浏览器绘制之前":["25.2"],"uselayouteffect":["25.3"],"打印":["25.3"],"增加定时器":["25.4"],"延时器":["25.4"],"解除事件监听器":["25.4"],"清除定时器":["25.4"],"模块组件props更新":["25.4"],"代替":["25.4"],"componentwillreceiveprops":["25.4"],"着实有点牵强":["25.4"],"首先因为二者的执行阶段根本不同":["25.4"],"一个是在render阶段":["25.4"],"一个是在commit阶段":["25.4"],"其次":["25.4"],"会初始化执行一次":["25.4"],"只有组件更新":["25.4"],"await等待异步操作":["26.2"],"直到异步操作完成":["26.2"],"才会渲染组件":["26.2"],"用法":["26.2"],"子组件":["26.2"],"userinfo":["26.2"],"需要":["26.4"],"resolve":["26.4"],"组件":["26.4","28.3"],"来作为":["27.1"],"插槽组件":["27.2"],"container":["27.2","39.5"],"是container":["27.3"],"提供的本质是":["27.3"],"里打印":["27.4"],"看看是什么":["27.4"],"im":["27.4"],"此时需要用到一个api":["27.4"],"isvalidelement":["27.4"],"来判断当前children的值是elementdom还是函数":["27.4"],"tip":["27.5","28.6"],"抽象":["27.5"],"son":["27.6","27.7","27.8"],"father":["27.8","29.6"],"resetform":["27.9"],"方法用于重置表单":["27.9"],"②form组件自动过滤掉除了formitem之外的其他react元素":["27.9"],"③formitem":["27.9"],"中":["27.9"],"name":["27.9"],"属性作为表单提交时候的":["27.9"],"还有展示的":["27.9"],"label":["27.9"],"④":["27.9"],"可以自动收集":["27.9"],"表单的值":["27.9"],"useimperativehandle":["27.9"],"index":["28.1","29.1"],"refs":["28.1"],"currentdom":["28.1"],"字符串模式获取元素或组件":["28.1"],"parentcomponent":["28.2"],"childref":["28.2"],"childrencomponent":["28.2"],"setref":["28.2"],"forwardref":["28.3","28.4"],"会指向":["28.4"],"返回的组件":["28.4"],"而并不是":["28.4"],"包裹的原始类组件":["28.4"],"为了解决这个问题":["28.4"],"可以对":["28.4"],"做一层处理":["28.4"],"父通信子":["28.5"],"直接传递pros":["28.5"],"子通信父":["28.5"],"直接让父ref获取实例":["28.5"],"得到实例方法":["28.5"],"父调用子实例方法用来修改子组件状态":["28.5"],"yuqingcomp":["28.5"],"这时候更新无疑是一种性能上的浪费":["28.6"],"会创建出一个原始的ref对象":["28.6"],"只要组件不销毁则这个对象一直存在":["28.6"],"不影响视图变化的不要放到state中":["28.6"],"因为每次更新state都会重新渲染组件":["28.6"],"可以通过useref来缓存":["28.6"],"因为useref不会引起组件重新渲染":["28.6"],"第一个能够直接修改数据":["28.6"],"不会造成函数组件冗余的更新作用":["28.6"],"第二个":["28.6"],"numbera":["29.1"],"numberb":["29.1"],"button":["29.1","32.5"],"onclick":["29.1","32.5"],"setstate":["29.1","29.4"],"create":["29.2"],"deps":["29.2","29.3"],"第一个参数为一个函数":["29.2"],"函数的返回值作为缓存值":["29.2"],"如上":["29.2"],"中如果有一项改变":["29.3"],"就会重新执行":["29.3"],"返回值作为新的值记录到":["29.3"],"usememo应用场景":["29.3"],"alien":["29.4"],"obj":["29.4"],"changeobjnumber":["29.4"],"组件渲染":["29.4"],"方法中使用的":["29.5"],"这个函数在更新组件的时候被调用":["29.5"],"在这个函数内部":["29.5"],"有一个专门负责检查是否更新的函数":["29.5"],"checkshouldcomponentupdate":["29.5"],"reconciler":["29.5"],"reactfiberclasscomponent":["29.5"],"js":["29.5"],"purecomponent":["29.6"],"callback":["29.6"],"purecomponent的父组件是函数组件的情况":["29.6"],"statenuma":["29.7"],"statenumb":["29.7"],"newprops":["29.7"],"newstate":["29.7"],"newcontext":["29.7"],"demo":["29.9"],"当父组件传递的number更改且大于5时":["29.9"],"更新组件":["29.9"],"children":["29.9"],"forceupdate":["29.10"],"如果更新状态使用的forceupdate":["29.10"],"memo局部更新":["29.11"],"表单":["29.11"],"reducer是把操作整合到一起":["32.1"],"它接收目前的结果和当前的值":["32.2"],"text":["32.4"],"参观卡夫卡博物馆":["32.4"],"看木偶戏":["32.4"],"deleted":["32.4"],"usereducer":["32.5"],"reducer":["32.5"],"initialstate":["32.5"],"它的实际用途包括":["32.6"],"状态复杂逻辑":["32.6"],"当组件的状态逻辑较为复杂":["32.6"],"涉及多个状态变化时":["32.6"],"获取管理员的逻辑":["39.1"],"constructor":["39.1"],"service":["39.1"],"当前service只能获取用户的逻辑":["39.1"],"但是我想再获取管理员的逻辑时就需要新注册一个类":["39.1"],"read":["39.1"],"处理用户数据的逻辑":["39.1"],"control":["39.2"],"解耦和模块化":["39.3"],"需要一个管理容器":["39.4"],"创建一个变量存贮依赖项":["39.5"],"dependencies":["39.5"],"any":["39.5"],"host":["44.0"],"header":["44.0"],"user":["44.0"],"agent":["44.0"],"mozilla":["44.0"],"macintosh":["44.0"],"intel":["44.0"],"mac":["44.0"],"os":["44.0"],"applewebkit":["44.0"]},{"1":["1.0","8.2","20.3","21.7","21.9","22.1","27.3","27.9"],"2":["20.1","21.1","21.14","25.1","39.3","39.4"],"3":["6.1","17.5","32.4"],"4":["20.4"],"6":["5.2"],"7":["5.2","8.2"],"8":["5.2"],"12":["44.0"],"15":["44.0"],"22":["8.5"],"23":["8.2"],"85":["8.5"],"89":["8.5"],"123":["27.8"],"200":["16.7"],"1000":["17.3"],"3000":["21.9"],"必须使用next":["1.0"],"方法将控制权传递给下一个中间件函数":["1.0"],"否则请求将被挂起":["1.0"],"定义中间件":["1.0"],"code":["1.0","17.6","28.4"],"group":["1.0","17.6"],"typescript":["1.0","5.4","21.10"],"index":["1.0","16.4"],"ts":["1.0","2.0","17.6"],"class":["1.1","4.1","16.4"],"authgurad":["1.1"],"implements":["1.1"],"canactive":["1.1"],"canactivate":["1.1"],"contenxt":["1.1"],"executioncontext":["1.1","1.2"],"boolean":["1.1"],"promise":["1.1","21.6"],"observable":["1.1"],"intercept":["1.2"],"context":["1.2"],"next":["1.2"],"callhandler":["1.2"],"console":["1.2","16.6","17.3","25.4"],"log":["1.2","16.6","17.3","25.4"],"验证":["1.3"],"provider":["2.0","5.1","16.7","21.3"],"useclass":["2.0"],"动态注册":["2.0"],"下面实现根据不同的环境创建不同的服务":["2.0"],"首先安装":["2.0"],"dotenv":["2.0"],"扩展包":["2.0"],"用来读取":["2.0"],"env环境变量":["2.0"],"然后创建两个服务":["2.0"],"service":["2.0","3.0","6.1"],"与":["2.0"],"b":["2.0"],"tencnetservice":["3.0"],"if":["3.0","16.4","29.5"],"return":["3.0","16.4","16.7","18.9","26.2","27.7","28.5","29.5","29.7","29.9"],"privider":["3.0"],"curenv":["3.0"],"this":["3.0","16.2","16.4","23.2","28.2","28.5","29.7","39.5"],"config":["3.0"],"get":["3.0","21.8"],"其根本思想是":["4.0"],"借助于第三方":["4.0"],"abstrct":["4.1"],"phone":["4.1"],"playgame":["4.1"],"动态provider":["5.0"],"asynprovider":["5.0"],"service和其他提供者":["5.1"],"module的作用是将应用程序拆分为更小的可重用部分":["5.1"],"以便更好的组织代码和管理依赖关系":["5.1"],"路由守卫":["5.2"],"全局拦截器":["5.2"],"控制器之前":["5.2"],"injectable":["5.3"],"装饰器定义":["5.3"],"这样系统会分析":["5.3"],"constructor":["5.3"],"进行依赖注入":["5.3"],"模块提供者也是单例":["5.4"],"所以模块被多个其他模块使用":["5.4"],"那该模块的provider也是共享的":["5.4"],"导入其他模块":["5.4"],"nestjs核心基础概念":["6.0"],"controller处理请求":["6.1"],"服务":["6.1"],"传递给控制器":["7.0"],"拦截器":["7.0"],"管道":["7.0"],"form":["8.0","8.5"],"这里的id叫做params":["8.1"],"user":["8.2","26.2"],"agent":["8.2"],"postmanruntime":["8.2"],"accept":["8.2"],"host":["8.2"],"localhost":["8.2"],"url":["8.3","44.0"],"的方式了":["8.3"],"自然也不用再做":["8.3"],"encode":["8.3","8.5"],"而":["8.4"],"data":["8.4","21.6","21.9"],"urlencoded":["8.5"],"是通过body传输数据":["8.5"],"其实是把query字符串放在了body里":["8.5"],"这里需要做url":["8.5"],"axios默认自动编译":["8.5"],"content":["8.5"],"type":["8.5","32.5"],"application":["8.5"],"x":["8.5"],"www":["8.5"],"body":["8.5"],"e5":["8.5"],"用nest接收的话就是使用":["8.5"],"body装饰器":["8.5"],"login":["10.0"],"focus":["11.0","17.3"],"authservice":["11.0"],"简写":["11.0"],"jwtservice":["11.0"],"prismamodule":["11.1","11.3"],"inject":["11.2"],"person":["11.2"],"appservice":["11.2"],"providers":["11.3"],"provide":["11.3"],"实现文件上传是基于express":["12.0"],"渲染劫持":["16.0"],"可以利用":["16.0","29.3"],"动态挂载原始组件":["16.0"],"和":["16.1","39.1"],"name":["16.2","27.8"],"alien":["16.2"],"render":["16.2","16.5","23.2","28.5","29.3"],"props":["16.2","25.4","27.5","28.5","29.7","29.11"],"优点":["16.2"],"function":["16.3","27.4","27.9","28.4","29.6"],"hoc":["16.3"],"wrapcomponent":["16.3","16.4"],"extends":["16.4"],"visible":["16.4"],"else":["16.4"],"div":["16.4","27.6","27.7","28.5","29.4","29.9"],"暂无数据":["16.4"],"动态加载":["16.5"],"组件":["16.5"],"setstate":["16.5","28.5","29.10"],"const":["16.5","17.6","21.7","26.2","26.4","27.9","29.9","32.4","39.1"],"useeffect":["16.6","28.6"],"handerclick":["16.6"],"发生点击事件":["16.6"],"current":["16.6"],"addeventlistener":["16.6"],"any":["16.7"],"doclist":["16.7"],"taglist":["16.7"],"value":["16.7"],"rootrouter":["16.7"],"usestate":["17.1","23.1","27.9"],"数据驱动更新":["17.1"],"usereducer":["17.1"],"settimeout":["17.3","21.6"],"结果都是10":["17.3"],"let":["17.3"],"在每次循环的时候都会新建一个作用域":["17.3"],"所以当每次循环的时候settimout被分配到异步队列时都会保存当前的作用域i的值":["17.3"],"而不是所有的settimeout共享一个作用域":["17.3"],"不会更新":["17.5"],"当触发":["17.5"],"在":["17.5"],"当前执行上下文中获取不到最新的state":["17.5"],"只有再下一次组件":["17.5"],"rerender":["17.5"],"中才能获取到":["17.5"],"案例":["17.5"],"此时点击按钮":["17.5"],"log打印出来的值并不是更改过后的number":["17.5"],"在你的组件中":["17.6"],"使用":["17.6","17.8"],"参数":["17.6"],"state":["17.6","28.5"],"dispatch":["17.6"],"避免props层层传递":["17.7"],"它允许子组件通过自定义的方式向父组件暴露自己的实例方法或属性":["17.8"],"父组件可以通过":["17.8"],"直接访问子组件的这些方法或属性":["17.8"],"而无需手动编写额外的代码":["17.8"],"父组件可以更直接地与子组件进行交互":["17.8"],"提供了更灵活的组件通信方式":["17.8"],"它使得父组件能够以更直观的方式调用子组件的方法":["17.8"],"从而简化了组件之间的通信逻辑":["17.8"],"需要注意的是":["17.8"],"自带数据缓存和自动刷新功能":["18.1"],"它会自动缓存数据并定期刷新以保持数据的最新状态":["18.1"],"这减少了手动管理缓存的复杂性":["18.1"],"加载状态管理":["18.1"],"query内置状态管理":["18.1"],"你可以不用再写isloading":["18.1"],"无数据缓存":["18.2"],"json":["18.9"],"throw":["18.9"],"new":["18.9","21.6","32.0"],"error":["18.9","18.10"],"text":["18.9"],"string":["18.9","21.6"],"请求完成将isloading置为false":["18.9"],"接口请求成功":["18.9"],"将iserror置为false":["18.9"],"存储后端返回的数据":["18.9"],"catch":["18.9"],"接口请求错误":["18.9"],"将iserror置为true":["18.9"],"存储后端返回的错误数据":["18.9"],"如果查询出现错误":["18.10"],"单页应用需要路由切换":["19.0"],"通过url可以定位到页面":["19.0"],"但是会添加当前选中状态":["19.3"],"home":["19.3"],"activeclassname":["19.3"],"combinereducers":["20.1","21.1"],"multiple":["20.1","21.1"],"应用程序的状态分散在多个视图和控制器之间":["20.3"],"导致数据流动难以追踪和管理":["20.3"],"这样的架构往往会导致以下问题":["20.3"],"中":["20.4"],"使得状态的修改和管理更加一致和可控":["20.4"],"提升应用程序的可维护性和可扩展性":["20.4"],"flux架构的职责分离和分层结构使得应用程序的各个模块解耦":["20.4"],"提高了代码的可复用性和可测试性":["20.4"],"便于应用程序的扩展和维护":["20.4"],"人话":["20.4"],"数据单向易于追踪更改来源":["20.4"],"usecontext对于多个store仍需要维护多个context":["21.3"],"因为当context改变":["21.3"],"所有消费该context的组件都会重新渲染即使是组件仅用到了":["21.3"],"context的一部分":["21.3"],"from":["21.5","21.10","29.1"],"jotai":["21.5"],"fc":["21.5","21.10"],"mockdata":["21.6"],"r":["21.6"],"mock":["21.6","21.9"],"valueatom":["21.7","21.9"],"atom":["21.7","21.9","21.10"],"addnumberatom":["21.8"],"ge":["21.8"],"a组件使用即订阅":["21.10"],"atom原子更新触发订阅事件从而更新":["21.10"],"解决办法":["21.10"],"参考7":["21.10"],"import":["21.10","29.1"],"react":["21.10","21.14","23.0","23.1"],"usesetatom":["21.11"],"如果有的组件只需要监听状态的变化值":["21.11"],"但如果需要控制某些组件的状态不发生更新":["21.12"],"可以用provider包裹":["21.12"],"使用jotai的provider提供给app":["21.13"],"其中":["21.13"],"default":["21.14"],"main":["21.14"],"reactdom":["21.14"],"返回一个新的state":["22.1"],"createstore":["22.1"],"返回一个增强后的":["22.2"],"createcontext":["23.0"],"null":["23.0"],"contextvalue":["23.1"],"setcontextvalue":["23.1"],"color":["23.1","23.2"],"border":["23.2"],"settheme":["23.2"],"background":["23.2"],"函数组件usecontext方式":["23.2"],"既然类组件都可以快捷获取":["23.2"],"了":["23.2"],"那么函数组件也应该研究一下如何快速获取":["23.2"],"吧":["23.2"],"于是乎":["23.2"],"api":["25.0"],"用于弥补函数组件没有生命周期的缺陷":["25.0"],"销毁定时器":["25.1"],"订阅等以防资源泄露":["25.1"],"第二个参数为依赖项":["25.1"],"依赖项发生变化则执行callback":["25.1"],"这样可以方便修改":["25.2"],"获取":["25.2"],"信息":["25.2"],"本质上是解决":["25.3"],"css":["25.3"],"in":["25.3"],"js":["25.3","26.4"],"产生的重绘问题":["25.3"],"style":["25.3"],"components库为例":["25.3"],"tip":["25.3"],"component":["25.3","29.8"],"你可以使用es6的标签模板字符串语法":["25.3"],"tagged":["25.3"],"变化的时候才会执行":["25.4"],"props变化":["25.4"],"模块更新后":["25.4"],"componentdidupdate":["25.4"],"组件更新完成":["25.4"],"没有":["25.4"],"依赖项":["25.4","28.6"],"注意此时useeffect没有第二个参数":["25.4"],"没有第二个参数":["25.4"],"那么每一次执行函数组件":["25.4"],"都会执行该":["25.4"],"获取用户数据信息":["26.2"],"然后再渲染组件":["26.2"],"getuserinfo":["26.2"],"h1":["26.2"],"lazycomponent":["26.4"],"test":["26.4"],"改变后的监听函数":["27.1"],"不过有一点值得注意":["27.1"],"上述可以在":["27.2"],"组件中":["27.2"],"通过":["27.2"],"reutrn":["27.3"],"这种方式作用是":["27.3"],"根据需要控制":["27.3"],"hello":["27.4","27.6","27.7"],"my":["27.4"],"is":["27.4"],"mes":["27.4"],"一般用于跨层级传递":["27.5"],"world":["27.6","27.7"],"father":["27.6"],"隐式注入":["27.8"],"cloneelement":["27.9"],"children":["27.9","29.2"],"forwardref":["27.9"],"可接收父组件传递过来的ref确定具体渲染的dom":["27.9"],"myform":["27.9"],"可使父组件直接访问抛出方法":["27.9"],"a":["27.9"],"currentcominstance":["28.1"],"ref是一个函数":["28.1"],"node":["28.2"],"span":["28.2"],"ref":["28.2","28.3","28.6"],"通过forwardref转发":["28.2"],"newfahter组件是为了转发ref的中间组件":["28.2"],"给form组件实例":["28.3"],"绑定给":["28.3"],"form属性":["28.3"],"给index组件实例":["28.3"],"index属性":["28.3"],"button":["28.3","29.4"],"给button":["28.3"],"dom":["28.3"],"元素":["28.3"],"高阶组件把组件作为参数":["28.4"],"我们想获取的ref其实是这个参数的实例":["28.4"],"如果不使用forwardref转发一下那么最终获取到的组件就是hoc返回的wrap组件":["28.4"],"但是我们需要的事传递进hoc被包裹的组件":["28.4"],"forwardref的意义是可以让开发着手动控制ref的指向":["28.4"],"details":["28.4"],"view":["28.4"],"the":["28.4"],"jsx":["28.4"],"togjsmsg":["28.5"],"togyqmsg":["28.5"],"调用父组件传递过来的修改函数":["28.5"],"togjs":["28.5"],"提供实例方法供父组件调用":["28.5"],"toyq":["28.5"],"msg":["28.5"],"gjs":["28.5"],"say":["28.5"],"保存数据":["28.6"],"如果有":["28.6"],"usememo":["28.6"],"引用":["28.6"],"对象中的数据":["28.6"],"无须将":["28.6"],"对象添加成":["28.6"],"dep":["28.6"],"因为":["28.6"],"改变numbera":["29.1"],"改变numberb":["29.1"],"children只依赖a":["29.1"],"当b更新后会触发组件整体更新":["29.1"],"此时就需要单独判断children是否需要更新":["29.1"],"根据修改的值是不是a判断":["29.1"],"优化":["29.1"],"demo":["29.2"],"中把":["29.2"],"对应的":["29.2"],"element":["29.2","29.3"],"可以缓存":["29.3"],"对象":["29.3"],"从而达到按条件渲染组件":["29.3"],"优化性能的作用":["29.3"],"如果组件中不期望每次":["29.3"],"都重新计算一些值":["29.3"],"组件本身改变state":["29.4"],"onclick":["29.4"],"state相同情况":["29.4"],"typeof":["29.5"],"instance":["29.5"],"shouldcomponentupdate":["29.5"],"newprops":["29.5"],"newstate":["29.5"],"nextcontext":["29.5"],"逻辑":["29.5"],"绑定函数要用usecallback或者usememo处理":["29.6"],"就是再用class":["29.6"],"组件开发项目的时候":["29.6"],"如果父组件是函数":["29.6"],"子组件是purecomponent":["29.6"],"那么绑定函数要小心":["29.6"],"因为函数组件每一次执行":["29.6"],"如果不处理":["29.6"],"还会声明一个新的函数":["29.6"],"所以purecomponent对比同样会失效":["29.6"],"propsnuma":["29.7"],"true":["29.7"],"只有当":["29.7"],"子组件渲染":["29.9"],"number":["29.9"],"child":["29.9"],"prevprops":["29.9"],"nextprops":["29.9"],"而不是":["29.10"],"一般会采用受控组件的模式去管理表单数据层":["29.11"],"表单数据层完全托管于":["29.11"],"或是":["29.11"],"用户触发事件名进而执行相应的处理函数":["32.1"],"例如":["32.1"],"然后返回下一个结果":["32.2"],"打卡列侬墙":["32.4"],"finalstate":["32.4"],"reduce":["32.4"],"output":["32.4"],"document":["32.4"],"getelementbyid":["32.4"],"add":["32.5"],"message":["32.5"],"添加":["32.5"],"可以使用usereducer来更好地组织和管理状态的变化逻辑":["32.6"],"替代usestate":["32.6"],"在一些情况下":["32.6"],"使用usereducer可以替代多个独立的usestate":["32.6"],"result":["39.1"],"此时controller":["39.1"],"存在了强耦合的关联":["39.1"],"无法复用":["39.1"],"若我们想用authservice时必须新注册一个类来实现":["39.1"],"控制反转":["39.2"],"container":["39.4"],"注册方法":["39.5"],"register":["39.5"],"dependency":["39.5"],"khtml":["44.0"],"like":["44.0"],"gecko":["44.0"],"version":["44.0"],"safari":["44.0"],"15accept":["44.0"],"encoding":["44.0"],"gzipbody":["44.0"]},{"0":["21.10","25.4"],"1":["16.2","21.6"],"2":["8.5","27.3"],"3":["16.0","39.4"],"4":["6.1"],"5":["29.9"],"8":["23.2"],"9":["5.2"],"10":["5.2"],"456":["8.1"],"3000":["8.2","21.6"],"中间件实例代码":["1.0"],"injectable":["1.0"],"export":["1.0","8.5","16.3","28.5","29.9","32.4"],"class":["1.0","8.5","28.4","29.9"],"loggermiddleware":["1.0"],"implements":["1.0"],"nestmiddleware":["1.0"],"use":["1.0"],"req":["1.0"],"const":["1.1","1.2","21.5","21.10","25.4","27.6","27.7","28.4","28.5","28.6","29.6"],"request":["1.1"],"switchtohttp":["1.1"],"getrequest":["1.1"],"return":["1.1","1.2","23.1","26.4","27.4","29.6"],"validaterequest":["1.1"],"function":["1.1","26.4","27.8","28.5","32.4"],"before":["1.2"],"now":["1.2"],"date":["1.2"],"他可以在控制器之前或之后对数据进行预处理":["1.3"],"import":["2.0","16.5"],"config":["2.0"],"from":["2.0"],"读取":["2.0"],"env":["2.0"],"到":["2.0"],"process":["2.0"],"环境变量中":["2.0"],"path":["2.0"],"join":["2.0"],"system":["3.0"],"provider":["3.0","21.14"],"send":["3.0"],"getsmsprovider":["3.0"],"使用":["3.0","23.2"],"nest":["3.0"],"实现具有依赖关系的对象之间的解耦":["4.0"],"第三方举例":["4.0"],"name":["4.1","11.2","26.2"],"string":["4.1","11.2"],"module":["5.0"],"controller提供一个路由处理器":["5.1"],"他可以将http请求映射到响应的处理器方法上":["5.1"],"并将处理器方法的结果作为http响应返回给client":["5.1"],"controller是处理":["5.1"],"控制器层拦截器":["5.2"],"路由拦截器":["5.2"],"全局管道":["5.2"],"提供者在模块的":["5.3"],"providers":["5.3","11.1"],"属性中定义":["5.3"],"用于注册到服务容器中":["5.3"],"用于被其他类依赖注入":["5.3"],"提供者可以在自身的constructor构造函数中依赖注入其他服务提供者":["5.3"],"imports":["5.4"],"jwtmodule":["5.4"],"registerasync":["5.4"],"configmodule":["5.4"],"inject":["5.4"],"configservice":["5.4"],"愿我们共同进步":["6.0"],"操作数据库以及处理所有逻辑的地方":["6.1"],"管道":["6.1"],"守卫等各个部分":["7.0"],"以便他们可以对请求进行处理和转换":["7.0"],"urlencoded":["8.0"],"这里的id叫做query":["8.1"],"其中非英文的字符和一些特殊字符要经过编码":["8.1"],"encoding":["8.2"],"gzip":["8.2"],"deflate":["8.2"],"br":["8.2","17.5"],"引入图片":["8.3"],"alt":["8.3"],"text":["8.3","21.7","28.5"],"则需要加很长的":["8.4"],"boundary":["8.4"],"两种方式都有一些缺点":["8.4"],"nest会解析请求体然后注入到dto中":["8.5"],"dto":["8.5"],"data":["8.5"],"transfer":["8.5"],"object":["8.5"],"封装数据传输对象":["8.5"],"创建dto":["8.5"],"在controller中使用":["8.5"],"createcatdto":["8.5"],"isstring":["8.5"],"readonly":["8.5"],"isint":["8.5"],"breed":["8.5"],"登录接收账号密码":["10.0"],"argon2":["10.0"],"provide":["11.0","11.1"],"jwt":["11.0"],"useclass":["11.0"],"usefactory":["11.2","11.3"],"redis":["11.3"],"client":["11.3","21.14"],"async":["11.3","21.9"],"multer实现的":["12.0"],"还可以先获取原始组件的渲染树":["16.0"],"进行可控性修改":["16.0"],"可以配合":["16.0"],"反向继承":["16.1"],"属性代理可以和业务组件低耦合":["16.2"],"零耦合":["16.2"],"对于条件渲染和":["16.2"],"属性增强":["16.2"],"只负责控制子组件渲染和传递额外的":["16.2"],"就可以了":["16.2"],"所以无须知道":["16.2"],"直接继承需要包装的组件":["16.3"],"default":["16.3","28.5","29.9","32.4"],"优点":["16.3"],"①":["16.3"],"控制渲染树":["16.4"],"component":["16.4","28.4"],"ul":["16.4"],"li":["16.4"],"vue":["16.4"],"props":["16.5","29.1"],"loading":["16.5","26.4"],"index":["16.5","21.14","26.4"],"asyncrouter":["16.5"],"pages":["16.5"],"click":["16.6"],"removeeventlistener":["16.6"],"编写hoc":["16.7"],"没有权限":["16.7"],"nopermission":["16.7"],"div":["16.7","18.9","23.1","26.4"],"您暂时没有权限":["16.7"],"请联系管理员开通权限":["16.7"],"permissionhoc":["16.7"],"订阅状态":["17.1"],"创建reducer":["17.1"],"更新试图":["17.1"],"usesyncexternalstore":["17.1"],"订阅外部数据源触发更新":["17.1"],"而是更改前的值":["17.5"],"这意味着log时更改未发生":["17.5"],"原因":["17.5"],"setnumber是异步的":["17.5"],"触发handleclick时":["17.5"],"任务线程会先执行同步再执行异步":["17.5"],"所以log打印的是更改前的值":["17.5"],"外部log可以获取到最新的值的原因是":["17.5"],"在执行完同步的log后执行异步setnumber":["17.5"],"异步setnumber触发重新渲染":["17.5"],"重新执行index函数":["17.5"],"initstate":["17.6"],"实际使用":["17.6"],"type":["17.6","28.5","28.6"],"导致代码冗余":["17.7"],"应该与":["17.8"],"forwardref":["17.8"],"一起使用":["17.8"],"以便将子组件的引用传递给父组件":["17.8"],"总结来说":["17.8"],"解决了在":["17.8"],"组件中":["17.8"],"父组件需要直接访问子组件的实例方法或属性时":["17.8"],"通过更简洁":["17.8"],"直观的方式实现组件之间的通信的问题":["17.8"],"code":["17.8"],"group":["17.8"],"isfetching等状态了":["18.1"],"它会自动管理数据加载状态":["18.1"],"数据同步和预取":["18.1"],"支持数据预取和自动同步":["18.1"],"提前获取数据并在后台刷新":["18.1"],"以保持数据最新":["18.1"],"无数据同步":["18.2"],"useeffect":["18.9"],"初始化请求数据":["18.9"],"h1":["18.9"],"p":["18.9"],"加载中":["18.9"],"button":["18.9","28.5"],"onclick":["18.9","28.5"],"重试":["18.9"],"刷新":["18.9"],"after":["18.9"],"该属性将包含错误信息":["18.10"],"通常是一个错误对象":["18.10"],"包含有关查询错误的详细信息":["18.10"],"status":["18.10"],"表示查询的状态":["18.10"],"用于指示加载中":["18.10"],"更有语义的组织资源":["19.0"],"三种路由的实现方式":["19.0"],"browserrouter":["19.0"],"selected":["19.3"],"prompt":["19.3"],"满足条件时提示用户是否离开页面":["19.3"],"when":["19.3"],"stores":["20.1","21.1"],"多数据源模式":["20.1","21.1"],"将状态存放到多个数据源中":["20.1","21.1"],"数据流动不可控":["20.3"],"在mvc模式中":["20.3"],"视图可以直接修改模型的状态":["20.3"],"模型可以直接更新视图":["20.3"],"统一状态管理":["20.4"],"数据可预测性":["20.4"],"新状态":["20.4"],"旧状态":["20.4"],"事件":["20.4"],"tip":["20.4"],"flux":["20.4"],"的核心思想是单向数据流":["20.4"],"容易导致不必要的":["21.3"],"无用渲染":["21.3"],"造成性能损失":["21.3"],"比如react":["21.3"],"react":["21.5","25.1","27.4","28.4","28.6"],"创建atom":["21.5","21.6"],"valueatom":["21.5","21.6"],"派生atom":["21.6"],"依赖某个atom":["21.6"],"value":["21.7","28.5"],"set":["21.8","21.9"],"arg":["21.8","21.9"],"addnumberatom":["21.9"],"null":["21.9","28.1","28.3","32.4"],"get":["21.9"],"result":["21.9"],"useatom":["21.10"],"useatomvalue":["21.10"],"usesetatom":["21.10"],"jotai":["21.10"],"countatom":["21.10"],"a":["21.10"],"而没有更新操作":["21.11"],"请使用useatomvalue":["21.11"],"或者说":["21.12"],"用provider包裹的组件":["21.12"],"store中的状态":["21.13"],"是全局的":["21.13"],"dom":["21.14"],"app":["21.14"],"tsx":["21.14"],"css":["21.14"],"创建一个":["22.1"],"root":["22.1"],"存放":["22.1"],"比如":["22.2"],"redux":["22.2"],"thunk":["22.2"],"themeprovider":["23.0"],"ccc":["23.1"],"background":["23.1"],"pink":["23.1"],"hooks":["23.2"],"usecontext":["23.2"],"下面看一下":["23.2"],"接受一个参数":["23.2"],"就是想要获取的":["23.2"],"返回一个":["23.2"],"值":["23.2"],"就是最近的":["23.2"],"提供":["23.2"],"contextvalue":["23.2"],"其原理主要是运用了":["25.0"],"对于":["25.1"],"执行":["25.1"],"处理逻辑是采用异步调用":["25.1"],"这样浏览器只会绘制一次":["25.2"],"如果修改":["25.2"],"布局放在":["25.2"],"那":["25.2"],"templates":["25.3"],"为需要":["25.3"],"styled":["25.3"],"的":["25.3","27.3"],"定义一系列css属性":["25.3"],"当该组件的js代码被解析执行的时候":["25.3"],"components":["25.3"],"会动态生成一个":["25.3"],"选择器":["25.3"],"并把对应的":["25.3"],"alldemo":["25.4"],"functionlifecycle":["25.4"],"num":["25.4"],"setnum":["25.4"],"usestate":["25.4"],"组件挂载完成":["25.4"],"清除":["25.4"],"父组件":["26.2"],"fallback":["26.2","26.4"],"加载过程中的占位符":["26.2"],"需要等待异步加载完成后渲染的组件":["26.2"],"确保组件拿到的数据是异步请求后最新的数据":["26.2"],"suspense":["26.4"],"初始化会默认执行一次":["27.1"],"jsx":["27.1","28.6"],"属性访问到":["27.2"],"组件":["27.2"],"为":["27.2"],"渲染与否":["27.3"],"可以将需要传给":["27.3"],"直接通过函数参数的方式传递给执行函数":["27.3"],"alien":["27.4"],"let":["27.4","27.6","28.6","29.4"],"us":["27.4","27.6","28.6","29.4"],"learn":["27.4","27.6","28.6","29.4"],"map":["27.4"],"item":["27.4"],"focus":["27.4"],"if":["27.4","39.5"],"fatherprops":["27.6","27.7"],"mes":["27.6","28.6"],"father":["27.7"],"age":["27.7"],"formvalue":["27.9"],"setformvalue":["27.9"],"setvalue":["27.9"],"inputvalue":["27.9"],"callback":["27.9"],"renderelements":["27.9"],"这里是react":["27.9"],"children用来循环react":["27.9"],"element的方法":["27.9"],"foreach":["27.9"],"el":["27.9"],"currentcomponentinstance":["28.1"],"forwardref的第二个参数是ref":["28.2"],"这个ref是grandfahter组件传递过来的":["28.2"],"至此一层一层从prop传递":["28.2"],"最终通过ref赋值":["28.2"],"grandfather":["28.2"],"button属性":["28.3"],"点击":["28.3"],"wrap":["28.4"],"extends":["28.4"],"render":["28.4","29.7"],"forwardedref":["28.4"],"otherprops":["28.4"],"this":["28.4"],"对":["28.5"],"gjs说":["28.5"],"input":["28.5"],"onchange":["28.5"],"e":["28.5"],"target":["28.5"],"to":["28.5"],"耿嘉帅":["28.5"],"gjscomp":["28.5"],"始终指向一个内存空间":["28.6"],"所以这样一点好处是可以随时访问到变化后的值":["28.6"],"tolearn":["28.6"],"constructor":["29.1"],"super":["29.1"],"对象":["29.2"],"缓存起来":["29.2"],"第二个参数为一个数组":["29.2"],"存放当前":["29.2"],"把它缓存起来":["29.3"],"可以把函数和属性缓存起来":["29.3"],"作为":["29.3"],"purecomponent":["29.3"],"的绑定方法":["29.3"],"或者配合其他hooks一起使用":["29.3"],"原理其实很简单":["29.3"],"每次执行":["29.3"],"state不同情况":["29.4"],"state为引用数据类型时候":["29.4"],"hello":["29.4"],"my":["29.4"],"is":["29.4"],"ctor":["29.5"],"prototype":["29.5"],"shallowequal":["29.5"],"oldprops":["29.5"],"oldstate":["29.5"],"综上可以用":["29.6"],"usecallback":["29.6"],"或者":["29.6"],"或":["29.7"],"发生变化时才会更新":["29.7"],"false":["29.7"],"console":["29.7"],"log":["29.7"],"compare":["29.8"],"如果返回true":["29.9"],"需要memo备忘":["29.9"],"会跳过shouldcomponentupdate的判断":["29.10"],"直接更新组件":["29.10"],"state":["29.11"],"而用户操作表单往往是频繁的":["29.11"],"需要频繁改变数据层":["29.11"],"所以很有可能让整个页面组件高频率":["29.11"],"用户触发添加程序":["32.1"],"react中的reducer也是这样的他们都接受":["32.2"],"textcontent":["32.4"],"json":["32.4"],"stringify":["32.4"],"reducer":["32.4"],"newstate":["32.5"],"接收状态事件":["32.5"],"计算新的状态":["32.5"],"switch":["32.5"],"从而将相关状态集中管理":["32.6"],"减少状态逻辑的分散":["32.6"],"可预测性":["32.6"],"并且需要改动getuser里面的代码":["39.1"],"那我们此时就需要解决这个问题":["39.1"],"使用di":["39.1"],"依赖是service":["39.1"],"依赖的标准需要拥有一个getlist方法":["39.1"],"并且接收一个id":["39.1"],"控制反转的本质就是降低耦合度":["39.2"],"更方便的依赖注入":["39.3"],"容器需要拥有register方法用来管理容器的注册":["39.4"],"解析方法":["39.5"],"resolve":["39.5"],"page":["45.0"]},{"0":["28.6","29.4","29.9"],"1":["26.4","29.5"],"2":["16.2","20.3","22.1","26.4","29.5","29.10"],"3":["16.2","20.1","21.1","29.11","39.3"],"5":["6.1"],"9":["17.3"],"11":["5.2"],"12":["5.2"],"13":["5.2"],"14":["5.2"],"21":["8.2"],"102":["44.0"],"300":["44.0"],"request":["1.0"],"res":["1.0"],"response":["1.0"],"next":["1.0"],"function":["1.0","16.4","17.8","23.2","28.6","29.4"],"console":["1.0","18.9","21.10","27.1"],"log":["1.0","18.9","21.10"],"中间件触发":["1.0"],"if":["1.1","27.9","29.1"],"true":["1.1"],"details":["1.1"],"定义一个authguard守卫类":["1.1"],"实现canactivate接口":["1.1"],"handle":["1.2"],"pipe":["1.2"],"tap":["1.2"],"after":["1.2"],"然后将数据传递给控制器或下一个管道":["1.3"],"管道的主要目的是增强应用的可靠性":["1.3"],"dirname":["2.0"],"const":["2.0","8.1","11.3","17.8","25.3","29.1","29.7"],"appservice":["2.0"],"node":["2.0","28.1","28.5"],"development":["2.0"],"bservice":["2.0"],"imports":["2.0"],"controllers":["2.0","11.0"],"快速配置env配置":["3.0"],"配置环境文件":["3.0"],"a":["3.0","11.1"],"import":["3.0","16.0","17.3"],"registeras":["3.0"],"from":["3.0","17.3"],"nestjs":["3.0"],"default":["3.0","26.2","28.6","29.4","32.5"],"ts注解":["4.0"],"或直接传递参数":["4.0"],"iphone":["4.1"],"extends":["4.1","16.6","29.9"],"静态模块":["5.0"],"http请求并返回http响应的类":["5.1"],"controller的作用是将路由映射到处理请求方法上":["5.1"],"在controller中可以使用nestjs提供的装饰器来定义":["5.1"],"路由":["5.1"],"中间件":["5.1"],"控制器管道":["5.2"],"路由管道":["5.2"],"路由参数管道":["5.2"],"需要使用":["5.3"],"装饰器声明该提供者":["5.3"],"注册到容器的提供者":["5.3"],"默认只对当前模块有效":["5.3"],"即作用域为模块":["5.3"],"usefactory":["5.4"],"return":["5.4","11.2","17.6","21.7","21.10","23.2","27.8","27.9","28.4","32.4","39.5"],"secret":["5.4"],"get":["5.4","21.6"],"pipes":["6.1"],"核验请求的数据":["6.1"],"过滤器":["6.1"],"当一个请求到达应用程序时":["7.0"],"nestjs框架会将他封装成一个executioncontext对象":["7.0"],"data":["8.0"],"json":["8.0","8.5"],"可以使用":["8.1"],"encodeuricomponent":["8.1"],"的":["8.1","25.1","29.3"],"api":["8.1","8.5","16.0"],"来编码":["8.1"],"unlencoded":["8.2"],"length":["8.2"],"connection":["8.2"],"keep":["8.2"],"alive":["8.2"],"需要指定":["8.3"],"content":["8.3"],"type":["8.3","27.9"],"为":["8.3"],"multipart":["8.3"],"如果只是传输":["8.4"],"数据的话":["8.4"],"person":["8.5"],"personcontroller":["8.5"],"post":["8.5"],"example":["8.5"],"需要指定content":["8.5"],"type为aplication":["8.5"],"内容会以json的形式传输":["8.5"],"光":["8.5"],"verify对密码进行解密":["10.0"],"解密符合":["10.0"],"authcontroller":["11.0"],"export":["11.0","26.2","28.6","29.4"],"class":["11.0","16.6"],"usevalue":["11.1"],"authservice":["11.2"],"perison":["11.2"],"createclient":["11.3"],"socket":["11.3"],"然后通过一系列适配器和拦截器集成到nestjs中":["12.0"],"等":["16.0"],"实现动态加载组件":["16.0"],"实现代码分割":["16.0"],"两种":["16.1"],"业务组件做了些什么":["16.2"],"所以正向属性代理":["16.2"],"更适合做一些开源项目的":["16.2"],"目前开源的":["16.2"],"基本都是通过这个模式实现的":["16.2"],"同样适用于类组件和函数组件":["16.2"],"方便获取组件内部状态":["16.3"],"比如":["16.3"],"state":["16.3","29.5","29.9","32.4"],"props":["16.3","16.7","27.9","28.4","29.3","29.5"],"生命周期":["16.3"],"绑定的事件函数等":["16.3"],"②":["16.3"],"es6继承可以良好继承静态属性":["16.3"],"angular":["16.4"],"advance":["16.4"],"组件中":["16.5"],"在":["16.5","27.3"],"生命周期动态加载上述的路由组件component":["16.5"],"如果在切换路由或者没有加载完毕时":["16.5"],"显示的是":["16.5"],"效果":["16.5"],"组件赋能":["16.5"],"对于属性代理虽然不能直接获取组件内的状态":["16.5"],"但是可以通过":["16.5"],"div":["16.6","21.10","23.2","25.4","29.7"],"ref":["16.6"],"index":["16.6","17.8","26.2","27.6","28.6","29.9"],"authorization":["16.7","18.9"],"component":["16.7","29.9"],"home":["16.7","29.4"],"matchpermission":["16.7"],"list":["16.7"],"indexof":["16.7"],"usetransition":["17.1"],"concurrent模式下":["17.1"],"过渡更新任务":["17.1"],"结果是0":["17.3"],"react":["17.3","27.1","27.2","27.6","27.8"],"usestate获取到最新的number":["17.5"],"所以打印的值是最新的number":["17.5"],"人话":["17.5"],"点击button时触发的log和setnumber在第一任务线程":["17.5"],"第一线程执行完毕后执行第一线程引起的一系列任务":["17.5"],"外部在第二任务线程中执行的":["17.5"],"此时setnumber已执行完毕":["17.5"],"点击按钮后执行过程":["17.5"],"线程1":["17.5"],"handleclick":["17.5"],"宏任务log":["17.5"],"微任务setnumber":["17.5"],"触发线程2":["17.5"],"name":["17.6"],"switch":["17.6","32.4"],"case":["17.6","32.4","32.5"],"increment":["17.6"],"count":["17.6"],"demo":["17.8"],"jsx":["17.8","44.0"],"childref":["17.8"],"useref":["17.8"],"null":["17.8","28.5"],"click":["17.8"],"chcildref":["17.8"],"logger":["17.8"],"这在提高用户体验和性能方面很有帮助":["18.1"],"自动缓存失效处理":["18.1"],"当数据过期或需要刷新时":["18.1"],"可以自动处理缓存失效并重新获取数据":["18.1"],"无需手动编写过期和刷新逻辑":["18.1"],"服务器状态更新":["18.1"],"无数据预取":["18.2"],"usequery":["18.9"],"query":["18.9"],"querykey":["18.9"],"owner":["18.9"],"repo":["18.9"],"repos":["18.9"],"issues":["18.9"],"headers":["18.9"],"成功或错误状态":["18.10"],"例如":["18.10","44.0"],"可以是字符串":["18.10"],"loading":["18.10"],"success":["18.10"],"或":["18.10"],"hashrouter":["19.0"],"memoryrouter":["19.0"],"好处":["19.0"],"formishalffilledout":["19.3"],"message":["19.3"],"are":["19.3"],"you":["19.3"],"sure":["19.3"],"可在多个地方使用消费":["20.1","21.1"],"usestore":["20.1","21.1"],"这种双向的数据流动会导致数据的不一致和混乱":["20.3"],"难以调试和维护":["20.3"],"由于数据流动不可控":["20.3"],"它将应用程序分为四个主要部分":["20.4"],"br":["20.4"],"b":["20.4"],"view":["20.4"],"视图":["20.4"],"负责渲染用户界面":["20.4"],"接收用户输入并将其发送给":["20.4"],"dispatcher":["20.4"],"redux":["21.3"],"v6完全基于context":["21.3"],"api而导致性能大幅下降":["21.3"],"v7又回退到之前的内部订阅方案":["21.3"],"context更适合放类似主题这种变化不大的全局数据":["21.3"],"依赖某个atom":["21.5"],"当依赖项发生变化时更新触发atom的第一个参数修改变量":["21.5","21.6"],"deriveatom":["21.5","21.6"],"async":["21.6"],"setvalue":["21.7"],"useatom":["21.7"],"text":["21.8"],"fc":["21.8"],"value":["21.8","23.1","27.9"],"await":["21.9"],"url":["21.9"],"setcount":["21.10"],"组件a渲染":["21.10"],"button":["21.10","29.7"],"onclick":["21.10","29.7"],"如果仅更新操作":["21.11"],"而无需渲染状态的组件":["21.11"],"状态是独立的":["21.12"],"不受外部影响":["21.12"],"同时也不影响外部":["21.12"],"任何组件都可以使用":["21.13"],"但是":["21.13"],"createroot":["21.14"],"document":["21.14"],"getelementbyid":["21.14"],"root":["21.14","29.11"],"render":["21.14","29.11"],"strictmode":["21.14"],"state的根对象":["22.1"],"dispatch":["22.1"],"使":["22.2"],"action":["22.2","32.4"],"可以为":["22.2"],"son":["23.1"],"style":["23.2","44.0"],"hooks":["25.0","29.6"],"里面的":["25.0"],"对于每一个":["25.1"],"effect":["25.1"],"callback":["25.1"],"执行是在浏览器绘制视图之后":["25.2"],"接下来又改":["25.2"],"就可能会导致浏览器再次回流和重绘":["25.2"],"而且由于两次绘制":["25.2"],"样式通过":["25.3"],"标签的形式插入到":["25.3"],"head":["25.3"],"标签里面":["25.3"],"动态生成的":["25.3"],"选择器会有一小段哈希值来保证全局唯一性来避免样式发生冲突":["25.3"],"这种模式下本质上是动态生成":["25.3"],"标签":["25.3"],"title":["25.3"],"组件销毁":["25.4"],"number":["25.4"],"tip":["26.4","27.3"],"执行过程":["26.4"],"函数调用时":["26.4"],"会返回一个":["26.4"],"对象":["26.4","27.2"],"element":["27.2"],"作用":["27.2"],"可以根据需要控制":["27.2"],"这种情况":["27.3"],"中":["27.3"],"判断是":["27.4"],"elment":["27.4"],"混入":["27.4"],"cloneelement":["27.4","27.8","29.1"],"一般不需要具体指出":["27.5"],"focus":["27.7"],"prop":["27.8"],"displayname":["27.9"],"混入props":["27.9"],"childrenitem":["27.9"],"onchange":["27.9"],"ref模式获取元素或组件":["28.1"],"childspanref":["28.2"],"newfather":["28.2"],"forwardrefindex":["28.3"],"gyqmsg":["28.5"],"setgyqmsg":["28.5"],"settogyqmsg":["28.5"],"传递函数":["28.5"],"调用子组件的方法":["28.5"],"current":["28.5","32.4"],"yq":["28.5"],"vue3":["28.6"],"id":["28.6"],"typeinfo":["28.6"],"controllcomponentrender":["29.1"],"通过此函数判断":["29.1"],"只有":["29.1"],"变化的时候":["29.1"],"重新创建":["29.1"],"的依赖项":["29.2"],"在函数组件下一次执行的时候":["29.2"],"会对比":["29.2"],"依赖项里面的状态":["29.2"],"是否有改变":["29.2"],"本质上":["29.3"],"createelement":["29.3"],"会产生一个新的":["29.3"],"这个":["29.3","29.6"],"将作为对应":["29.3"],"父组件":["29.4"],"numbera":["29.4"],"setnumbera":["29.4"],"usestate":["29.4"],"numberb":["29.4"],"setnumberb":["29.4"],"父组件改变props":["29.4"],"判断是否为纯函数":["29.5"],"如果是则进行浅比较shallowequal":["29.5"],"info":["29.5"],"shallowequal过程":["29.5"],"首先新老props":["29.5"],"states比较":["29.5"],"不相等重新生成element":["29.5"],"判断新老":["29.5"],"或者":["29.5"],"有不是对象或者为":["29.5"],"usememo":["29.6"],"解决这个问题":["29.6"],"首选":["29.6"],"初衷就是为了解决这种情况的":["29.6"],"setstate":["29.7"],"需要被包裹的组件":["29.8"],"constructor":["29.9"],"super":["29.9"],"this":["29.9"],"test":["29.9"],"context":["29.10"],"第三种情况就是越是靠近":["29.11"],"app":["29.11"],"程序了解到事件名以后去reducer中找到对应的函数执行操作":["32.1"],"当前state":["32.2"],"和触发的事件action":["32.2"],"tasks":["32.4"],"previous":["32.4"],"使用usereducer可以使状态变化变得可预测":["32.6"],"因为它通过一个reducer函数来处理状态变化":["32.6"],"可以更好地理解状态变化的来源":["32.6"],"中间件和副作用":["32.6"],"实际使用":["39.1"],"abstract":["39.1"],"不再强依赖一些属性和方法":["39.2"],"具体的实现方式是di依赖注入":["39.2"],"容器需要有一个解析的方法":["39.4"],"从容器中解析已注册的依赖项并注入":["39.4"],"throw":["39.5"],"new":["39.5"],"split":["44.0"],"这样可得到一个数组":["44.0"],"如果我想把他拆分成一个对象该如何实现":["44.0"],"reg":["44.0"],"w":["44.0"],"s":["44.0"],"replace":["44.0"],"iframe":["44.0"],"height":["44.0"],"team":["45.0"]},{"0":["16.7"],"1":["21.10","25.3","25.4","29.7"],"2":["25.2"],"3":["20.3","22.1","29.5"],"4":["16.0","16.2"],"5":["17.3"],"6":["6.1","17.5"],"8":["17.5"],"15":["5.2"],"16":["5.2"],"18":["3.0"],"22":["8.2"],"28":["27.6"],"85":["8.2"],"89":["8.2"],"100":["44.0"],"使用":["1.0"],"添加到模块或者控制器中":["1.0"],"module":["1.0","1.2"],"在canactivate":["1.1"],"方法中":["1.1"],"通过参数context获取到请求对象":["1.1"],"调用validaterequest":["1.1"],"函数验证请求是否合法":["1.1"],"如果请求合法就返回true":["1.1"],"要在控制器中使用守卫":["1.1"],"需要将守卫添加到路由上":["1.1"],"useguard":["1.1"],"controller":["1.1","11.0"],"ms":["1.2"],"写入模块中作为提供者":["1.2"],"imports":["1.2"],"安全性":["1.3"],"appcontroller":["2.0"],"appmodule":["2.0"],"不使用dotenv扩展包的话需要手动readfile然后根据":["2.0"],"n拆分":["2.0"],"循环放入process":["2.0"],"key":["2.0"],"太麻烦":["2.0"],"工厂函数":["2.0"],"对于复杂要求的provider":["2.0"],"我们就可以使用":["2.0"],"usefactory":["2.0"],"工厂函数进行提供者注册":["2.0"],"name":["3.0","8.1","8.2","16.4","27.6","27.7"],"process":["3.0"],"env":["3.0"],"app":["3.0","5.4"],"age":["3.0","8.2","27.6"],"最终统一导入到config":["3.0"],"index":["3.0","17.5","27.7","28.4"],"再统一导出":["3.0"],"总之控制权不在类中":["4.0"],"而是由外部决定":["4.0"],"play":["4.1"],"student":["4.1"],"动态模块":["5.0"],"全局模块":["5.0"],"pipe":["5.1"],"dto和请求参数等":["5.1"],"service提供一种实现业务逻辑的方式":["5.1"],"他可以访问操作数据":["5.1"],"控制器":["5.2"],"方法处理器":["5.2"],"请求之后":["5.2"],"可以使用":["5.3"],"exports":["5.3"],"导出给其他模块使用":["5.3"],"提供者是单例的4":["5.3"],"提供者可以是任何值":["5.3"],"token":["5.4"],"expiresin":["5.4"],"100d":["5.4"],"模块提供者":["5.4"],"filters":["6.1"],"处理请求时的错误":["6.1"],"守卫":["6.1"],"这个对象包含了当前请求的上下文信息":["7.0"],"包括请求头":["7.0"],"请求体":["7.0"],"encode":["8.0"],"e5":["8.2"],"因为内容是表单搜索":["8.2"],"所以跟query差不多":["8.2"],"都需要urlencoded编译一下":["8.2"],"然后指定":["8.3"],"也就是分割线":["8.3"],"body":["8.3"],"不需要用这两种":["8.4"],"可以直接指定content":["8.4"],"type":["8.4"],"后端代码同样使用":["8.5"],"来接收":["8.5"],"不需要做啥变动":["8.5"],"和":["8.5","29.6"],"都是从":["8.5"],"取值":["8.5"],"内部会根据":["8.5"],"做区分":["8.5"],"使用不同的解析方式":["8.5"],"前端post默认请求头是application":["8.5"],"所以不需要指定content":["8.5"],"json和form":["8.5"],"urlencode不适合大文件传输":["8.5"],"data适合":["8.5"],"根据头信息":["10.0"],"auth":["11.0","39.1"],"我是a":["11.1"],"hello":["11.2","16.4","16.6"],"gethello":["11.2"],"host":["11.3"],"localhost":["11.3"],"port":["11.3"],"加入":["16.0"],"loading":["16.0","26.2","44.0"],"效果":["16.0"],"两者之间有一些共性和区别":["16.1"],"可以完全隔离业务组件的渲染":["16.2"],"因为属性代理说白了是一个新的组件":["16.2"],"相比反向继承":["16.2"],"可以完全控制业务组件是否渲染":["16.2"],"可以嵌套使用":["16.2"],"多个":["16.2"],"是可以嵌套使用的":["16.2"],"而且一般不会限制包装":["16.2"],"所以无须对静态属性和方法进行额外的处理":["16.3"],"缺点":["16.3"],"函数组件无法使用":["16.3"],"和被包装的组件耦合度高":["16.3"],"需要知道被包装的原始组件的内部状态":["16.3"],"具体做了些什么":["16.3"],"otherprops":["16.4"],"alien":["16.4","27.6"],"替换":["16.4"],"元素节点":["16.4"],"appendelement":["16.4"],"createelement":["16.4"],"world":["16.4"],"my":["16.4"],"ref":["16.5"],"获取组件实例":["16.5"],"获取到组件实例":["16.5"],"就可以获取组件的一些状态":["16.5"],"或是手动触发一些事件":["16.5"],"进一步强化组件":["16.5"],"但是注意的是":["16.5"],"类组件才存在实例":["16.5"],"函数组件不存在实例":["16.5"],"hoc":["16.5"],"react":["16.6","27.3","28.2","29.3"],"render":["16.6","29.9"],"classname":["16.6"],"p":["16.6"],"匹配权限":["16.7"],"consumer":["16.7","23.2"],"permissionlist":["16.7"],"usedeferredvalue":["17.1"],"解决更新状态滞后问题":["17.1"],"const":["17.3","39.5"],"indexref":["17.3"],"function":["17.3","17.5","22.2","28.3"],"线程2":["17.5"],"微任务setnumber触发重新渲染":["17.5"],"这就是为什么handleclick函数内打印不到最新的值":["17.5"],"而handleclick函数外可以大打印到最新的值的原因":["17.5"],"js":["17.5","44.0"],"number":["17.5"],"setnumber":["17.5","25.4"],"decrement":["17.6"],"default":["17.6","25.4","27.9","28.3","44.0"],"throw":["17.6"],"new":["17.6"],"error":["17.6","39.5"],"return":["17.8","21.6","21.8","39.1"],"form":["17.8"],"button":["17.8","21.7","25.4","29.9"],"onclick":["17.8","25.4","29.9"],"myform":["17.8"],"对于需要与服务器状态同步的情况":["18.1"],"可以通过提供的无缝数据同步功能来处理":["18.1"],"确保客户端数据的一致性":["18.1"],"更少的重复代码":["18.1"],"无数据失效处理":["18.2"],"inputowner":["18.9"],"setinputowner":["18.9"],"facebook":["18.9"],"inputrepo":["18.9"],"setinputrepo":["18.9"],"setquerykey":["18.9"],"issuccess":["18.10"],"表示查询是否成功完成":["18.10"],"如果查询成功完成":["18.10"],"页面松耦合":["19.0"],"lazyload":["19.0"],"want":["19.3"],"leave":["19.3"],"redirect":["19.3"],"重定向":["19.3"],"atomic":["20.1","21.1"],"state":["20.1","21.1","25.4"],"原子状态":["20.1","21.1"],"当应用程序发生错误或状态异常时":["20.3"],"很难定位问题的根源并进行调试和修复":["20.3"],"嵌套回调和依赖关系":["20.3"],"调度器":["20.4"],"负责接收来自":["20.4"],"的动作":["20.4"],"并将它们分发给注册的":["20.4"],"而并不适合存放频繁更新的复杂状态集合":["21.3"],"原子化":["21.3"],"组件内状态":["21.3"],"但是api较多":["21.3"],"get":["21.5"],"使用atom":["21.5"],"await":["21.6"],"text":["21.6","21.9","25.3"],"div":["21.7","27.9"],"useatom":["21.8","21.9","21.14"],"addnumber":["21.8"],"fc":["21.9"],"value":["21.9"],"prev":["21.10"],"add":["21.10"],"b":["21.10"],"count":["21.10"],"请使用":["21.11"],"即使大家共用同一个atom状态":["21.12"],"如果不想让这个组件受外部更新影响":["21.12"],"如果某个组件使用了provider包裹":["21.13"],"那么该组件的状态是独立的":["21.13"],"getdefaultstore":["21.14"],"useatomvalue":["21.14"],"num":["21.14"],"num2":["21.14"],"navstore":["21.14"],"更新store中的state":["22.1"],"subscribe":["22.1"],"enhancer":["22.2"],"提供者":["23.0"],"themeconsumer":["23.0"],"作用有两个":["23.1"],"属性传递":["23.1"],"context":["23.1"],"消费者":["23.2"],"订阅者之consumer":["23.2"],"订阅者采取":["23.2"],"props":["23.2","28.2"],"接受最近一层":["23.2"],"中value":["23.2"],"作为":["23.2"],"函数的参数":["23.2"],"可以将参数取出来":["23.2"],"useeffect":["25.0","28.3"],"会向":["25.1"],"settimeout回调函数一样":["25.1"],"放入任务队列":["25.1"],"等到主线程任务完成":["25.1"],"dom":["25.1"],"视图上可能会造成闪现突兀的效果":["25.2"],"callback":["25.2"],"中代码执行会阻塞浏览器绘制":["25.2"],"h1":["25.3"],"font":["25.3"],"size":["25.3"],"5em":["25.3"],"align":["25.3"],"center":["25.3"],"color":["25.3"],"bf4f74":["25.3"],"wrapper":["25.3"],"section":["25.3"],"padding":["25.3"],"states":["25.4"],"改变state":["25.4","29.7"],"export":["25.4","27.9","28.3"],"isrender":["25.4"],"setrender":["25.4"],"传统模式":["26.2"],"挂载组件":["26.2"],"请求数据":["26.2"],"再渲染组件":["26.2"],"当组件渲染的时候":["26.4"],"返回的":["26.4"],"会被":["26.4"],"捕获":["26.4"],"然后显示":["26.4"],"log":["27.1","28.3"],"props改变":["27.1"],"是否渲染":["27.2"],"可以用":["27.2"],"属性访问到是函数":["27.3"],"并不是":["27.3"],"element":["27.3"],"对象":["27.3"],"针对这种情况":["27.3"],"像下面这种情况下":["27.3"],"else":["27.4"],"typeof":["27.4"],"中某个属性":["27.5"],"而是将":["27.5"],"indexprops":["27.6","27.7"],"children":["27.8"],"mes":["27.8"],"push":["27.9"],"123s":["27.9"],"json":["27.9"],"stringify":["27.9"],"ref是一个对象":["28.1"],"forwardref":["28.2"],"father":["28.2"],"grandref":["28.2"],"父组件":["28.2"],"class":["28.2"],"extends":["28.2"],"home":["28.3"],"useref":["28.3"],"console":["28.3"],"prop":["28.4"],"对yq说":["28.5"],"changetype":["28.6"],"info":["28.6","29.6"],"current":["28.6"],"的改变":["28.6"],"不需要视图变化":["28.6"],"如果有改变重新执行":["29.2"],"得到新的缓存值":["29.2"],"返回值":["29.2"],"pendingprops":["29.3"],"在此":["29.3"],"更新调和阶段":["29.3"],"会对比":["29.3"],"上老":["29.3"],"oldprops":["29.3"],"和新的":["29.3"],"改变numbera":["29.4"],"改变numberb":["29.4"],"对于props":["29.4"],"null":["29.5"],"的":["29.5"],"那么直接返回":["29.5"],"false":["29.5","32.4"],"更新组件":["29.5"],"通过":["29.5"],"object":["29.5"],"keys":["29.5"],"将新老":["29.5"],"或者新老":["29.5"],"handercallback":["29.6"],"usecallback接受两个参数":["29.6"],"第一个参数是需要缓存的函数":["29.6"],"第二个参数为deps":["29.6"],"如果deps内依赖项改变返回新的函数":["29.6"],"numa":["29.7"],"比较函数":["29.8"],"用来判断是否需要更新":["29.8"],"setstate":["29.9"],"如果组件依赖于context":["29.10"],"那么当context发生变化时":["29.10"],"根组件越值得注意":["29.11"],"根组件渲染会波及到整个组件树重新":["29.11"],"子组件":["29.11"],"这样的优点就是把操作整合到一起":["32.1"],"只需要知道用户执行了什么操作去reducer中寻找响应的程序而不是直接触发这些程序":["32.1"],"然后返回新的state":["32.2"],"done":["32.4"],"changed":["32.4"],"tasksk":["32.4"],"map":["32.4"],"t":["32.4"],"initstate":["32.5"],"接收接受个初始值":["32.5"],"和状态计算函数":["32.5"],"返回的dispatch来调用状态计算函数":["32.5"],"通过usestate保存状态":["32.5"],"usereducer可以配合副作用和中间件来处理状态变化时的特定逻辑":["32.6"],"使得状态管理更加灵活":["32.6"],"复杂动态表单":["32.6"],"在处理复杂的动态表单或用户输入场景时":["32.6"],"void":["39.1"],"authservice":["39.1"],"控制反转需要一个容器":["39.2"],"配置集中管理":["39.3"],"让所有的依赖项统一管理注册解耦了对象之间的强依赖关系":["39.4"],"tip":["39.4"],"依赖":["39.5"],"未被注册到容器":["39.5"],"请先注册到容器再去使用":["39.5"],"注册":["39.5"],"width":["44.0"],"scrolling":["44.0"],"no":["44.0"],"title":["44.0"],"untitled":["44.0"],"src":["44.0"],"https":["44.0"],"codepen":["44.0"],"io":["44.0"],"woskvxzd":["44.0"],"the":["44.0"],"animator":["44.0"],"embed":["44.0"],"qwymdbq":["44.0"],"tab":["44.0"],"2cresult":["44.0"],"frameborder":["44.0"]},{"0":["17.5","17.8"],"1":["17.3","28.3","28.5","29.9"],"2":["17.1"],"4":["17.3","20.3","29.5"],"5":["22.1"],"7":["6.1"],"17":["5.2"],"18":["5.2"],"20":["8.1"],"28":["27.7"],"6379":["11.3"],"1231231231":["8.5"],"appcontroller":["1.1","1.2"],"constructor":["1.1","4.1","11.0","16.5","25.4","28.2"],"private":["1.1","11.0"],"readonly":["1.1","11.0"],"appservice":["1.1","1.2"],"get":["1.1","8.2"],"useguards":["1.1"],"eagonguard":["1.1"],"controllers":["1.2","5.4","11.1","11.2"],"providers":["1.2","5.4"],"provide":["1.2"],"app":["1.2"],"interceptor":["1.2"],"可维护性":["1.3"],"xjclass":["2.0"],"make":["2.0"],"return":["2.0","21.9","21.14","28.6"],"this":["2.0"],"is":["2.0","16.4"],"method":["2.0"],"hd":["2.0"],"依赖注入其他提供者":["2.0"],"注册到全局module":["3.0"],"module":["3.0"],"imports":["3.0"],"configmodule":["3.0"],"forroot":["3.0"],"isglobal":["3.0"],"true":["3.0","25.4","44.0"],"load":["3.0"],"controller":["3.0"],"内部仅仅调用一个抽象的方法":["4.0"],"具体的方法实现由第三方决定":["4.0"],"protected":["4.1"],"env配置相关":["5.0"],"同事还可以与其他服务交互以完成复杂的业务逻辑":["5.1"],"service是处理应用程序逻辑的类":["5.1"],"将业务逻辑从controller中分离出来":["5.1"],"使得controller只需处理http请求和响应":["5.1"],"控制器拦截器":["5.2"],"异常过滤器":["5.2"],"而不仅仅是服务类":["5.3"],"提供者是":["5.3"],"nestjs":["5.3"],"应用程序中的核心概念之一":["5.3"],"它们将代码块标记为可注入的":["5.3"],"authservice":["5.4","39.5"],"jwtstrategy":["5.4"],"控制器":["5.4"],"authcontroller":["5.4","11.1","11.2"],"向外提供接口":["5.4"],"guards":["6.1"],"鉴权认证相关":["6.1"],"拦截器":["6.1"],"查询参数":["7.0"],"响应对象等":["7.0"],"将":["8.0"],"编译":["8.0"],"光":["8.1"],"age":["8.1"],"e5":["8.1"],"是把数据拼成":["8.2"],"query":["8.2"],"字符串放在":["8.2"],"url":["8.2"],"后面":["8.2"],"于是表单的":["8.2"],"提交方式的时候就直接用相同的方式把数据放在了":["8.2"],"body":["8.2"],"里面就是用":["8.3"],"分隔符分割的内容":["8.3"],"很明显":["8.3"],"这种方式适合传输文件":["8.3"],"为":["8.4"],"application":["8.4"],"data是用":["8.5"],"作为分割传输":["8.5"],"multipart":["8.5"],"boundary":["8.5"],"nest解析":["8.5"],"formdata":["8.5"],"使用":["8.5","23.1","39.5"],"filesinterceptor拦截器":["8.5"],"用":["8.5","26.4"],"useinterceptors装饰器启用":["8.5"],"让后通过":["8.5"],"upload":["8.5"],"edfiles取":["8.5"],"同样是":["8.5"],"body获取":["8.5"],"file":["8.5"],"useinterceptors":["8.5"],"anyfilesinterceptor":["8.5"],"dest":["8.5"],"uploads":["8.5"],"body2":["8.5"],"载荷":["10.0"],"签名规则":["10.0"],"或者":["11.0"],"这个":["11.2"],"await":["11.3"],"connect":["11.3"],"ref":["16.0","16.2"],"来获取原始组件实例":["16.0"],"操作实例下的属性和方法":["16.0"],"接下来分别介绍一下两种模式下的高阶组件":["16.1"],"的先后顺序":["16.2"],"缺点":["16.2"],"一般无法直接获取原始组件的状态":["16.2"],"如果想要获取":["16.2"],"需要":["16.2"],"获取组件实例":["16.2"],"③":["16.3"],"如果多个反向继承":["16.3"],"嵌套在一起":["16.3"],"当前状态会覆盖上一个状态":["16.3"],"这样带来的隐患是非常大的":["16.3"],"比如说有多个":["16.3"],"componentdidmount":["16.3","26.2"],"newchild":["16.4"],"children":["16.4"],"map":["16.4","28.6"],"child":["16.4"],"wrapcomponent":["16.5"],"super":["16.5","28.2"],"node":["16.5","28.4"],"获取实例":["16.5"],"world":["16.6","25.3"],"button":["16.6","21.8","21.9"],"组件内部点击":["16.6"],"export":["16.6","21.6","28.4"],"default":["16.6","28.4"],"writedoc":["16.7"],"绑定文档录入页面":["16.7"],"class":["16.7"],"extends":["16.7"],"writetag":["16.7"],"执行副作用":["17.1"],"b1":["17.1"],"这是分类b下的项目b1":["17.1"],"current":["17.3"],"每个回调函数捕获正确的值":["17.3"],"造成此结果的原因是当循环时":["17.3"],"每次循环执行的settimeout都会在一秒钟后执行":["17.3"],"当一秒钟后执行时当前的i已经是10了":["17.3"],"console":["17.5","17.8","28.4"],"log":["17.5","28.4"],"重新渲染":["17.5"],"reducertest":["17.6"],"number":["17.6","27.1"],"dispatchnumber":["17.6"],"initialstate":["17.6"],"count":["17.8","21.14"],"setcount":["17.8","21.14"],"usestate":["17.8","29.1","32.5"],"你可以通过一些简单的":["18.1"],"hooks":["18.1"],"和配置来处理数据获取和管理":["18.1"],"减少了编写重复代码的工作量":["18.1"],"总之":["18.1","32.6"],"尽管可以使用普通的数据获取库来处理数据请求":["18.1"],"但":["18.1"],"无服务器状态更新等问题":["18.2"],"issuequery":["18.9"],"span":["18.9"],"仓库":["18.9"],"input":["18.9"],"name":["18.9"],"value":["18.9","21.5","21.6"],"onchange":["18.9"],"e":["18.9"],"target":["18.9"],"isfetching":["18.10"],"表示是否正在获取数据":["18.10"],"无论是从远程服务器还是从缓存中":["18.10"],"如果正在获取数据":["18.10"],"之类的可以基于路由实现":["19.0"],"重构":["19.0"],"维护":["19.0"],"例如登录判断":["19.3"],"router":["19.3"],"path":["19.3"],"render":["19.3","25.3","28.2"],"logged":["19.3"],"与创建对象形式的存储不同":["20.1","21.1"],"针对每一个变量可以是响应式的":["20.1","21.1"],"通过原子派生的方式来适应复杂的开发场景":["20.1","21.1"],"在复杂的应用程序中":["20.3"],"数据流动可能涉及多个嵌套的回调函数和依赖关系":["20.3"],"这会导致代码的可读性和可维护性下降":["20.3"],"数据存储":["20.4"],"负责管理应用程序的状态和逻辑":["20.4"],"接收来自":["20.4"],"的动作并更新自身的状态":["20.4"],"它通过将原子状态进行派生":["21.3"],"组合成新的状态":["21.3"],"类似vue的computed":["21.3"],"所谓组件内状态":["21.3"],"其实就是内部使用了usestate":["21.3"],"text":["21.5"],"div":["21.6","21.8","21.9","21.14","28.2","28.6"],"onclick":["21.7","21.8","21.9"],"addnumber":["21.9"],"组件b渲染":["21.10"],"p":["21.10"],"组件b":["21.10"],"这么做的目的":["21.11"],"防止无意义的渲染":["21.11"],"这样就不会触发更新了":["21.12"],"不受外部影响":["21.13"],"同时也不影响外部":["21.13"],"status":["21.14"],"style":["21.14"],"background":["21.14","25.3"],"pink":["21.14"],"black":["21.14"],"订阅":["22.1"],"监听store中的state变化":["22.1"],"增强器":["22.2"],"动作":["22.2"],"供给":["23.1"],"consumer":["23.1"],"属性改变":["23.1"],"混入":["23.2"],"组件":["23.2","27.6"],"说白了就是":["23.2"],"变成了":["23.2"],"themeconsumer":["23.2"],"订阅消费者":["23.2"],"和":["25.0"],"uselayouteffect":["25.0"],"更新":["25.1"],"js":["25.1"],"执行完成":["25.1"],"视图绘制完毕":["25.1"],"才执行":["25.1"],"一句话概括如何选择":["25.2"],"修改":["25.2"],"4em":["25.3"],"papayawhip":["25.3"],"hello":["25.3"],"这个是时候":["25.3"],"的作用就出现了":["25.3"],"的执行在":["25.3"],"改变props":["25.4"],"br":["25.4"],"false":["25.4"],"卸载组件":["25.4"],"做数据初始化":["25.4"],"将滑动处理函数":["25.4"],"异步模式":["26.2"],"渲染组件":["26.2"],"异步组件的好处":["26.2"],"不再需要":["26.2"],"或":["26.2"],"useeffect":["26.2","28.4","29.11"],"指定的组件":["26.4"],"等待":["26.4"],"加载组件完成后":["26.4"],"再渲染真正的组件":["26.4"],"动态引入":["26.4"],"cloneelement":["27.2"],"强化":["27.2"],"混入新的":["27.2"],"是不能直接渲染的":["27.3"],"直接渲染会报错":["27.3"],"details":["27.3"],"view":["27.3"],"the":["27.3"],"code":["27.3"],"null":["27.4","28.4"],"index":["27.4"],"直接传入或者是抽离到子组件中":["27.5"],"组件一方面直接将":["27.6"],"alien":["27.7"],"mes":["27.7"],"let":["27.7"],"us":["27.7"],"区别":["27.8","29.6"],"显示注入在dom":["27.8"],"view内可以直接看到":["27.8"],"隐式注入再函数内使用cloneelemnt":["27.8"],"item":["27.9","28.6"],"createref":["28.1"],"component":["28.2"],"son":["28.2","28.5"],"如上代码所示":["28.3"],"流程主要分为几个方面":["28.3"],"通过":["28.3"],"创建一个":["28.3"],"对象":["28.3"],"将当前":["28.3"],"对象传递给子组件":["28.3"],"hocindex":["28.4"],"useref":["28.4"],"函数没有实例":["28.5"],"所以使用useimperativehandle":["28.5"],"里面传递参数模拟类组件实例":["28.5"],"forwawrdref使函数组件可以被ref获取实例":["28.5"],"这样的话其实跟类组件的性质是一样的":["28.5"],"sonmes":["28.5"],"setsonmes":["28.5"],"useimperativehandle创建实例方法":["28.5"],"第一个参数是要传递的ref对象":["28.5"],"第二个参数是一个函数":["28.5"],"第三个参数是一个数组":["28.5"],"数组中的值发生变化时":["28.5"],"才会重新执行第二个参数的函数":["28.5"],"sonrtate":["28.5"],"if":["28.6","32.4"],"添加依赖项":["28.6"],"使用react提供的usememo优化":["29.1"],"setnumbera":["29.1"],"setnumberb":["29.1"],"usememo":["29.1"],"执行":["29.2"],"的返回值":["29.2"],"如果":["29.2"],"中有依赖项改变":["29.2"],"newprop":["29.3"],"是否相等":["29.3"],"如果相等函数组件就会放弃子组件的调和更新":["29.3"],"从而子组件不会重新渲染":["29.3"],"如果上述把":["29.3"],"对象缓存起来":["29.3"],"上面":["29.3"],"会浅比较":["29.4"],"如果相等则不会重新渲染":["29.4"],"否则重新渲染":["29.4"],"对于state":["29.4"],"浅比较只会比较基础数据类型":["29.4"],"对于引用类型":["29.4"],"比如":["29.4"],"demo":["29.4"],"中":["29.4"],"的":["29.4"],"单纯的改变":["29.4"],"的属性名":["29.5"],"key":["29.5"],"变成数组":["29.5"],"判断数组的长度是否相等":["29.5"],"证明有属性增加或者减少":["29.5"],"那么更新组件":["29.5"],"遍历老":["29.5"],"或者老":["29.5"],"判断对应的新":["29.5"],"usecallback返回的是一个记忆化的回调函数":["29.6"],"只有当依赖项发生变化时":["29.6"],"回调函数才会改变":["29.6"],"这可以防止不必要的组件重新渲染":["29.6"],"例如":["29.6"],"如果你有一个经常重新渲染的父组件":["29.6"],"其中有一个子组件接收一个函数属性":["29.6"],"那么usecallback就非常有用":["29.6"],"因为它可以确保只有当函数的依赖项改变时":["29.6"],"函数才会被重新创建":["29.6"],"相反":["29.6"],"usememo返回的是一个记忆化的值":["29.6"],"这个值是运行函数的结果":["29.6"],"只有当依赖项改变时":["29.6"],"numb":["29.7"],"可以通过新老props":["29.7"],"state比较":["29.7"],"判断是否渲染":["29.7"],"但是如果是引用类型":["29.7"],"比如对象":["29.7"],"返回true则不更新":["29.8"],"返回false则更新":["29.8"],"组件会重新渲染":["29.10"],"不会走shouldcomponentupdate":["29.10"],"一是浪费性能":["29.11"],"二是可能执行":["29.11"],"更加符合常理":["32.1"],"这样action行为会随着时间的推移积累到状态中":["32.2"],"task":["32.4"],"else":["32.4"],"setstate":["32.5"],"function":["32.5"],"usereducer可以帮助更好地处理不同字段的状态变化":["32.6"],"usereducer适用于需要更精细控制状态逻辑":["32.6"],"处理复杂状态变化":["32.6"],"user":["39.1"],"instance":["39.1"],"constroller":["39.1"],"这个容器接手类的控制权":["39.2"],"注册的时候不需要一个一个new生成多个实例了":["39.4"],"而是直接调用实例方法进行注册":["39.4"],"lazy":["44.0"],"allowtransparency":["44.0"],"allowfullscreen":["44.0"],"see":["44.0"],"pen":["44.0"],"a":["44.0"],"href":["44.0"],"by":["44.0"],"耿延":["44.0"]},{"0":["18.9"],"1":["17.8","18.9","21.14"],"2":["17.3","28.3"],"3":["27.9"],"5":["16.0"],"19":["5.2"],"85":["8.1"],"89":["8.1"],"123":["21.14"],"在上面的代码中":["1.0"],"我们将loggermiddleware中间件添加到了appmodule模块中":["1.0"],"并使用forroutes":["1.0"],"方法指定了该中间件适用于所有路由":["1.0"],"这样":["1.0"],"每次请求到达控制器之前":["1.0"],"都会先执行loggermiddleware中间件中的代码":["1.0"],"gethello":["1.1"],"string":["1.1"],"将authguard守卫添加到路由上":["1.1"],"并使用":["1.1"],"装饰器指定守卫":["1.1"],"这样每次请求到达控制器之前都会先执行authguard守卫中的代码":["1.1"],"以确保请求的合法性":["1.1"],"useclass":["1.2"],"appmodule":["1.2"],"管道的应用场景":["1.3"],"将做为参数传递给":["2.0"],"方法":["2.0"],"authcontroller":["2.0"],"authmodule":["2.0","5.4"],"constroctor":["3.0"],"直接注入":["3.0"],"传递泛型类型":["3.0"],"configtype会提供类型":["3.0"],"而不需要处理业务逻辑":["5.1"],"在service中":["5.1"],"可以编写业务逻辑和调用其他服务":["5.1"],"路由":["5.2"],"之后是控制器":["5.2"],"之后是全局":["5.2"],"服务器响应":["5.2"],"并提供与其它代码块之间的依赖关系":["5.3"],"当需要在组件或控制器中使用一个实例时":["5.3"],"会自动处理依赖关系并将实例提供给需要的组件或控制器":["5.3"],"exports":["5.4"],"export":["5.4","16.4","17.5","17.8","21.10","32.5"],"class":["5.4"],"interceptors":["6.1"],"处理http请求前后所执行的逻辑":["6.1"],"executioncontext只在当前请求有效":["7.0"],"不可以和其他请求共享":["7.0"],"里":["8.2"],"tip":["8.2","17.3"],"通过":["8.2","27.4"],"分割的数据需要encoded编译一下":["8.2"],"如果大量的数据那么都需要去编译":["8.2"],"太耗费资源和时间":["8.2"],"所以需要更好的方式来传递大量数据form":["8.2"],"data":["8.2","18.9"],"而且可以传输多个文件":["8.3"],"但是毕竟多了一些只是用来分隔的":["8.3"],"所以请求体会增大":["8.3"],"就行":["8.4"],"uploadedfiles":["8.5"],"files":["8.5"],"array":["8.5"],"express":["8.5"],"multer":["8.5"],"报错cannot":["8.5"],"convert":["8.5"],"to":["8.5"],"primitive":["8.5"],"value的原因是":["8.5"],"是一个对象":["8.5"],"而不是一个字符串":["8.5"],"所以不能直接返回":["8.5"],"需要转换成字符串":["8.5"],"返回token":["10.0"],"inject":["11.0"],"支持通过参数注入别的":["11.2"],"provider":["11.2"],"return":["11.3","17.5","21.5","27.3"],"可以对原始组件做一些事件监听":["16.0"],"错误监控等":["16.0"],"无法直接继承静态属性":["16.2"],"如果需要继承需要手动处理":["16.2"],"或者引入第三方库":["16.2"],"因为本质上是产生了一个新组件":["16.2"],"所以需要配合":["16.2"],"forwardref":["16.2"],"来转发":["16.2"],"当前":["16.3"],"会覆盖上一个":["16.3"],"这样副作用串联起来":["16.3"],"影响很大":["16.3"],"cloneelement":["16.4"],"default":["16.4","17.5","17.8","21.6","21.10"],"可以做一些其他的操作":["16.5"],"box":["16.6"],"组件外部点击":["16.6"],"绑定标签录入页面":["16.7"],"绑定标签列表页面":["16.7"],"绑定文档列表页面":["16.7"],"项目b2":["17.1"],"这是分类b下的项目b2":["17.1"],"alt":["17.1"],"text":["17.1","27.9"],"let会在每次循环的时候保存当前作用域的变量":["17.3"],"所以每次循环的时候都会保存当前的i":["17.3"],"所以打印出来的结果是0":["17.3"],"不会产生新的作用域":["17.3"],"所以每次循环的时候都是共享一个作用域":["17.3"],"所以每次循环的时候都会覆盖上一次的i":["17.3"],"所以最后打印出来的结果都是10":["17.3"],"button":["17.5","17.6","21.14","28.6"],"onclick":["17.5","17.6","21.14","28.6"],"点击":["17.5"],"div":["17.6","17.8","21.5","28.4"],"add":["17.6","21.7","21.8","21.9","21.14"],"log":["17.8","28.5"],"提供了一整套功能":["18.1"],"可以更好地管理数据获取":["18.1"],"缓存":["18.1"],"状态以及用户体验等方面的问题":["18.1"],"从而减少了开发工作量并提供了更好的性能和用户体验":["18.1"],"查看最新issue信息":["18.9"],"最新一条issue信息":["18.9"],"stringify":["18.9"],"dataupdatedat":["18.10"],"表示数据上次更新的时间戳":["18.10"],"refetch":["18.10"],"用于手动重新获取数据的函数":["18.10"],"扩展更容易":["19.0"],"dashboard":["19.3"],"publichome":["19.3"],"atom":["20.1","21.1"],"组件通信困难":["20.3"],"当应用程序中的组件需要共享和同步状态时":["20.3"],"传统的mvc模式无法提供一个清晰的机制来处理组件之间的通信和状态共享":["20.3"],"action":["20.4"],"动作":["20.4"],"定义用户在":["20.4"],"中执行的操作":["20.4"],"它们会被发送给":["20.4"],"state变化":["21.3"],"触发更新渲染罢了":["21.3"],"有兴趣可以阅读手动实现recoil原理":["21.3"],"danger":["21.6"],"这样会阻塞渲染线程":["21.6"],"不建议这样做":["21.6"],"异步请求应该放在组件内部":["21.6"],"或者使用异步更新atom":["21.6"],"www":["21.9"],"abc":["21.9"],"com":["21.9"],"asynctest":["21.10"],"不会触发订阅事件":["21.12"],"即使大家共用同一个atom状态":["21.13"],"p":["21.14"],"x":["21.14"],"combinereducer":["22.1"],"将多个reducers合并成一个rootreducer":["22.1"],"reducer":["22.2"],"纯函数":["22.2"],"订阅消费者":["23.0"],"会让消费":["23.1"],"的组件重新渲染":["23.1"],"son":["23.2"],"将":["23.2"],"内容转化成":["23.2"],"所以":["25.1"],"回调函数不会阻塞浏览器绘制视图":["25.1"],"改变布局就用":["25.2"],"其他情况就用":["25.2"],"dom":["25.3"],"更新前":["25.3"],"所以此时使用":["25.3"],"避免了浏览器出现再次重回和重排的可能":["25.3"],"解决了性能上的问题":["25.3"],"如果使用uselayouteffect的话":["25.3"],"它的执行时机在dom更新完成":["25.3"],"浏览器只需绘制即可":["25.3"],"此时插入style便可引起浏览器的重绘":["25.3"],"因为样式发生了变化":["25.3"],"做防抖处理":["25.4"],"getderivedstatefromprops":["25.4"],"props获取后":["25.4"],"得到两个参数":["25.4"],"上一个props":["25.4"],"更新或的props":["25.4"],"组件挂载后":["25.4"],"shouldcomponentupdate":["25.4"],"性能优化":["25.4"],"只有":["25.4"],"list":["25.4"],"改变":["25.4","26.2","29.1"],"渲染视图":["25.4"],"render":["25.4"],"渲染":["25.4"],"item":["25.4"],"getsnapshotbeforeupdate":["25.4"],"保存更新前的快照数据":["25.4"],"组件即将更新":["25.4"],"组件即将卸载":["25.4"],"配合做数据交互":["26.2"],"也不会因为数据交互后":["26.2"],"state":["26.2"],"而产生的二次更新作用":["26.2"],"代码逻辑更简单":["26.2"],"清晰":["26.2"],"里面的组件":["26.4"],"配合":["26.4"],"实现动态加载组件效果":["26.4"],"这样很利于代码分割":["26.4"],"不会让初始化的时候加载大量的文件":["26.4"],"或者修改":["27.2"],"的子元素":["27.2"],"这种情况需要先遍历":["27.4"],"判断":["27.4"],"元素类型":["27.4"],"针对":["27.4"],"element":["27.4"],"节点":["27.4"],"针对函数":["27.4"],"直接传递参数":["27.4"],"执行函数":["27.4"],"抽象传递给":["27.6"],"一方面混入":["27.6"],"learn":["27.7"],"react":["27.7"],"api":["27.8"],"注入":["27.8"],"myinput":["27.9"],"e":["27.9"],"target":["27.9"],"ref对象模式获取元素或组件":["28.1"],"向":["28.3"],"组件传递的":["28.3"],"对象上":["28.3"],"绑定":["28.3"],"孙组件实例":["28.3"],"子组件实例":["28.3"],"和":["28.3"],"current":["28.4"],"组件实例":["28.4"],"转发引用":["28.5"],"使函数组件可以接受ref":["28.5"],"这样就可以获取到实例":["28.5"],"forwardson":["28.5"],"parent":["28.5"],"instance":["28.5"],"console":["28.5"],"key":["28.6"],"bind":["28.6"],"null":["28.6"],"用":["29.1"],"可以达到同样的效果":["29.1"],"需要更新的值":["29.1"],"放在":["29.1"],"deps":["29.1"],"中":["29.1"],"重新形成element对象":["29.1"],"否则通过":["29.1"],"拿到上次的缓存值":["29.1"],"达到如上同样效果":["29.1"],"比起类组件":["29.1"],"我更推荐函数组件用":["29.1"],"这种方式":["29.1"],"返回的重新执行":["29.2"],"产生的值":["29.2"],"否则取上一次缓存值":["29.2"],"也就和":["29.3"],"上":["29.3"],"指向相同的内存空间":["29.3"],"也就是相等":["29.3"],"从而跳过了本次更新":["29.3"],"下属性是不会促使组件更新的":["29.4"],"因为浅比较两次":["29.4"],"还是指向同一个内存空间":["29.4"],"想要解决这个问题也容易":["29.4"],"浅拷贝就可以解决":["29.4"],"或新":["29.5"],"有没有与之对应并且相等的":["29.5"],"这个相等是浅比较":["29.5"],"如果有一个不对应或者不相等":["29.5"],"到此为止":["29.5"],"浅比较流程结束":["29.5"],"purecomponent":["29.5"],"就是这么做渲染节流优化的":["29.5"],"这个值才会重新计算":["29.6"],"这对于避免重复进行昂贵的计算或数据转换非常有用":["29.6"],"如果你有一个组件":["29.6"],"它执行一个可能非常昂贵的操作":["29.6"],"如计算一个数的阶乘":["29.6"],"那么usememo就可以用来记忆化这个计算的结果":["29.6"],"从而只有当输入的数改变时":["29.6"],"才会重新运行这个计算":["29.6"],"总的来说":["29.6"],"usecallback和usememo的主要区别在于":["29.6"],"usecallback返回的是一个记忆化的函数":["29.6"],"而usememo返回的是一个记忆化的值":["29.6"],"数组":["29.7"],"那么浅比较就会失效":["29.7"],"因为新老props":["29.7"],"state指向的是同一个内存空间":["29.7"],"所以我们需要深比较":["29.7"],"这个时候就需要用到lodash的深比较函数isequal":["29.7"],"immutable":["29.7"],"js":["29.7"],"也可以实现深比较":["29.7"],"componentwillreceiveprops":["29.11"],"等钩子":["29.11"],"造成意想不到的情况发生":["29.11"],"filter":["32.4"],"throw":["32.4"],"error":["32.4"],"未知":["32.4"],"使用中间件或副作用等情况下":["32.6"],"可以优于简单使用usestate来管理组件状态":["32.6"],"此时我们的constroller与service解耦":["39.1"],"具体调用的方法完全取决于外部依赖注入进来的方法":["39.1"],"可扩展性":["39.1"],"解耦":["39.1"],"可测试性":["39.1"],"controller":["39.5"],"on":["44.0"]}]'},t={"0.0":{t:"<resume/>",p:"",l:"Resume/index.html",a:"resume"},"1.0":{t:"中间件",p:`::: info 存在意义
处理HTTP请求的函数，他可以在请求到达控制器之前/之后执行一些操作 他可以是全局的也可以是局部的
场景：身份验证，日志记录，错误处理
:::
::: details
中间 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html",a:"中间件"},"1.1":{t:"守卫",p:`Guard 是一种用于保护路由的机制，他可以在请求到达控制器之前或者之后执行一些操作。守卫可以用于实现身份验证，权限控制，缓存等功能。在NestJs中收尾可以是全局的也可以是局部的。守卫路由
[[Ex ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#守卫",a:"守卫"},"1.2":{t:"拦截器",p:`处理HTTP请求和响应的函数，在请求到达控制器之前之后执行一些操作。拦截器可以实现日志记录，错误处理，数据转换。在Nestjs中拦截器可以是全局的也可局部
@Injectable()
export c ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#拦截器",a:"拦截器"},"1.3":{t:"管道",p:`管道是数据流入controller前进行的一波数据处理
其中数据处理包含了对数据的转换,验证。他可以在控制器之前或之后对数据进行预处理。然后将数据传递给控制器或下一个管道。
$$管道的主要目的是增强应 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#管道",a:"管道"},"2.0":{t:">注入基本数据",p:`因为普通数据服务不是Class，所以要使用@Inject来注入

@Module({
	providers:[
		{
			provide:'APP_NAME',
			useValue:'使用普通 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Provider.html",a:"注入基本数据"},"3.0":{t:"> 案例，第三方发送短信服务。 根据不同配置使用不同的第三方运营商",p:`sms.serivce.ts
@Injectable()
export class AppController(){
	constructor(){
		private ali:aliService, ...`,l:"articles/BackEnd/NestJs/Basic/Code/env配置相关.html",a:"案例-第三方发送短信服务。-根据不同配置使用不同的第三方运营商"},"4.0":{t:"控制反转 IOC",p:`面向对象中的设计原则，用来减少计算机代码之前的耦合度。其根本思想是：”借助于第三方“ 实现具有依赖关系的对象之间的解耦

$$ 第三方举例：TS注解，或直接传递参数。总之控制权不在类中，而是由外部决定 ...`,l:"articles/BackEnd/NestJs/Basic/Code/设计模式模式.html",a:"控制反转-ioc"},"4.1":{t:"依赖注入 DI",p:`IOC 的具体实现，在类以外的地方提供服务。类内部调用的是该具体服务的抽象

	abstrct class Phone {
		playGame(name:string):string
	}
	cla ...`,l:"articles/BackEnd/NestJs/Basic/Code/设计模式模式.html#依赖注入-di",a:"依赖注入-di"},"5.0":{t:"- Nest 请求声明周期",p:`

[[Provider]]

动态Provider
asynProvider



Module

静态模块
动态模块
全局模块



[[env配置相关]]


`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html",a:"nest-请求声明周期"},"5.1":{t:"Module Controller Service的关系",p:`
Module 提供了一个模块化的方式来组织和管理您的应用程序的代码，同时还允许您使用依赖注入和模块之间的依赖关系来构建更加可扩展的应用程序。
$$ Module是Nestjs应用程序的基本构建块，每 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#module-controller-service的关系",a:"module-controller-service的关系"},"5.2":{t:"Nest 请求生命周期",p:`!img

1.  收到请求
2.  全局绑定的中间件
3.  模块绑定的中间件
4.  全局守卫
5.  控制层守卫
6.  路由守卫
7.  全局拦截器（控制器之前）
8.  控制器层拦截器 （控 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#nest-请求生命周期",a:"nest-请求生命周期"},"5.3":{t:"[[Provider]]",p:`提供服务,用于表示应用程序中可注入的任何东西。除了服务，Provider 还可以提供其他类型的对象，例如 Factory 工厂、配置对象、连接对象等。


提供者使用 @Injectable() 装饰 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#provider",a:"provider"},"5.4":{t:"Module",p:`模块是一个子程序，用于定义控制器，提供者或向其他模块开放提供者（开放模块的API）


默认情况下控制器，提供者在当前模块可用，即模块作用域
若果向其他模块提供服务可以将提供者定义在export属性中 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#module",a:"module"},"5.5":{t:"	",p:"",l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#",a:""},"5.6":{t:"动态Module",p:"",l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#动态module",a:"动态module"},"6.0":{t:"hi  我是Eagon,今天给大家分享Nest基础系列-Nestjs核心基础概念。 愿我们共同进步",p:"",l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html",a:"hi-我是eagon-今天给大家分享nest基础系列-nestjs核心基础概念。-愿我们共同进步"},"6.1":{t:"核心概念概览",p:`
模块 Modules 组合所有逻辑的地方,我理解为DI的Container
控制器 Controller处理请求
服务 Service 操作数据库以及处理所有逻辑的地方
管道 Pipes 核验请求的 ...`,l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html#核心概念概览",a:"核心概念概览"},"6.2":{t:" 重点1: NestJs 处理Https时的生命周期",p:"",l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html#重点1-nestjs-处理https时的生命周期",a:"重点1-nestjs-处理https时的生命周期"},"7.0":{t:">他代表了一个HTTP请求的执行上下文，提供了许多属性和方法，可用于在请求的生命周期内访问",p:`
ExecutionContext是在每个请求到达控制器之前被Nestjs封装产生的，他的请求是将请求的上下文，传递给控制器，拦截器，管道，守卫等各个部分。以便他们可以对请求进行处理和转换
当一个请求 ...`,l:"articles/BackEnd/NestJs/Basic/link/Execution Context 执行上下文.html",a:"他代表了一个http请求的执行上下文-提供了许多属性和方法-可用于在请求的生命周期内访问"},"8.0":{t:"# HTTP数据传输方式",p:`
url param
query
form-urlencoded
form-data
json
encode: 将...编译

`,l:"articles/BackEnd/NestJs/http/index.html",a:"http数据传输方式"},"8.1":{t:"urlParam/Query",p:`都属于GET路径传参
params：/router1/:id ，    //router1/123，/router1/789 ,这里的id叫做params
--------------------
q ...`,l:"articles/BackEnd/NestJs/http/index.html#urlparam-query",a:"urlparam-query"},"8.2":{t:"form-urlencoded",p:`直接用表单提交数据，提交的就是这种
他和query的区别就是把查询的query放在了body里,然后指定下 content-type 是 application/x-www-form-urlencod ...`,l:"articles/BackEnd/NestJs/http/index.html#form-urlencoded",a:"form-urlencoded"},"8.3":{t:"form-data",p:`form data 不再是通过 &amp; 分隔数据，而是用 --------- + 一串数字做为 boundary(分隔符)。因为不是 url 的方式了，自然也不用再做 url encode。
&l ...`,l:"articles/BackEnd/NestJs/http/index.html#form-data",a:"form-data"},"8.4":{t:"Json",p:`form-urlencoded 需要对内容做 url encode，而 form data 则需要加很长的 boundary，两种方式都有一些缺点。如果只是传输 json 数据的话，不需要用这两种。
 ...`,l:"articles/BackEnd/NestJs/http/index.html#json",a:"json"},"8.5":{t:"Nest实现基本的http请求",p:`::: code-group
// [http.controller.ts]
// query: /router1?id=123 
// param : /router/1

在 Nest 里，通过  ...`,l:"articles/BackEnd/NestJs/http/index.html#nest实现基本的http请求",a:"nest实现基本的http请求"},"9.0":{t:"# NestJs",p:"",l:"articles/BackEnd/NestJs/index.html",a:"nestjs"},"10.0":{t:"- register 接收账号密码argon2 hash 加密插入数据库",p:`
login   登录接收账号密码，argon2 verify对密码进行解密
解密符合，根据头信息，载荷, 签名规则 返回token

`,l:"articles/BackEnd/NestJs/jwt/流程.html",a:"register-接收账号密码argon2-hash-加密插入数据库"},"11.0":{t:"# 多种provider",p:`Nest 实现了IoC 从main文件臊面，分析Module引用及依赖中的关系，自动把provider注入到目标对象
::: code-group
@Module({
  imports: [Pris ...`,l:"articles/BackEnd/NestJs/provider/index.html",a:"多种provider"},"11.1":{t:"注册Value值",p:`@Module({
  imports: [PrismaModule],
  providers: [{
      provide:'a',
      useValue:'我是A'
    }]
 ...`,l:"articles/BackEnd/NestJs/provider/index.html#注册value值",a:"注册value值"},"11.2":{t:"动态注册服务",p:`@Module({
  imports: [PrismaModule],
  providers: [{
      provide:'providerTest',
      inject: ['p ...`,l:"articles/BackEnd/NestJs/provider/index.html#动态注册服务",a:"动态注册服务"},"11.3":{t:"异步动态注册服务",p:`当需要异步获取provider时，可以使用useFactory的async版本
例如: 链接redis当redis链接成功后再注册provider
@Module({
  imports: [Pris ...`,l:"articles/BackEnd/NestJs/provider/index.html#异步动态注册服务",a:"异步动态注册服务"},"11.4":{t:"总结",p:`::: tip
:::
`,l:"articles/BackEnd/NestJs/provider/index.html#总结",a:"总结"},"12.0":{t:"# 文件上传",p:`::: tip
NestJS 实现文件上传是基于Express Multer实现的,然后通过一系列适配器和拦截器集成到NestJS中
:::
`,l:"articles/BackEnd/NestJs/upload/index.html",a:"文件上传"},"13.0":{t:"语法",p:"",l:"articles/English/grammar/index.html",a:"语法"},"14.0":{t:"js",p:"",l:"articles/FontEnd/js/index.html",a:"js"},"15.0":{t:"# 项目列表",p:"",l:"articles/FontEnd/react/Basic/index.html",a:"项目列表"},"15.1":{t:"高阶组件HOC",p:"",l:"articles/FontEnd/react/Basic/index.html#高阶组件hoc",a:"高阶组件hoc"},"16.0":{t:"# 高阶组件HOC",p:`总结

强化 props ，可以通过 HOC ，向原始组件混入一些状态。
渲染劫持，可以利用 HOC ，动态挂载原始组件，还可以先获取原始组件的渲染树，进行可控性修改。
可以配合 import 等 a ...`,l:"articles/FontEnd/react/HOC/index.html",a:"高阶组件hoc"},"16.1":{t:"两种不同的高阶组件",p:`常用的高阶组件有属性代理和反向继承两种，两者之间有一些共性和区别。接下来分别介绍一下两种模式下的高阶组件。
`,l:"articles/FontEnd/react/HOC/index.html#两种不同的高阶组件",a:"两种不同的高阶组件"},"16.2":{t:"属性代理",p:`属性代理，就是用组件包裹一层代理组件，在代理组件上，可以做一些，对源组件的强化操作。这里注意属性代理返回的是一个新组件，被包裹的原始组件，将在新的组件里被挂载。
function HOC(WrapCo ...`,l:"articles/FontEnd/react/HOC/index.html#属性代理",a:"属性代理"},"16.3":{t:"反向继承",p:`反向继承
反向继承和属性代理有一定的区别，在于包装后的组件继承了原始组件本身，所以此时无须再去挂载业务组件。
class Index extends React.Component{
  render ...`,l:"articles/FontEnd/react/HOC/index.html#反向继承",a:"反向继承"},"16.4":{t:"编写HOC 什么时候使用HOC",p:`

强化Props
强化 props 就是在原始组件的 props 基础上，加入一些其他的 props ，强化原始组件功能


控制渲染
HOC 反向继承模式，可以通过 super.render()  ...`,l:"articles/FontEnd/react/HOC/index.html#编写hoc-什么时候使用hoc",a:"编写hoc-什么时候使用hoc"},"16.5":{t:"动态加载Loading",p:`export default function dynamicHoc(loadRouter) {
  return class Content extends React.Component {
   ...`,l:"articles/FontEnd/react/HOC/index.html#动态加载loading",a:"动态加载loading"},"16.6":{t:"事件监控",p:`HOC 不一定非要对组件本身做些什么？也可以单纯增加一些事件监听，错误监控。
以下代码HOC ，只对组件内的点击事件做一个监听效果。
function ClickHoc (Component){
   ...`,l:"articles/FontEnd/react/HOC/index.html#事件监控",a:"事件监控"},"16.7":{t:"权限拦截",p:`::: code-group

export const Permission = React.createContext([]) 
export default function Index(){
 ...`,l:"articles/FontEnd/react/HOC/index.html#权限拦截",a:"权限拦截"},"17.0":{t:"# Hooks",p:"",l:"articles/FontEnd/react/Hooks/index.html",a:"hooks"},"17.1":{t:"API分类",p:`
关键词： concurrent
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;使用范围&lt;/th&gt;
&lt;th&gt;Hooks&lt;/th&gt;
&lt;t ...`,l:"articles/FontEnd/react/Hooks/index.html#api分类",a:"api分类"},"17.2":{t:"Hooks",p:"",l:"articles/FontEnd/react/Hooks/index.html#hooks",a:"hooks"},"17.3":{t:"useRef",p:`&lt;details&gt;
场景：稳定引用，获取dom节点，获取上一次的值

闭包 异步访问到旧变量的问题

::: code-group
 // 典型的闭包循环案例，每次循环调用setTimeo ...`,l:"articles/FontEnd/react/Hooks/index.html#useref",a:"useref"},"17.4":{t:"数据更新驱动类",p:"",l:"articles/FontEnd/react/Hooks/index.html#数据更新驱动类",a:"数据更新驱动类"},"17.5":{t:"useState",p:`&lt;details&gt;
const [state, setState] = useState(initialState);
参数接收一个初始值，返回一个数组，数组的第一个元素是当前的state ...`,l:"articles/FontEnd/react/Hooks/index.html#usestate",a:"usestate"},"17.6":{t:"useReducer",p:`对于拥有许多状态更新逻辑的组件来说，过于分散的事件处理程序可能会令人不知所措。对于这种情况，你可以将组件的所有状态更新(增删改查)逻辑整合到一个外部函数中，这个函数叫作 reducer。
reduce ...`,l:"articles/FontEnd/react/Hooks/index.html#usereducer",a:"usereducer"},"17.7":{t:"useContext",p:`作用: 传递数据，避免props层层传递，导致代码冗余
`,l:"articles/FontEnd/react/Hooks/index.html#usecontext",a:"usecontext"},"17.8":{t:"useImperativeHandle",p:`::: info 解决了什么问题?
子组件通过ref抛出方法供父组件调用
React函数 组件，父组件需要直接访问子组件的实例方法或属性的问题。
在 React 中，父组件通常通过 props 向子组 ...`,l:"articles/FontEnd/react/Hooks/index.html#useimperativehandle",a:"useimperativehandle"},"18.0":{t:"# React Query",p:"",l:"articles/FontEnd/react/ReactQuery/index.html",a:"react-query"},"18.1":{t:"出现背景/解决问题",p:"**灵魂拷问Q： 为什么用axios不可以 为什么需要出现React QueryA:尽管可以使用普通的 Axios 或其他数据获取库来处理数据请求，但在某些情况下，使用 React Query 可以带 ...",l:"articles/FontEnd/react/ReactQuery/index.html#出现背景-解决问题",a:"出现背景-解决问题"},"18.2":{t:"核心概念",p:`解决普通请求代码重复，后期维护困难。无数据缓存，无数据同步，无数据预取，无数据失效处理，无服务器状态更新等问题。
`,l:"articles/FontEnd/react/ReactQuery/index.html#核心概念",a:"核心概念"},"18.3":{t:"使用教程",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#使用教程",a:"使用教程"},"18.4":{t:"自动缓存和数据同步",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#自动缓存和数据同步",a:"自动缓存和数据同步"},"18.5":{t:"加载状态管理",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#加载状态管理",a:"加载状态管理"},"18.6":{t:"数据同步和预取",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#数据同步和预取",a:"数据同步和预取"},"18.7":{t:"自动缓存失效处理",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#自动缓存失效处理",a:"自动缓存失效处理"},"18.8":{t:"服务器状态更新",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#服务器状态更新",a:"服务器状态更新"},"18.9":{t:"更少的重复代码",p:`::: code-group
import as React from 'react';
​
export default function App() {
  // 存储 后端返回数据
  cons ...`,l:"articles/FontEnd/react/ReactQuery/index.html#更少的重复代码",a:"更少的重复代码"},"18.10":{t:"API",p:`


APIname
Are




data：
查询返回的数据


isLoading：
表示查询是否正在加载中。如果数据正在加载，该属性为 true；否则为 false。


isError：
表 ...`,l:"articles/FontEnd/react/ReactQuery/index.html#api",a:"api"},"18.11":{t:"总结",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#总结",a:"总结"},"19.0":{t:"# React Router",p:`后端概念：发送url请求到服务器端，server会通过不同的地址返回不同的页面
为什么需要路由：

单页应用需要路由切换
通过url可以定位到页面
更有语义的组织资源

三种路由的实现方式：

Bro ...`,l:"articles/FontEnd/react/ReactRouter/index.html",a:"react-router"},"19.1":{t:"快速上手",p:"",l:"articles/FontEnd/react/ReactRouter/index.html#快速上手",a:"快速上手"},"19.2":{t:"原理分析",p:"",l:"articles/FontEnd/react/ReactRouter/index.html#原理分析",a:"原理分析"},"19.3":{t:"核心API",p:`


name
effect
demo




Link
普通链接，不会触发刷新
&lt;Link to=&quot;&quot;/&gt;


NavLink
类似Link
但是会添加当前选中状态& ...`,l:"articles/FontEnd/react/ReactRouter/index.html#核心api",a:"核心api"},"20.0":{t:"# React 全局存储/状态管理",p:"",l:"articles/FontEnd/react/Storage/index.html",a:"react-全局存储-状态管理"},"20.1":{t:"常见的状态管理模式",p:`
global：  全局式，也被称作单一数据源，将所有的数据放到一个大对象中，关键词：combineReducers();
multiple stores：  多数据源模式，将状态存放到多个数据源中， ...`,l:"articles/FontEnd/react/Storage/index.html#常见的状态管理模式",a:"常见的状态管理模式"},"20.2":{t:"Flex 架构",p:"",l:"articles/FontEnd/react/Storage/index.html#flex-架构",a:"flex-架构"},"20.3":{t:"出现背景 & 解决痛点",p:"Flux架构解决前端应用程序中状态管理和数据流动的复杂性问题。在传统的MVC（Model-View-Controller）模式中，应用程序的状态分散在多个视图和控制器之间，导致数据流动难以追踪和管理。 ...",l:"articles/FontEnd/react/Storage/index.html#出现背景-解决痛点",a:"出现背景-解决痛点"},"20.4":{t:"架构特点 & 详细介绍",p:`Flux架构通过引入单向数据流的概念，将数据的流动变得可控和可预测。它明确了数据流动的路径，并将状态的修改限制在特定的流程中。这样做的好处包括：


易于追踪和调试：由于数据流是单向的，数据的变化路径 ...`,l:"articles/FontEnd/react/Storage/index.html#架构特点-详细介绍",a:"架构特点-详细介绍"},"21.0":{t:"# Jotai",p:`引用来源：Ryun
`,l:"articles/FontEnd/react/Storage/jotai/index.html",a:"jotai"},"21.1":{t:"常见的状态管理模式",p:`
global：  全局式，也被称作单一数据源，将所有的数据放到一个大对象中，关键词：combineReducers();
multiple stores：  多数据源模式，将状态存放到多个数据源中， ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#常见的状态管理模式",a:"常见的状态管理模式"},"21.2":{t:"Jotai  原子状态管理",p:"",l:"articles/FontEnd/react/Storage/jotai/index.html#jotai-原子状态管理",a:"jotai-原子状态管理"},"21.3":{t:"原子式解决了什么问题",p:`reactHook 使State的拆分和逻辑共享变得更容易
但useState 和 useContext对于多个store仍需要维护多个Context Provider 因为当Context改变，所有 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#原子式解决了什么问题",a:"原子式解决了什么问题"},"21.4":{t:"使用教程",p:"",l:"articles/FontEnd/react/Storage/jotai/index.html#使用教程",a:"使用教程"},"21.5":{t:"1. 创建 atom  派生atom  使用 useAtom",p:`::: details View The Code
import { atom, useAtom } from &quot;jotai&quot;;
import { FC } from &quot; ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_1-创建-atom-派生atom-使用-useatom",a:"_1-创建-atom-派生atom-使用-useatom"},"21.6":{t:"2. 异步派生",p:`::: details View The Code
import { atom, useAtom } from &quot;jotai&quot;;
import { FC } from &quot; ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_2-异步派生",a:"_2-异步派生"},"21.7":{t:"3. 函数组件内更新方式",p:`::: details View The Code
  const ValueAtom = atom(1)
  const Text = ()=&gt;{
    const [value,setVa ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_3-函数组件内更新方式",a:"_3-函数组件内更新方式"},"21.8":{t:"4. atom内更新方式",p:`::: details View The Code
  const ValueAtom = atom(1)
  const AddNumberAtom = atom(ge=&gt;ge(ValueAt ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_4-atom内更新方式",a:"_4-atom内更新方式"},"21.9":{t:"5. 异步更新atom 区别于第二条异步获取，异步更新不会阻塞线程",p:`::: details View The Code
  const MockData = new Promise&lt;string&gt;((r) =&gt; {
    setTimeout(() ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_5-异步更新atom-区别于第二条异步获取-异步更新不会阻塞线程",a:"_5-异步更新atom-区别于第二条异步获取-异步更新不会阻塞线程"},"21.10":{t:"6. 渲染问题",p:`:::   details View The Code

当我们点击add时，发现A和B都重新渲染了，但是问题来了，A为什么要重新渲染呀，A只是触发了更新操作，并不需要重新渲染呀？？？


这是因为， ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_6-渲染问题",a:"_6-渲染问题"},"21.11":{t:"7. 解决渲染问题 useAtomValue、useSetAtom",p:`
如果有的组件只需要监听状态的变化值，而没有更新操作 请使用useAtomValue
如果仅更新操作，而无需渲染状态的组件，请使用 useSetAtom
这么做的目的：防止无意义的渲染

`,l:"articles/FontEnd/react/Storage/jotai/index.html#_7-解决渲染问题-useatomvalue、usesetatom",a:"_7-解决渲染问题-useatomvalue、usesetatom"},"21.12":{t:"8. Provider",p:`
正常情况下，无需用Provider包裹组件
但如果需要控制某些组件的状态不发生更新，可以用Provider包裹
或者说，用Provider包裹的组件，状态是独立的，不受外部影响，同时也不影响外部，即 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_8-provider",a:"_8-provider"},"21.13":{t:"9.store",p:`
createStore,export出去,使用Jotai的Provider提供给App


其中，store中的状态，是全局的，任何组件都可以使用，但是，如果某个组件使用了Provider包裹，那么 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_9-store",a:"_9-store"},"21.14":{t:"实际使用",p:`::: code-group
import { createStore, atom } from &quot;jotai&quot;;

const myStore = createStore();
 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#实际使用",a:"实际使用"},"22.0":{t:"# Redux",p:"",l:"articles/FontEnd/react/Storage/redux/index.html",a:"redux"},"22.1":{t:"API介绍",p:`
reducer 纯函数，接收两个参数，一个是state，一个是action，返回一个新的state
createStore 创建一个 root 存放 state的根对象
dispatch 更新sto ...`,l:"articles/FontEnd/react/Storage/redux/index.html#api介绍",a:"api介绍"},"22.2":{t:"摘要",p:`
middleware 中间件,中间件用于增强 dispatch 功能，返回一个增强后的 dispatch（比如 redux-thunk 使 action 可以为 function）
enhancer ...`,l:"articles/FontEnd/react/Storage/redux/index.html#摘要",a:"摘要"},"23.0":{t:"# Context Provider Consumer",p:`
const ThemeContext = React.createContext(null)
const ThemeProvider = ThemeContext.Provider  //提供者
c ...`,l:"articles/FontEnd/react/context/index.html",a:"context-provider-consumer"},"23.1":{t:"提供者Provider用法",p:`const ThemeProvider = ThemeContext.Provider  //提供者
export default function ProviderDemo(){
    const ...`,l:"articles/FontEnd/react/context/index.html#提供者provider用法",a:"提供者provider用法"},"23.2":{t:"消费者Consumer用法",p:`对于新版本想要获取 context 的消费者，React 提供了3种形式
::: code-group
React v16.6 提供了 contextType 静态属性，用来获取上面 Provider ...`,l:"articles/FontEnd/react/context/index.html#消费者consumer用法",a:"消费者consumer用法"},"24.0":{t:"!react",p:"",l:"articles/FontEnd/react/index.html",a:"react"},"25.0":{t:"# 生命周期",p:`React hooks也提供了 api ，用于弥补函数组件没有生命周期的缺陷。其原理主要是运用了 hooks 里面的 useEffect 和 useLayoutEffect
`,l:"articles/FontEnd/react/lifeCycle/index.html",a:"生命周期"},"25.1":{t:"useEffect",p:`useEffect(()=&gt;{
    return destory
},dep)


第一个参数callback 返回销毁函数 下次执行useEffect会首先执行这个销毁函数。 销毁定时器, ...`,l:"articles/FontEnd/react/lifeCycle/index.html#useeffect",a:"useeffect"},"25.2":{t:"useLayoutEffect",p:`useLayoutEffect 和 useEffect 不同的地方是采用了同步执行


首先 useLayoutEffect 是在 DOM 更新之后，浏览器绘制之前，这样可以方便修改 DOM，获取 D ...`,l:"articles/FontEnd/react/lifeCycle/index.html#uselayouteffect",a:"uselayouteffect"},"25.3":{t:"useInsertionEffect",p:`在介绍 useInsertionEffect 用途之前，先看一下 useInsertionEffect 的执行时机。
React.useEffect(()=&gt;{
    console.log( ...`,l:"articles/FontEnd/react/lifeCycle/index.html#useinsertioneffect",a:"useinsertioneffect"},"25.4":{t:"类组件生命周期在函数组件内使用Effect替代方案",p:`::: code-group
// componentDidMount
React.useEffect(()=&gt;{
    /* 请求数据 ， 事件监听 ， 操纵dom */
},[])  /* ...`,l:"articles/FontEnd/react/lifeCycle/index.html#类组件生命周期在函数组件内使用effect替代方案",a:"类组件生命周期在函数组件内使用effect替代方案"},"26.0":{t:"# 渲染调优",p:"",l:"articles/FontEnd/react/optimizeRender/index.html",a:"渲染调优"},"26.1":{t:"懒加载和异步渲染",p:"",l:"articles/FontEnd/react/optimizeRender/index.html#懒加载和异步渲染",a:"懒加载和异步渲染"},"26.2":{t:"异步渲染 Suspense(悬念)",p:`::: info
Suspense 是 React 提出的一种同步的代码来实现异步操作的方案
Suspense可以让组件 await等待异步操作，直到异步操作完成，才会渲染组件。
:::
用法
//  ...`,l:"articles/FontEnd/react/optimizeRender/index.html#异步渲染-suspense-悬念",a:"异步渲染-suspense-悬念"},"26.3":{t:"懒加载(动态加载)",p:"",l:"articles/FontEnd/react/optimizeRender/index.html#懒加载-动态加载",a:"懒加载-动态加载"},"26.4":{t:"React.lazy",p:`React.lazy 接受一个函数，这个函数需要动态调用 import()
它必须返回一个 Promise ，该 Promise 需要 resolve 一个 default export 的 Reac ...`,l:"articles/FontEnd/react/optimizeRender/index.html#react-lazy",a:"react-lazy"},"26.5":{t:"React.lazy和Suspense实现动态加载原理",p:"",l:"articles/FontEnd/react/optimizeRender/index.html#react-lazy和suspense实现动态加载原理",a:"react-lazy和suspense实现动态加载原理"},"27.0":{t:"# props",p:"",l:"articles/FontEnd/react/props/index.html",a:"props"},"27.1":{t:"监听props改变",p:`函数组件中可以用 useEffect 来作为 props 改变后的监听函数。(不过有一点值得注意, useEffect 初始化会默认执行一次)
  React.useEffect(()=&gt;{
  ...`,l:"articles/FontEnd/react/props/index.html#监听props改变",a:"监听props改变"},"27.2":{t:"Render Children 模式",p:`① props 插槽组件

&lt;Container&gt;
    &lt;Children&gt;
&lt;/Container&gt;


上述可以在 Container 组件中，通过 pro ...`,l:"articles/FontEnd/react/props/index.html#render-children-模式",a:"render-children-模式"},"27.3":{t:"Render Props 模式",p:`&lt;Container&gt;
   { (ContainerProps)=&gt; &lt;Children {...ContainerProps}  /&gt; }
&lt;/Containe ...`,l:"articles/FontEnd/react/props/index.html#render-props-模式",a:"render-props-模式"},"27.4":{t:"组合模式",p:`如果 Container 的 Children 既有函数也有组件，这种情况应该怎么处理呢？
&lt;Container&gt;
    &lt;Children /&gt;
    { (Contai ...`,l:"articles/FontEnd/react/props/index.html#组合模式",a:"组合模式"},"27.5":{t:"操作Props 抽象Props",p:`::: tip
抽象 props 一般用于跨层级传递 props ，一般不需要具体指出 props 中某个属性，而是将 props 直接传入或者是抽离到子组件中。
:::
`,l:"articles/FontEnd/react/props/index.html#操作props-抽象props",a:"操作props-抽象props"},"27.6":{t:"混入 props",p:`::: details View The Code
function Son(props){
    console.log(props)
    return &lt;div&gt; hello,w ...`,l:"articles/FontEnd/react/props/index.html#混入-props",a:"混入-props"},"27.7":{t:"抽离Props",p:`::: details View The Code
function Son(props){
    console.log(props)
    return &lt;div&gt; hello,w ...`,l:"articles/FontEnd/react/props/index.html#抽离props",a:"抽离props"},"27.8":{t:"props 的显式注入和隐式注入",p:`显式注入
&lt;Father&gt;
    &lt;Son data='{data}' name='123'&gt;
&lt;/Father&gt;

隐式注入
function Father(p ...`,l:"articles/FontEnd/react/props/index.html#props-的显式注入和隐式注入",a:"props-的显式注入和隐式注入"},"27.9":{t:"demo",p:`::: code-group

用于表单状态管理的&lt;Form&gt; 和 &lt;FormItem&gt; 组件

&lt;Form&gt;用于管理表单状态；
&lt;FormItem&gt;用 ...`,l:"articles/FontEnd/react/props/index.html#demo",a:"demo"},"28.0":{t:"# Ref",p:"",l:"articles/FontEnd/react/ref/index.html",a:"ref"},"28.1":{t:"获取Ref的三种方式",p:`
ref是一个字符串
::: details View The Code

/* 类组件 */
class Children extends Component{  
    render=()=&g ...`,l:"articles/FontEnd/react/ref/index.html#获取ref的三种方式",a:"获取ref的三种方式"},"28.2":{t:"转发Ref(跨层级获取Ref)",p:`如果我想在父组件 获取 孙/子 组件的实例

通过回调函数将子组件的Ref作为参数
::: details View The Code

function ParentComponent(){
  c ...`,l:"articles/FontEnd/react/ref/index.html#转发ref-跨层级获取ref",a:"转发ref-跨层级获取ref"},"28.3":{t:"组合转发Ref",p:`::: details View The Code
// 表单组件
class Form extends React.Component{
    render(){
       return &l ...`,l:"articles/FontEnd/react/ref/index.html#组合转发ref",a:"组合转发ref"},"28.4":{t:"高阶组件转发",p:"如果通过高阶组件包裹一个原始类组件，就会产生一个问题，如果高阶组件 HOC 没有处理 ref ，那么由于高阶组件本身会返回一个新组件，所以当使用 HOC 包装后组件的时候，标记的 ref 会指向 HO ...",l:"articles/FontEnd/react/ref/index.html#高阶组件转发",a:"高阶组件转发"},"28.5":{t:"组件通信",p:`
类组件通信: 因为类组件有实例，所以我们可以直接获取实例然后调用实例方法来操作
函数组件通信: 对于函数组件，本身是没有实例的，所以我们要借用forwardRef(使函数组件可以接收Ref) + u ...`,l:"articles/FontEnd/react/ref/index.html#组件通信",a:"组件通信"},"28.6":{t:"函数组件数据缓存",p:`函数组件每一次 render ，函数上下文会重新执行，那么有一种情况就是
在执行一些事件方法改变数据或者保存新数据的时候，有没有必要更新视图，有没有必要把数据放到 state 中。如果视图层更新不依赖 ...`,l:"articles/FontEnd/react/ref/index.html#函数组件数据缓存",a:"函数组件数据缓存"},"29.0":{t:"# 渲染控制",p:"",l:"articles/FontEnd/react/render/index.html",a:"渲染控制"},"29.1":{t:"React 几种控制 render 方法",p:`
第一种就是从父组件直接隔断子组件的渲染，经典的就是 memo，缓存 element 对象。
父组件 render ，子组件有没有必要跟着父组件一起 render ，如果没有必要，则就需要阻断更新
: ...`,l:"articles/FontEnd/react/render/index.html#react-几种控制-render-方法",a:"react-几种控制-render-方法"},"29.2":{t:"useMemo用法",p:`::: details
const cacheSomething = useMemo(create,deps)


create：第一个参数为一个函数，函数的返回值作为缓存值，如上 demo 中把 C ...`,l:"articles/FontEnd/react/render/index.html#usememo用法",a:"usememo用法"},"29.3":{t:"useMemo原理",p:"useMemo 会记录上一次执行 create 的返回值，并把它绑定在函数组件对应的 fiber 对象上，只要组件不销毁，缓存值就一直存在，但是 deps 中如果有一项改变，就会重新执行 create ...",l:"articles/FontEnd/react/render/index.html#usememo原理",a:"usememo原理"},"29.4":{t:"pureComponent",p:`纯组件是一种发自组件本身的渲染优化策略，当开发类组件选择了继承 PureComponent ，就意味这要遵循其渲染规则。规则就是浅比较 state 和 props 是否相等。
基本使用
::: det ...`,l:"articles/FontEnd/react/render/index.html#purecomponent",a:"purecomponent"},"29.5":{t:"pureComponent原理",p:`

pureComponentPrototype有一个prototype属性，isPureReactComponent，这个属性是一个布尔值，用来标识当前组件是否是纯组件，如果是纯组件，那么在更新时， ...`,l:"articles/FontEnd/react/render/index.html#purecomponent原理",a:"purecomponent原理"},"29.6":{t:"pureComponent注意事项",p:`PureComponent可以让组件自发的做一层性能上的调优，但是父组件给是PureComponent的子组件绑定事件要小心，避免两种情况

避免使用箭头函数，不要给是PureComponent子组件 ...`,l:"articles/FontEnd/react/render/index.html#purecomponent注意事项",a:"purecomponent注意事项"},"29.7":{t:"shouldComponentUpdate",p:`有的时候把控制渲染交给React组件本身处理靠不住，那么我们便可以自定义渲染方案决定组建是否更新

使用

class Index extends React.Component {
  state  ...`,l:"articles/FontEnd/react/render/index.html#shouldcomponentupdate",a:"shouldcomponentupdate"},"29.8":{t:"React.Memo",p:`React.memo(Component,compare)
Component: 需要被包裹的组件
compare: 比较函数，用来判断是否需要更新，返回true则不更新，返回false则更新

`,l:"articles/FontEnd/react/render/index.html#react-memo",a:"react-memo"},"29.9":{t:"React.Memo的特点",p:`

memo 当二个参数 compare 不存在时，会用浅比较原则处理 props ，相当于仅比较 props 版本的 pureComponent 。


memo 同样适合类组件和函数组件。


D ...`,l:"articles/FontEnd/react/render/index.html#react-memo的特点",a:"react-memo的特点"},"29.10":{t:"打破渲染限制的方法使Memo和PureComponent失效",p:`
forceUpdate 如果更新状态使用的forceUpdate 而不是 setState 会跳过shouldComponentUpdate的判断，直接更新组件
Context 如果组件依赖于con ...`,l:"articles/FontEnd/react/render/index.html#打破渲染限制的方法使memo和purecomponent失效",a:"打破渲染限制的方法使memo和purecomponent失效"},"29.11":{t:"控制渲染的场景",p:`
大屏展示组件数据量大，渲染耗时长，可以使用React.memo局部更新
表单，React 一般会采用受控组件的模式去管理表单数据层，表单数据层完全托管于 props 或是 state ，而用户操作表 ...`,l:"articles/FontEnd/react/render/index.html#控制渲染的场景",a:"控制渲染的场景"},"31.0":{t:"context",p:"",l:"articles/FontEnd/relevance/context.html",a:"context"},"32.0":{t:"# reducer",p:`
action + state  = new state

`,l:"articles/FontEnd/relevance/reducer.html",a:"reducer"},"32.1":{t:"与state的区别",p:`state是用户触发函数来执行具体的一步一步操作，reducer是把操作整合到一起，用户触发事件名进而执行相应的处理函数
例如：用户触发添加程序, 程序了解到事件名以后去reducer中找到对应的函数 ...`,l:"articles/FontEnd/relevance/reducer.html#与state的区别",a:"与state的区别"},"32.2":{t:"命名原因",p:`reducer是根据reduce命名 ,它接收目前的结果和当前的值，然后返回下一个结果.
React中的reducer也是这样的他们都接受 当前state 和触发的事件action ,然后返回新的st ...`,l:"articles/FontEnd/relevance/reducer.html#命名原因",a:"命名原因"},"32.3":{t:" ",p:"",l:"articles/FontEnd/relevance/reducer.html#",a:""},"32.4":{t:"reduce实现reducer",p:`::: code-group
import tasksReducer from './tasksReducer.js';

let actions = [
  {type: 'added', id:  ...`,l:"articles/FontEnd/relevance/reducer.html#reduce实现reducer",a:"reduce实现reducer"},"32.5":{t:"实现useReducer",p:`通过useState保存当前状态＋action = new state
::: code-group
const App = ()=&gt;{
  const [state,dispatch] = u ...`,l:"articles/FontEnd/relevance/reducer.html#实现usereducer",a:"实现usereducer"},"32.6":{t:"实际用途",p:`useReducer是React提供的一个Hook，用于管理组件的状态（state）。它的实际用途包括：


状态复杂逻辑：当组件的状态逻辑较为复杂，涉及多个状态变化时，可以使用useReducer来 ...`,l:"articles/FontEnd/relevance/reducer.html#实际用途",a:"实际用途"},"33.0":{t:"useRef",p:"",l:"articles/FontEnd/relevance/useRef.html",a:"useref"},"34.0":{t:"base",p:"",l:"articles/FontEnd/vue/base/index.html",a:"base"},"35.0":{t:"# vue",p:"",l:"articles/FontEnd/vue/index.html",a:"vue"},"37.0":{t:"前置",p:"",l:"articles/algorithm/base/index.html",a:"前置"},"38.0":{t:"时间复杂度",p:"",l:"articles/algorithm/base/time.html",a:"时间复杂度"},"39.0":{t:"# Nest主要设计模式",p:"",l:"articles/designModel/IOCDI/index.html",a:"nest主要设计模式"},"39.1":{t:"Dependency Injection 依赖注入",p:`class UserService {
  getList(id) {
    // 获取用户的逻辑 
  }
}

class AdminService{
  getList(id){
    // ...`,l:"articles/designModel/IOCDI/index.html#dependency-injection-依赖注入",a:"dependency-injection-依赖注入"},"39.2":{t:"Inversion of Control  控制反转",p:`控制反转的本质就是降低耦合度，不再强依赖一些属性和方法。具体的实现方式是DI依赖注入
控制反转需要一个容器，这个容器接手类的控制权
`,l:"articles/designModel/IOCDI/index.html#inversion-of-control-控制反转",a:"inversion-of-control-控制反转"},"39.3":{t:"好处",p:`
解耦和模块化
更方便的依赖注入
配置集中管理

`,l:"articles/designModel/IOCDI/index.html#好处",a:"好处"},"39.4":{t:"如何控制反转",p:`控制反转需要的条件如下

需要一个管理容器  Container
容器需要拥有register方法用来管理容器的注册
容器需要有一个解析的方法 （从容器中解析已注册的依赖项并注入)
让所有的依赖项统一 ...`,l:"articles/designModel/IOCDI/index.html#如何控制反转",a:"如何控制反转"},"39.5":{t:"案例",p:`  abstract class Service {
    getList: () =&gt; void;
    putList: () =&gt; void;
  }

  class Cont ...`,l:"articles/designModel/IOCDI/index.html#案例",a:"案例"},"40.0":{t:"设计模式",p:"",l:"articles/designModel/index.html",a:"设计模式"},"41.0":{t:"<myIndex/>",p:"",l:"index.html",a:"myindex"},"42.0":{t:"# 记录和楠楠的日常生活",p:"",l:"nannan/index.html",a:"记录和楠楠的日常生活"},"43.0":{t:"# 我们的故事",p:"",l:"nannan/story/index.html",a:"我们的故事"},"44.0":{t:"# 根据空格拆分字符串",p:` const str = \`remote_addr：192.168.3.69:48512
status_code：200
content_type：
method：GET
proto：HTTP/1.1 ...`,l:"otherArticles/index.html",a:"根据空格拆分字符串"},"45.0":{t:"<!-- ---",p:`layout :  false
layout: page
&lt;team/&gt; --&gt;
`,l:"team/index.html",a:""}},n={previewLength:100,buttonLabel:"搜索",placeholder:"情输入关键词",allow:[],ignore:[]},r={INDEX_DATA:e,PREVIEW_LOOKUP:t,Options:n};export{r as default};
