const e={map:'[{"resume":["0.0"],"中间件":["1.0"],"守卫":["1.1"],"拦截器":["1.2"],"管道":["1.3"],"注入基本数据":["2.0"],"案例":["3.0","35.5"],"控制反转":["4.0"],"依赖注入":["4.1"],"nest":["5.0","5.2"],"module":["5.1","5.4"],"provider":["5.3"],"动态module":["5.6"],"hi":["6.0"],"核心概念概览":["6.1"],"重点1":["6.2"],"他代表了一个http请求的执行上下文":["7.0"],"nestjs":["8.0"],"register":["9.0"],"js":["11.0"],"项目列表":["12.0"],"高阶组件hoc":["12.1","13.0"],"两种不同的高阶组件":["13.1"],"属性代理":["13.2"],"反向继承":["13.3"],"编写hoc":["13.4"],"动态加载loading":["13.5"],"事件监控":["13.6"],"权限拦截":["13.7"],"hooks":["14.0","14.2"],"api分类":["14.1"],"useref":["14.3","29.0"],"数据更新驱动类":["14.4"],"usestate":["14.5"],"usereducer":["14.6"],"usecontext":["14.7"],"useimperativehandle":["14.8"],"react":["15.0","16.0","17.0","21.0","25.1","25.8","25.9"],"出现背景":["15.1","17.3"],"核心概念":["15.2"],"使用教程":["15.3","18.4"],"自动缓存和数据同步":["15.4"],"加载状态管理":["15.5"],"数据同步和预取":["15.6"],"自动缓存失效处理":["15.7"],"服务器状态更新":["15.8"],"更少的重复代码":["15.9"],"api":["15.10"],"总结":["15.11"],"快速上手":["16.1"],"原理分析":["16.2"],"核心api":["16.3"],"常见的状态管理模式":["17.1","18.1"],"flex":["17.2"],"架构特点":["17.4"],"jotai":["18.0","18.2"],"原子式解决了什么问题":["18.3"],"实际使用":["18.14"],"redux":["19.0"],"api介绍":["19.1"],"摘要":["19.2"],"context":["20.0","27.0"],"提供者provider用法":["20.1"],"消费者consumer用法":["20.2"],"生命周期":["22.0"],"useeffect":["22.1"],"uselayouteffect":["22.2"],"useinsertioneffect":["22.3"],"类组件生命周期在函数组件内使用effect替代方案":["22.4"],"props":["23.0","23.8"],"监听props改变":["23.1"],"render":["23.2","23.3"],"组合模式":["23.4"],"操作props":["23.5"],"混入":["23.6"],"抽离props":["23.7"],"demo":["23.9"],"ref":["24.0"],"获取ref的三种方式":["24.1"],"转发ref":["24.2"],"组合转发ref":["24.3"],"高阶组件转发":["24.4"],"组件通信":["24.5"],"函数组件数据缓存":["24.6"],"渲染优化":["25.0"],"usememo用法":["25.2"],"usememo原理":["25.3"],"purecomponent":["25.4"],"purecomponent原理":["25.5"],"purecomponent注意事项":["25.6"],"shouldcomponentupdate":["25.7"],"打破渲染限制的方法使memo和purecomponent失效":["25.10"],"控制渲染的场景":["25.11"],"reducer":["28.0"],"与state的区别":["28.1"],"命名原因":["28.2"],"reduce实现reducer":["28.4"],"实现usereducer":["28.5"],"实际用途":["28.6"],"base":["30.0"],"vue":["31.0"],"前置":["33.0"],"时间复杂度":["34.0"],"nest主要设计模式":["35.0"],"dependency":["35.1"],"inversion":["35.2"],"好处":["35.3"],"如何控制反转":["35.4"],"设计模式":["36.0"],"myindex":["37.0"],"记录和楠楠的日常生活":["38.0"],"我们的故事":["39.0"],"根据空格拆分字符串":["40.0"]},{"0":["18.14","19.1"],"1":["5.2","6.1","13.0","13.4","14.5","17.1","17.4","18.1","18.5","22.2","25.6","25.10","25.11","35.3","40.0"],"2":["5.2","13.4","18.6"],"3":["18.7","40.0"],"4":["18.8"],"5":["18.9"],"6":["18.10","20.2"],"7":["18.11"],"8":["18.12"],"9":["18.13"],"69":["40.0"],"168":["40.0"],"192":["40.0"],"200":["40.0"],"48512":["40.0"],"info":["1.0","14.8"],"存在意义":["1.0"],"处理http请求的函数":["1.0"],"他可以在请求到达控制器之前":["1.0"],"之后执行一些操作":["1.0"],"他可以是全局的也可以是局部的":["1.0"],"场景":["1.0","14.3"],"身份验证":["1.0"],"日志记录":["1.0"],"guard":["1.1"],"是一种用于保护路由的机制":["1.1"],"他可以在请求到达控制器之前或者之后执行一些操作":["1.1"],"守卫可以用于实现身份验证":["1.1"],"权限控制":["1.1"],"缓存等功能":["1.1"],"在nestjs中收尾可以是全局的也可以是局部的":["1.1"],"守卫路由":["1.1"],"execution":["1.1"],"context":["1.1","20.2"],"处理http请求和响应的函数":["1.2"],"在请求到达控制器之前之后执行一些操作":["1.2"],"拦截器可以实现日志记录":["1.2"],"错误处理":["1.2"],"数据转换":["1.2"],"在nestjs中拦截器可以是全局的也可局部":["1.2"],"管道是数据流入controller前进行的一波数据处理":["1.3"],"因为普通数据服务不是class":["2.0"],"所以要使用":["2.0"],"inject来注入":["2.0"],"typescript":["2.0","3.0","18.6","35.1","35.5"],"module":["2.0"],"providers":["2.0"],"provide":["2.0"],"app":["2.0","15.9","28.5"],"name":["2.0","16.3","23.4","25.4"],"usevalue":["2.0"],"使用普通值":["2.0"],"injectable":["2.0","3.0"],"export":["2.0","3.0","13.5","13.7","15.9","18.14","24.1"],"class":["2.0","3.0","13.3","13.5","24.1","24.3","25.4","25.6","25.7","35.1","35.5"],"authservice":["2.0"],"第三方发送短信服务":["3.0"],"根据不同配置使用不同的第三方运营商":["3.0"],"sms":["3.0"],"serivce":["3.0"],"ts":["3.0","14.3","14.5","18.14","22.1","28.4"],"appcontroller":["3.0"],"constructor":["3.0","35.1"],"private":["3.0"],"ali":["3.0"],"aliservice":["3.0"],"tencent":["3.0"],"ioc":["4.0","4.1"],"di":["4.1"],"的具体实现":["4.1"],"请求声明周期":["5.0"],"controller":["5.1","35.1"],"service的关系":["5.1"],"提供了一个模块化的方式来组织和管理您的应用程序的代码":["5.1"],"请求生命周期":["5.2"],"img":["5.2"],"java":["5.2"],"收到请求":["5.2"],"提供服务":["5.3"],"用于表示应用程序中可注入的任何东西":["5.3"],"除了服务":["5.3"],"还可以提供其他类型的对象":["5.3"],"模块是一个子程序":["5.4"],"用于定义控制器":["5.4"],"提供者或向其他模块开放提供者":["5.4"],"开放模块的api":["5.4"],"默认情况下控制器":["5.4"],"提供者在当前模块可用":["5.4"],"我是eagon":["6.0"],"模块":["6.1"],"modules":["6.1"],"nestjs":["6.2"],"提供了许多属性和方法":["7.0"],"可用于在请求的生命周期内访问":["7.0"],"接收账号密码argon2":["9.0"],"总结":["13.0"],"强化":["13.0","13.4"],"props":["13.0","13.4","14.8","23.3","23.6","25.4","25.9"],"常用的高阶组件有":["13.1"],"就是用组件包裹一层代理组件":["13.2"],"在代理组件上":["13.2"],"可以做一些":["13.2"],"对源组件的强化操作":["13.2"],"这里注意属性代理返回的是一个新组件":["13.2"],"被包裹的原始组件":["13.2"],"将在新的组件里被挂载":["13.2"],"jsx":["13.2","13.3","13.5","13.6","13.7","20.1","20.2","22.3","22.4","23.2","23.3","23.4","23.6","23.7","23.8","23.9","24.1","24.2","24.3","24.5","25.1","25.2","25.4","25.6","25.7"],"反向继承和属性代理有一定的区别":["13.3"],"在于包装后的组件继承了原始组件本身":["13.3"],"所以此时无须再去挂载业务组件":["13.3"],"index":["13.3","13.7","24.3","25.6","25.7","28.4"],"什么时候使用hoc":["13.4"],"强化props":["13.4"],"就是在原始组件的":["13.4"],"基础上":["13.4"],"加入一些其他的":["13.4"],"强化原始组件功能":["13.4"],"控制渲染":["13.4"],"hoc":["13.4","13.6","24.4"],"反向继承模式":["13.4"],"可以通过":["13.4"],"super":["13.4"],"default":["13.5","13.7","15.9","24.1"],"function":["13.5","13.6","13.7","15.9","25.1"],"dynamichoc":["13.5"],"loadrouter":["13.5"],"return":["13.5","22.1","24.3","25.1"],"content":["13.5","40.0"],"extends":["13.5","24.1","24.3","25.4","25.7"],"react":["13.5","13.7","14.8","15.9","20.2","22.0","22.3","22.4","24.3","25.4","25.7"],"component":["13.5","24.1","24.3","25.7"],"不一定非要对组件本身做些什么":["13.6"],"也可以单纯增加一些事件监听":["13.6"],"错误监控":["13.6"],"以下代码hoc":["13.6"],"只对组件内的点击事件做一个监听效果":["13.6"],"clickhoc":["13.6"],"code":["13.7","14.3","15.9","18.6","18.8","18.9","18.10","18.14","20.2","22.4","23.6","23.7","23.9","24.1","24.2","24.3","24.5","25.1","28.4","28.5","40.0"],"group":["13.7","14.3","15.9","18.14","20.2","22.4","23.9","24.5","25.1","28.4","28.5"],"通过context传递权限":["13.7"],"const":["13.7","14.5","15.9","18.14","20.1","25.2","28.5","40.0"],"permission":["13.7"],"createcontext":["13.7"],"关键词":["14.1"],"concurrent":["14.1"],"table":["14.1"],"tr":["14.1"],"th":["14.1"],"使用范围":["14.1"],"hooks":["14.1"],"details":["14.3","14.5","18.6","18.7","18.8","18.9","18.10","23.6","23.7","24.1","24.2","24.3","24.5","25.2","25.4"],"稳定引用":["14.3"],"获取dom节点":["14.3"],"获取上一次的值":["14.3"],"闭包":["14.3"],"异步访问到旧变量的问题":["14.3"],"典型的闭包循环案例":["14.3"],"每次循环调用settimeout的时候都会保存当前的作用域":["14.3"],"state":["14.5","24.6","25.4","25.7","28.5","28.6"],"setstate":["14.5"],"initialstate":["14.5"],"参数接收一个初始值":["14.5"],"返回一个数组":["14.5"],"数组的第一个元素是当前的state":["14.5"],"第二个元素是更新state的函数":["14.5"],"注意事项":["14.5"],"对于拥有许多状态更新逻辑的组件来说":["14.6"],"过于分散的事件处理程序可能会令人不知所措":["14.6"],"对于这种情况":["14.6"],"你可以将组件的所有状态更新":["14.6"],"增删改查":["14.6"],"逻辑整合到一个外部函数中":["14.6"],"这个函数叫作":["14.6"],"reducer":["14.6","19.1"],"reducer是弥补usestate在逻辑复杂情况下的缺陷":["14.6"],"它分为三个步骤":["14.6"],"作用":["14.7"],"解决了什么问题":["14.8"],"子组件通过ref抛出方法供父组件调用":["14.8"],"react函数":["14.8"],"组件":["14.8","23.9"],"父组件需要直接访问子组件的实例方法或属性的问题":["14.8"],"在":["14.8"],"中":["14.8","24.6"],"父组件通常通过":["14.8"],"向子组件传递数据和回调函数来实现组件之间的通信":["14.8"],"这种方式可以确保数据流的单向性":["14.8"],"query":["15.0"],"解决问题":["15.1"],"灵魂拷问q":["15.1"],"为什么用axios不可以":["15.1"],"为什么需要出现react":["15.1"],"querya":["15.1"],"尽管可以使用普通的":["15.1"],"axios":["15.1"],"解决普通请求代码重复":["15.2"],"tsx":["15.9","40.0"],"befor":["15.9"],"import":["15.9","18.6","18.14","28.4"],"as":["15.9"],"from":["15.9","18.14","28.4"],"存储":["15.9"],"后端返回数据":["15.9"],"zen":["15.9"],"setzen":["15.9"],"usestate":["15.9"],"加载状态":["15.9"],"isloading":["15.9","15.10"],"setisloading":["15.9"],"false":["15.9"],"是否请求成功":["15.9"],"iserror":["15.9"],"setiserror":["15.9"],"apiname":["15.10"],"are":["15.10"],"data":["15.10"],"查询返回的数据":["15.10"],"表示查询是否正在加载中":["15.10"],"router":["16.0"],"后端概念":["16.0"],"effect":["16.3","22.4"],"demo":["16.3"],"link":["16.3"],"普通链接":["16.3"],"全局存储":["17.0"],"global":["17.1","18.1"],"全局式":["17.1","18.1"],"架构":["17.2"],"解决痛点":["17.3"],"flux架构解决前端应用程序中状态管理和数据流动的复杂性问题":["17.3"],"在传统的mvc":["17.3"],"详细介绍":["17.4"],"flux架构通过引入单向数据流的概念":["17.4"],"将数据的流动变得可控和可预测":["17.4"],"它明确了数据流动的路径":["17.4"],"并将状态的修改限制在特定的流程中":["17.4"],"这样做的好处包括":["17.4"],"易于追踪和调试":["17.4"],"由于数据流是单向的":["17.4"],"引用来源":["18.0"],"原子状态管理":["18.2"],"reacthook":["18.3"],"使state的":["18.3"],"拆分":["18.3"],"和":["18.3","22.2","23.9","25.4"],"创建":["18.5"],"atom":["18.5","18.14"],"派生atom":["18.5"],"使用":["18.5","25.7"],"useatom":["18.5"],"异步派生":["18.6"],"view":["18.6","18.8","18.9","18.10","23.6","23.7","24.1","24.2","24.3","24.5"],"the":["18.6","18.8","18.9","18.10","23.6","23.7","24.1","24.2","24.3","24.5"],"函数组件内更新方式":["18.7"],"atom内更新方式":["18.8"],"异步更新atom":["18.9"],"区别于第二条异步获取":["18.9"],"异步更新不会阻塞线程":["18.9"],"渲染问题":["18.10"],"当我们点击add时":["18.10"],"发现a和b都重新渲染了":["18.10"],"但是问题来了":["18.10"],"a为什么要重新渲染呀":["18.10"],"a只是触发了更新操作":["18.10"],"provider":["18.12","20.0","20.1","20.2"],"store":["18.13","18.14"],"createstore":["18.14"],"jotai":["18.14"],"mystore":["18.14"],"countatom":["18.14"],"纯函数":["19.1"],"middleware":["19.2"],"中间件":["19.2"],"consumer":["20.0"],"themeprovider":["20.1"],"themecontext":["20.1"],"对于新版本想要获取":["20.2"],"的消费者":["20.2"],"提供了3种形式":["20.2"],"①":["20.2","23.2"],"类组件之contexttype":["20.2"],"方式":["20.2"],"v16":["20.2"],"提供了":["20.2"],"contexttype":["20.2"],"静态属性":["20.2"],"用来获取上面":["20.2"],"destory":["22.1"],"useeffect":["22.2","22.3","22.4","23.1"],"不同的地方是采用了同步执行":["22.2"],"在介绍":["22.3"],"用途之前":["22.3"],"先看一下":["22.3"],"的执行时机":["22.3"],"console":["22.3","25.1"],"log":["22.3","25.1"],"执行":["22.3"],"模块渲染后":["22.4"],"componentdidmount":["22.4"],"请求数据":["22.4"],"事件监听":["22.4"],"操纵dom":["22.4"],"切记":["22.4"],"dep":["22.4"],"这里要记住":["22.4"],"这样当前":["22.4"],"没有任何依赖项":["22.4"],"也就只有初始化执行一次":["22.4"],"模块卸载前":["22.4"],"componentwillunmount":["22.4"],"函数组件中可以用":["23.1"],"children":["23.2","23.3","23.4","24.1","25.1","25.4"],"模式":["23.2","23.3"],"container":["23.3","23.4"],"containerprops":["23.3","23.4"],"如果":["23.4"],"的":["23.4"],"既有函数也有组件":["23.4"],"这种情况应该怎么处理呢":["23.4"],"haha":["23.4"],"首先在":["23.4"],"抽象props":["23.5"],"的显式注入和隐式注入":["23.8"],"显式注入":["23.8"],"功能":["23.9"],"用于表单状态管理的":["23.9"],"form":["23.9","24.3"],"formitem":["23.9"],"用于管理表单状态":["23.9"],"用于管理":["23.9"],"input":["23.9"],"输入框组件":["23.9"],"编写的组件能够实现的功能是":["23.9"],"①form":["23.9"],"组件可以被":["23.9"],"ref":["23.9","24.4","24.5"],"获取实例":["23.9"],"然后可以调用实例方法":["23.9"],"submitform":["23.9"],"获取表单内容":["23.9"],"用于提交表单":["23.9"],"ref是一个字符串":["24.1"],"类组件":["24.1"],"render":["24.1","24.3","24.6","25.1"],"div":["24.1","24.3","25.1"],"hello":["24.1"],"world":["24.1"],"跨层级获取ref":["24.2"],"如果我想在父组件":["24.2"],"获取":["24.2"],"孙":["24.2"],"子":["24.2"],"组件的实例":["24.2"],"通过回调函数将子组件的ref作为参数":["24.2"],"表单组件":["24.3"],"如果通过高阶组件包裹一个原始类组件":["24.4"],"就会产生一个问题":["24.4"],"如果高阶组件":["24.4"],"没有处理":["24.4"],"那么由于高阶组件本身会返回一个新组件":["24.4"],"所以当使用":["24.4"],"包装后组件的时候":["24.4"],"标记的":["24.4"],"类组件通信":["24.5"],"因为类组件有实例":["24.5"],"所以我们可以直接获取实例然后调用实例方法来操作":["24.5"],"函数组件通信":["24.5"],"对于函数组件":["24.5"],"本身是没有实例的":["24.5"],"所以我们要借用forwardref":["24.5"],"使函数组件可以接收ref":["24.5"],"useimperativehandle":["24.5"],"一方面第一个参数接受父组件传递的":["24.5"],"对象":["24.5","25.1"],"另一方面第二个参数是一个函数":["24.5"],"函数返回值":["24.5"],"作为":["24.5"],"对象获取的内容":["24.5"],"向传下来的ref传递方法":["24.5"],"forwardref":["24.5"],"函数组件每一次":["24.6"],"函数上下文会重新执行":["24.6"],"那么有一种情况就是":["24.6"],"在执行一些事件方法改变数据或者保存新数据的时候":["24.6"],"有没有必要更新视图":["24.6"],"有没有必要把数据放到":["24.6"],"如果视图层更新不依赖想要改变的数据":["24.6"],"那么":["24.6"],"改变带来的更新效果就是多余的":["24.6"],"几种控制":["25.1"],"方法":["25.1"],"第一种就是从父组件直接隔断子组件的渲染":["25.1"],"经典的就是":["25.1"],"memo":["25.1","25.8","25.9"],"缓存":["25.1"],"element":["25.1"],"父组件":["25.1"],"子组件有没有必要跟着父组件一起":["25.1"],"如果没有必要":["25.1"],"则就需要阻断更新":["25.1"],"导致不必要更新的demo":["25.1"],"子组件":["25.1"],"number":["25.1"],"子组件渲染":["25.1"],"let":["25.1","28.4"],"us":["25.1"],"learn":["25.1"],"cachesomething":["25.2"],"usememo":["25.2","25.3"],"会记录上一次执行":["25.3"],"create":["25.3"],"的返回值":["25.3"],"并把它绑定在函数组件对应的":["25.3"],"fiber":["25.3"],"对象上":["25.3"],"只要组件不销毁":["25.3"],"缓存值就一直存在":["25.3"],"纯组件是一种发自组件本身的渲染优化策略":["25.4"],"当开发类组件选择了继承":["25.4"],"就意味这要遵循其渲染规则":["25.4"],"规则就是浅比较":["25.4"],"是否相等":["25.4"],"基本使用":["25.4"],"纯组件本身":["25.4"],"purecomponentprototype有一个prototype属性":["25.5"],"ispurereactcomponent":["25.5"],"这个属性是一个布尔值":["25.5"],"用来标识当前组件是否是纯组件":["25.5"],"如果是纯组件":["25.5"],"那么在更新时":["25.5"],"会先进行浅比较":["25.5"],"如果相等":["25.5"],"就不会进行更新":["25.5"],"如果不相等":["25.5"],"才会进行更新":["25.5"],"这个属性在更新组件":["25.5"],"updateclassinstance":["25.5"],"purecomponent可以让组件自发的做一层性能上的调优":["25.6"],"但是父组件给是purecomponent的子组件绑定事件要小心":["25.6"],"避免两种情况":["25.6"],"避免使用箭头函数":["25.6"],"不要给是purecomponent子组件绑定箭头函数":["25.6"],"因为父组件每一次render如果是箭头函数绑定的话":["25.6"],"都会重新声场一个箭头函数":["25.6"],"purecomponent的浅比较就会失效":["25.6"],"参数函数指针改变":["25.6"],"导致子组件每一次都会重新渲染":["25.6"],"有的时候把控制渲染交给react组件本身处理靠不住":["25.7"],"那么我们便可以自定义渲染方案决定组建是否更新":["25.7"],"memo的特点":["25.9"],"当二个参数":["25.9"],"compare":["25.9"],"不存在时":["25.9"],"会用浅比较原则处理":["25.9"],"相当于仅比较":["25.9"],"版本的":["25.9"],"purecomponent":["25.9"],"同样适合类组件和函数组件":["25.9"],"大屏展示组件数据量大":["25.11"],"渲染耗时长":["25.11"],"可以使用react":["25.11"],"action":["28.0","28.5"],"state是用户触发函数来执行具体的一步一步操作":["28.1"],"reducer是根据reduce命名":["28.2"],"js":["28.4","28.5"],"tasksreducer":["28.4"],"actions":["28.4"],"type":["28.4","40.0"],"added":["28.4"],"通过usestate保存当前状态":["28.5"],"new":["28.5"],"usereducer是react提供的一个hook":["28.6"],"用于管理组件的状态":["28.6"],"injection":["35.1"],"依赖注入":["35.1"],"userservice":["35.1"],"getlist":["35.1","35.5"],"id":["35.1"],"获取用户的逻辑":["35.1"],"this":["35.1"],"of":["35.2"],"控制反转需要的条件如下":["35.4"],"abstract":["35.5"],"service":["35.5"],"void":["35.5"],"putlist":["35.5"],"str":["40.0"],"remote":["40.0"],"addr":["40.0"],"status":["40.0"],"method":["40.0"],"get":["40.0"],"proto":["40.0"],"http":["40.0"],"layout":["41.0"]},{"0":["14.3","25.1","25.7","40.0"],"1":["14.6","18.8","22.1","24.6","25.1","25.4","28.4","35.4"],"2":["6.1","13.0","14.5","14.6","17.4","24.6","25.6","25.11","28.4"],"3":["5.2","14.6","17.4"],"4":["5.2"],"5":["5.2","14.1","40.0"],"10":["14.3","40.0"],"11":["40.0"],"14":["40.0"],"18":["25.4"],"200":["15.9"],"605":["40.0"],"9226":["40.0"],"错误处理":["1.0"],"details":["1.0","18.5","23.4"],"中间件可以执行以下任务":["1.0"],"执行任何代码操作":["1.0"],"对请求对象进行更改":["1.0"],"结束当前请求生命周期":["1.0"],"调用下一个中间件函数":["1.0"],"如果当前中间件没有":["1.0"],"手动结束生命周期":["1.0"],"执行上下文":["1.1"],"typescript":["1.1","1.2","4.1","18.5","18.7","18.8","18.9"],"n":["1.1"],"g":["1.1"],"gu":["1.1"],"xxx":["1.1"],"no":["1.1"],"spec":["1.1"],"injectable":["1.1","1.2"],"export":["1.1","1.2","20.1","25.1","25.6"],"class":["1.2","13.2","20.2","24.5","25.1"],"logginginterceptor":["1.2"],"implements":["1.2"],"nestinterceptor":["1.2"],"其中数据处理包含了对数据的转换":["1.3"],"constractor":["2.0"],"inject":["2.0","3.0"],"private":["2.0","35.5"],"appname":["2.0"],"注册类":["2.0"],"使用类将提供者注册到服务是最常用的方式":["2.0"],"autherservice":["2.0"],"以上是简写形式":["2.0"],"完整写法应该如下":["2.0"],"tencentservices":["3.0"],"smsservice":["3.0"],"base":["3.0"],"key":["3.0","23.9","35.5"],"baseconfig":["3.0"],"configtype":["3.0"],"typeof":["3.0"],"getsmsservice":["3.0"],"type":["3.0"],"string":["3.0","18.9","35.5"],"const":["3.0","13.4","13.6","18.6","18.8","18.9","20.0","20.2","23.4","24.2","24.3","25.4","35.1"],"面向对象中的设计原则":["4.0"],"用来减少计算机代码之前的耦合度":["4.0"],"在类以外的地方提供服务":["4.1"],"类内部调用的是该具体服务的抽象":["4.1"],"provider":["5.0"],"同时还允许您使用依赖注入和模块之间的依赖关系来构建更加可扩展的应用程序":["5.1"],"module是nestjs应用程序的基本构建块":["5.1"],"每个模块都有一个独立的作用域":["5.1"],"其中包含一组相关的controller":["5.1"],"全局绑定的中间件":["5.2"],"模块绑定的中间件":["5.2"],"全局守卫":["5.2"],"控制层守卫":["5.2"],"例如":["5.3"],"factory":["5.3"],"工厂":["5.3"],"配置对象":["5.3"],"连接对象等":["5.3"],"提供者使用":["5.3"],"即模块作用域":["5.4"],"若果向其他模块提供服务可以将提供者定义在export属性中":["5.4"],"其他模块需要再imports属性中引入当前模块":["5.4"],"模块是":["5.4"],"设计模式模式":["5.4"],"的":["5.4"],"多个模块共享当前模块实例":["5.4"],"今天给大家分享nest基础系列":["6.0"],"组合所有逻辑的地方":["6.1"],"我理解为di的container":["6.1"],"控制器":["6.1"],"处理https时的生命周期":["6.2"],"executioncontext是在每个请求到达控制器之前被nestjs封装产生的":["7.0"],"他的请求是将请求的上下文":["7.0"],"hash":["9.0"],"加密插入数据库":["9.0"],"可以通过":["13.0"],"hoc":["13.0","13.2"],"向原始组件混入一些状态":["13.0"],"属性代理":["13.1"],"function":["13.2","20.1","22.4","23.3","23.6","23.7","24.2","25.5","25.9"],"wrapcomponent":["13.2"],"return":["13.2","13.3","13.6","22.4","23.6","24.2","25.4","28.5"],"advance":["13.2"],"extends":["13.2","13.3","20.2","24.5","25.1","25.6"],"react":["13.2","13.3","13.4","15.1","18.6","23.9","24.1","24.5","25.5","25.6","25.11"],"component":["13.2","13.3","13.6","20.2","24.5","25.1","25.6"],"state":["13.2","13.5","25.1","28.0"],"render":["13.3","13.4","25.4","25.6"],"div":["13.3","23.4","28.5"],"hello":["13.3"],"world":["13.3"],"得到":["13.4"],"之后的内容":["13.4"],"利用这一点":["13.4"],"可以做渲染劫持":["13.4"],"更有甚者可以修改":["13.4"],"之后的":["13.4"],"element":["13.4"],"对象":["13.4"],"code":["13.4","18.5","18.7","23.4"],"group":["13.4"],"jsx":["13.4","25.5","25.8","25.9"],"null":["13.5","13.6","20.2","24.2"],"componentdidmount":["13.5","24.1","24.3"],"if":["13.5","15.9","25.7"],"this":["13.5","24.1","24.3","25.1","25.4"],"then":["13.5","13.7","15.9"],"module":["13.5"],"wrap":["13.6"],"props":["13.6","23.1","23.2","23.4","23.7","24.3"],"dom":["13.6","22.2"],"useref":["13.6","24.2","24.5","24.6"],"rootpermission":["13.7"],"setrootpermission":["13.7"],"usestate":["13.7","24.5"],"useeffect":["13.7","24.2","24.5"],"获取权限列表":["13.7"],"getrootpermission":["13.7"],"res":["13.7"],"data":["13.7","23.8"],"as":["13.7"],"具体功能":["14.1"],"td":["14.1"],"rowspan":["14.1"],"数据更新驱动":["14.1"],"因为var不会新建作用域":["14.3"],"所以所有的settimeout都是共享一个作用域":["14.3"],"当for循环同步任务执行完毕后开始执行settimeout此时因为循环完成i的值已经为10":["14.3"],"并且所有的settimout共享一个作用域":["14.3"],"所以打印出来的结果都是10":["14.3"],"for":["14.3"],"var":["14.3"],"i":["14.3"],"在函数组件":["14.5"],"一次执行上下文中":["14.5"],"的值是":["14.5"],"固定不变的":["14.5"],"如果两次":["14.5"],"dispatchaction":["14.5"],"传入":["14.5"],"相同的":["14.5"],"值":["14.5"],"那么组件就":["14.5"],"将设置状态的逻辑":["14.6"],"修改成dispatch":["14.6"],"的一个":["14.6"],"action":["14.6"],"编写":["14.6"],"一个":["14.6"],"函数":["14.6"],"传递数据":["14.7"],"但有时候父组件需要直接访问子组件的方法":["14.8"],"例如触发子组件的某个功能或获取子组件的状态":["14.8"],"传统的解决方案是使用":["14.8"],"ref":["14.8","24.1"],"来引用子组件的实例":["14.8"],"然后通过":["14.8"],"current":["14.8","24.3"],"来访问子组件的方法或属性":["14.8"],"但是":["14.8","22.4","25.3"],"这种方式需要手动编写一些额外的代码":["14.8"],"不够直观和方便":["14.8"],"的出现解决了这个问题":["14.8"],"或其他数据获取库来处理数据请求":["15.1"],"但在某些情况下":["15.1"],"使用":["15.1"],"query":["15.1"],"可以带来更多的好处和便利性":["15.1"],"自动缓存和数据同步":["15.1"],"后期维护困难":["15.2"],"后端返回的错误数据":["15.9"],"errormessage":["15.9"],"seterrormessage":["15.9"],"fetchdata":["15.9"],"开始获取数据":["15.9"],"将isloading置为true":["15.9"],"true":["15.9","15.10"],"fetch":["15.9"],"https":["15.9"],"api":["15.9"],"github":["15.9"],"com":["15.9"],"async":["15.9"],"response":["15.9"],"如果请求返回status不为200":["15.9"],"则抛出后端错误":["15.9"],"status":["15.9"],"message":["15.9"],"await":["15.9"],"如果数据正在加载":["15.10"],"该属性为":["15.10"],"否则为":["15.10"],"false":["15.10","18.14","41.0"],"iserror":["15.10"],"表示查询是否遇到了错误":["15.10"],"发送url请求到服务器端":["16.0"],"server会通过不同的地址返回不同的页面":["16.0"],"为什么需要路由":["16.0"],"不会触发刷新":["16.3"],"to":["16.3","18.14"],"navlink":["16.3"],"类似link":["16.3"],"状态管理":["17.0"],"也被称作单一数据源":["17.1","18.1"],"将所有的数据放到一个大对象中":["17.1","18.1"],"关键词":["17.1","18.1"],"model":["17.3"],"view":["17.3","18.5","18.7","23.4"],"controller":["17.3"],"模式中":["17.3"],"数据的变化路径清晰可见":["17.4"],"可以更轻松地追踪数据的流动和变化过程":["17.4"],"更好的组件通信":["17.4"],"flux架构提供了明确的机制来处理组件之间的通信和状态共享":["17.4"],"使得组件间的交互更加可控和灵活":["17.4"],"状态的集中管理":["17.4"],"flux将应用程序的状态集中存储在存储器":["17.4"],"store":["17.4"],"ryun":["18.0"],"逻辑共享":["18.3"],"变得更容易":["18.3"],"但usestate":["18.3"],"the":["18.5","18.7","23.4"],"import":["18.5","23.9","24.5","25.9"],"atom":["18.6","18.8"],"useatom":["18.6"],"from":["18.6","23.9","24.5","25.9"],"jotai":["18.6"],"fc":["18.6"],"valueatom":["18.8"],"mockdata":["18.9"],"new":["18.9","35.1"],"promise":["18.9"],"r":["18.9"],"settimeout":["18.9"],"并不需要重新渲染呀":["18.10"],"这是因为":["18.10"],"如果使用useatom":["18.10"],"即使你不引入它的value值":["18.10"],"但它由useatomvalue包裹":["18.10"],"当更新时":["18.10"],"useatomvalue会触发订阅事件":["18.10"],"从而触发渲染":["18.10"],"如果不理解可以阅读":["18.10"],"recoil原理":["18.10"],"理解":["18.10"],"解决渲染问题":["18.11"],"useatomvalue":["18.11"],"正常情况下":["18.12"],"无需用provider包裹组件":["18.12"],"createstore":["18.13"],"export出去":["18.13"],"statusatom":["18.14"],"监听发生变化":["18.14"],"sub":["18.14"],"console":["18.14","23.6","23.7","24.1","24.2","25.4","25.9"],"log":["18.14","23.6","23.7","24.1","24.2","25.4","25.9"],"value":["18.14","20.2"],"is":["18.14"],"changed":["18.14"],"get":["18.14"],"set":["18.14"],"接收两个参数":["19.1"],"一个是state":["19.1"],"一个是action":["19.1"],"中间件用于增强":["19.2"],"dispatch":["19.2","28.5"],"功能":["19.2"],"themecontext":["20.0","20.2"],"提供者":["20.1"],"default":["20.1","25.1","25.6"],"providerdemo":["20.1"],"提供的":["20.2"],"属性":["20.2"],"这里注意的是":["20.2"],"不是上述老版的contexttypes":["20.2"],"createcontext":["20.2"],"类组件":["20.2"],"consumerdemo":["20.2"],"static":["20.2"],"hooks也提供了":["22.0"],"dep":["22.1"],"第一个参数callback":["22.1"],"返回销毁函数":["22.1"],"下次执行useeffect会首先执行这个销毁函数":["22.1"],"首先":["22.2"],"是在":["22.2"],"更新之后":["22.2"],"浏览器绘制之前":["22.2"],"uselayouteffect":["22.3"],"打印":["22.3"],"增加定时器":["22.4"],"延时器":["22.4"],"解除事件监听器":["22.4"],"清除定时器":["22.4"],"模块组件props更新":["22.4"],"代替":["22.4"],"componentwillreceiveprops":["22.4"],"着实有点牵强":["22.4"],"首先因为二者的执行阶段根本不同":["22.4"],"一个是在render阶段":["22.4"],"一个是在commit阶段":["22.4"],"其次":["22.4"],"会初始化执行一次":["22.4"],"只有组件更新":["22.4"],"来作为":["23.1"],"插槽组件":["23.2"],"container":["23.2","35.5"],"是container":["23.3"],"提供的本质是":["23.3"],"里打印":["23.4"],"看看是什么":["23.4"],"im":["23.4"],"此时需要用到一个api":["23.4"],"isvalidelement":["23.4"],"来判断当前children的值是elementdom还是函数":["23.4"],"tip":["23.5","24.6"],"抽象":["23.5"],"son":["23.6","23.7","23.8"],"father":["23.8","25.6"],"resetform":["23.9"],"方法用于重置表单":["23.9"],"②form组件自动过滤掉除了formitem之外的其他react元素":["23.9"],"③formitem":["23.9"],"中":["23.9"],"name":["23.9"],"属性作为表单提交时候的":["23.9"],"还有展示的":["23.9"],"label":["23.9"],"④":["23.9"],"可以自动收集":["23.9"],"表单的值":["23.9"],"useimperativehandle":["23.9"],"index":["24.1","25.1"],"refs":["24.1"],"currentdom":["24.1"],"字符串模式获取元素或组件":["24.1"],"parentcomponent":["24.2"],"childref":["24.2"],"childrencomponent":["24.2"],"setref":["24.2"],"组件":["24.3"],"forwardref":["24.3","24.4"],"会指向":["24.4"],"返回的组件":["24.4"],"而并不是":["24.4"],"包裹的原始类组件":["24.4"],"为了解决这个问题":["24.4"],"可以对":["24.4"],"做一层处理":["24.4"],"父通信子":["24.5"],"直接传递pros":["24.5"],"子通信父":["24.5"],"直接让父ref获取实例":["24.5"],"得到实例方法":["24.5"],"父调用子实例方法用来修改子组件状态":["24.5"],"yuqingcomp":["24.5"],"这时候更新无疑是一种性能上的浪费":["24.6"],"会创建出一个原始的ref对象":["24.6"],"只要组件不销毁则这个对象一直存在":["24.6"],"不影响视图变化的不要放到state中":["24.6"],"因为每次更新state都会重新渲染组件":["24.6"],"可以通过useref来缓存":["24.6"],"因为useref不会引起组件重新渲染":["24.6"],"第一个能够直接修改数据":["24.6"],"不会造成函数组件冗余的更新作用":["24.6"],"第二个":["24.6"],"numbera":["25.1"],"numberb":["25.1"],"button":["25.1","28.5"],"onclick":["25.1","28.5"],"setstate":["25.1","25.4"],"create":["25.2"],"deps":["25.2","25.3"],"第一个参数为一个函数":["25.2"],"函数的返回值作为缓存值":["25.2"],"如上":["25.2"],"中如果有一项改变":["25.3"],"就会重新执行":["25.3"],"返回值作为新的值记录到":["25.3"],"usememo应用场景":["25.3"],"alien":["25.4"],"age":["25.4"],"obj":["25.4"],"number":["25.4"],"changeobjnumber":["25.4"],"组件渲染":["25.4"],"方法中使用的":["25.5"],"这个函数在更新组件的时候被调用":["25.5"],"在这个函数内部":["25.5"],"有一个专门负责检查是否更新的函数":["25.5"],"checkshouldcomponentupdate":["25.5"],"reconciler":["25.5"],"reactfiberclasscomponent":["25.5"],"js":["25.5"],"purecomponent":["25.6"],"callback":["25.6"],"purecomponent的父组件是函数组件的情况":["25.6"],"statenuma":["25.7"],"statenumb":["25.7"],"newprops":["25.7"],"newstate":["25.7"],"newcontext":["25.7"],"demo":["25.9"],"当父组件传递的number更改且大于5时":["25.9"],"更新组件":["25.9"],"children":["25.9"],"forceupdate":["25.10"],"如果更新状态使用的forceupdate":["25.10"],"memo局部更新":["25.11"],"表单":["25.11"],"reducer是把操作整合到一起":["28.1"],"它接收目前的结果和当前的值":["28.2"],"id":["28.4"],"text":["28.4"],"参观卡夫卡博物馆":["28.4"],"看木偶戏":["28.4"],"deleted":["28.4"],"usereducer":["28.5"],"reducer":["28.5"],"initialstate":["28.5"],"它的实际用途包括":["28.6"],"状态复杂逻辑":["28.6"],"当组件的状态逻辑较为复杂":["28.6"],"涉及多个状态变化时":["28.6"],"service":["35.1"],"read":["35.1"],"处理用户数据的逻辑":["35.1"],"result":["35.1"],"control":["35.2"],"解耦和模块化":["35.3"],"创建一个变量存贮依赖项":["35.5"],"dependencies":["35.5"],"host":["40.0"],"header":["40.0"],"user":["40.0"],"agent":["40.0"],"mozilla":["40.0"],"macintosh":["40.0"],"intel":["40.0"],"mac":["40.0"],"os":["40.0"],"x":["40.0"],"applewebkit":["40.0"]},{"1":["1.0","17.3","18.7","18.9","19.1","23.3","23.9"],"2":["17.1","18.1","18.14","22.1","35.3"],"3":["6.1","14.5","28.4"],"4":["17.4"],"6":["5.2"],"7":["5.2"],"8":["5.2"],"12":["40.0"],"15":["40.0"],"123":["23.8"],"200":["13.7"],"1000":["14.3"],"3000":["18.9"],"必须使用next":["1.0"],"方法将控制权传递给下一个中间件函数":["1.0"],"否则请求将被挂起":["1.0"],"定义中间件":["1.0"],"code":["1.0","14.6","24.4","35.1"],"group":["1.0","14.6"],"typescript":["1.0","5.4","18.10"],"index":["1.0","13.4"],"ts":["1.0","2.0","14.6"],"class":["1.1","4.1","13.4"],"authgurad":["1.1"],"implements":["1.1"],"canactive":["1.1"],"canactivate":["1.1"],"contenxt":["1.1"],"executioncontext":["1.1","1.2"],"boolean":["1.1"],"promise":["1.1","18.6"],"observable":["1.1"],"intercept":["1.2"],"context":["1.2"],"next":["1.2"],"callhandler":["1.2"],"console":["1.2","13.6","14.3","22.4"],"log":["1.2","13.6","14.3","22.4"],"验证":["1.3"],"provider":["2.0","5.1","13.7","18.3"],"useclass":["2.0"],"动态注册":["2.0"],"下面实现根据不同的环境创建不同的服务":["2.0"],"首先安装":["2.0"],"dotenv":["2.0"],"扩展包":["2.0"],"用来读取":["2.0"],"env环境变量":["2.0"],"然后创建两个服务":["2.0"],"service":["2.0","3.0","6.1"],"与":["2.0"],"b":["2.0"],"tencnetservice":["3.0"],"if":["3.0","13.4","25.5"],"return":["3.0","13.4","13.7","15.9","23.7","24.5","25.5","25.7","25.9","35.1"],"privider":["3.0"],"curenv":["3.0"],"this":["3.0","13.2","13.4","20.2","24.2","24.5","25.7","35.5"],"config":["3.0"],"get":["3.0","18.8"],"其根本思想是":["4.0"],"借助于第三方":["4.0"],"abstrct":["4.1"],"phone":["4.1"],"playgame":["4.1"],"动态provider":["5.0"],"asynprovider":["5.0"],"service和其他提供者":["5.1"],"module的作用是将应用程序拆分为更小的可重用部分":["5.1"],"以便更好的组织代码和管理依赖关系":["5.1"],"路由守卫":["5.2"],"全局拦截器":["5.2"],"控制器之前":["5.2"],"injectable":["5.3"],"装饰器定义":["5.3"],"这样系统会分析":["5.3"],"constructor":["5.3"],"进行依赖注入":["5.3"],"模块提供者也是单例":["5.4"],"所以模块被多个其他模块使用":["5.4"],"那该模块的provider也是共享的":["5.4"],"导入其他模块":["5.4"],"nestjs核心基础概念":["6.0"],"controller处理请求":["6.1"],"服务":["6.1"],"传递给控制器":["7.0"],"拦截器":["7.0"],"管道":["7.0"],"login":["9.0"],"渲染劫持":["13.0"],"可以利用":["13.0","25.3"],"动态挂载原始组件":["13.0"],"和":["13.1","35.1"],"name":["13.2","23.8"],"alien":["13.2"],"render":["13.2","13.5","20.2","24.5","25.3"],"props":["13.2","22.4","23.5","24.5","25.7","25.11"],"优点":["13.2"],"function":["13.3","23.4","23.9","24.4","25.6"],"hoc":["13.3"],"wrapcomponent":["13.3","13.4"],"extends":["13.4"],"visible":["13.4"],"else":["13.4"],"div":["13.4","23.6","23.7","24.5","25.4","25.9"],"暂无数据":["13.4"],"动态加载":["13.5"],"组件":["13.5"],"setstate":["13.5","24.5","25.10"],"const":["13.5","14.6","18.7","23.9","25.9","28.4"],"useeffect":["13.6","24.6"],"handerclick":["13.6"],"发生点击事件":["13.6"],"current":["13.6"],"addeventlistener":["13.6"],"any":["13.7","35.5"],"doclist":["13.7"],"taglist":["13.7"],"value":["13.7"],"rootrouter":["13.7"],"usestate":["14.1","20.1","23.9"],"数据驱动更新":["14.1"],"usereducer":["14.1"],"focus":["14.3","35.1"],"settimeout":["14.3","18.6"],"结果都是10":["14.3"],"let":["14.3"],"在每次循环的时候都会新建一个作用域":["14.3"],"所以当每次循环的时候settimout被分配到异步队列时都会保存当前的作用域i的值":["14.3"],"而不是所有的settimeout共享一个作用域":["14.3"],"不会更新":["14.5"],"当触发":["14.5"],"在":["14.5"],"当前执行上下文中获取不到最新的state":["14.5"],"只有再下一次组件":["14.5"],"rerender":["14.5"],"中才能获取到":["14.5"],"案例":["14.5"],"此时点击按钮":["14.5"],"log打印出来的值并不是更改过后的number":["14.5"],"在你的组件中":["14.6"],"使用":["14.6","14.8"],"参数":["14.6"],"state":["14.6","24.5"],"dispatch":["14.6"],"避免props层层传递":["14.7"],"它允许子组件通过自定义的方式向父组件暴露自己的实例方法或属性":["14.8"],"父组件可以通过":["14.8"],"直接访问子组件的这些方法或属性":["14.8"],"而无需手动编写额外的代码":["14.8"],"父组件可以更直接地与子组件进行交互":["14.8"],"提供了更灵活的组件通信方式":["14.8"],"它使得父组件能够以更直观的方式调用子组件的方法":["14.8"],"从而简化了组件之间的通信逻辑":["14.8"],"需要注意的是":["14.8"],"自带数据缓存和自动刷新功能":["15.1"],"它会自动缓存数据并定期刷新以保持数据的最新状态":["15.1"],"这减少了手动管理缓存的复杂性":["15.1"],"加载状态管理":["15.1"],"query内置状态管理":["15.1"],"你可以不用再写isloading":["15.1"],"无数据缓存":["15.2"],"json":["15.9"],"throw":["15.9"],"new":["15.9","18.6","28.0"],"error":["15.9","15.10"],"text":["15.9"],"string":["15.9","18.6"],"请求完成将isloading置为false":["15.9"],"接口请求成功":["15.9"],"将iserror置为false":["15.9"],"存储后端返回的数据":["15.9"],"catch":["15.9"],"接口请求错误":["15.9"],"将iserror置为true":["15.9"],"存储后端返回的错误数据":["15.9"],"如果查询出现错误":["15.10"],"单页应用需要路由切换":["16.0"],"通过url可以定位到页面":["16.0"],"但是会添加当前选中状态":["16.3"],"home":["16.3"],"activeclassname":["16.3"],"combinereducers":["17.1","18.1"],"multiple":["17.1","18.1"],"应用程序的状态分散在多个视图和控制器之间":["17.3"],"导致数据流动难以追踪和管理":["17.3"],"这样的架构往往会导致以下问题":["17.3"],"中":["17.4"],"使得状态的修改和管理更加一致和可控":["17.4"],"提升应用程序的可维护性和可扩展性":["17.4"],"flux架构的职责分离和分层结构使得应用程序的各个模块解耦":["17.4"],"提高了代码的可复用性和可测试性":["17.4"],"便于应用程序的扩展和维护":["17.4"],"人话":["17.4"],"数据单向易于追踪更改来源":["17.4"],"usecontext对于多个store仍需要维护多个context":["18.3"],"因为当context改变":["18.3"],"所有消费该context的组件都会重新渲染即使是组件仅用到了":["18.3"],"context的一部分":["18.3"],"from":["18.5","18.10","25.1"],"jotai":["18.5"],"fc":["18.5","18.10"],"mockdata":["18.6"],"r":["18.6"],"mock":["18.6","18.9"],"data":["18.6","18.9","35.1"],"valueatom":["18.7","18.9"],"atom":["18.7","18.9","18.10"],"addnumberatom":["18.8"],"ge":["18.8"],"a组件使用即订阅":["18.10"],"atom原子更新触发订阅事件从而更新":["18.10"],"解决办法":["18.10"],"参考7":["18.10"],"import":["18.10","25.1"],"react":["18.10","18.14","20.0","20.1"],"usesetatom":["18.11"],"如果有的组件只需要监听状态的变化值":["18.11"],"但如果需要控制某些组件的状态不发生更新":["18.12"],"可以用provider包裹":["18.12"],"使用jotai的provider提供给app":["18.13"],"其中":["18.13"],"default":["18.14","35.1"],"main":["18.14"],"reactdom":["18.14"],"返回一个新的state":["19.1"],"createstore":["19.1"],"返回一个增强后的":["19.2"],"createcontext":["20.0"],"null":["20.0"],"contextvalue":["20.1"],"setcontextvalue":["20.1"],"color":["20.1","20.2"],"border":["20.2"],"settheme":["20.2"],"background":["20.2"],"函数组件usecontext方式":["20.2"],"既然类组件都可以快捷获取":["20.2"],"了":["20.2"],"那么函数组件也应该研究一下如何快速获取":["20.2"],"吧":["20.2"],"于是乎":["20.2"],"api":["22.0"],"用于弥补函数组件没有生命周期的缺陷":["22.0"],"销毁定时器":["22.1"],"订阅等以防资源泄露":["22.1"],"第二个参数为依赖项":["22.1"],"依赖项发生变化则执行callback":["22.1"],"这样可以方便修改":["22.2"],"获取":["22.2"],"信息":["22.2"],"本质上是解决":["22.3"],"css":["22.3"],"in":["22.3"],"js":["22.3","35.1"],"产生的重绘问题":["22.3"],"style":["22.3"],"components库为例":["22.3"],"tip":["22.3"],"component":["22.3","25.8"],"你可以使用es6的标签模板字符串语法":["22.3"],"tagged":["22.3"],"变化的时候才会执行":["22.4"],"props变化":["22.4"],"模块更新后":["22.4"],"componentdidupdate":["22.4"],"组件更新完成":["22.4"],"没有":["22.4"],"依赖项":["22.4","24.6"],"注意此时useeffect没有第二个参数":["22.4"],"没有第二个参数":["22.4"],"那么每一次执行函数组件":["22.4"],"都会执行该":["22.4"],"改变后的监听函数":["23.1"],"不过有一点值得注意":["23.1"],"上述可以在":["23.2"],"组件中":["23.2"],"通过":["23.2"],"reutrn":["23.3"],"这种方式作用是":["23.3"],"根据需要控制":["23.3"],"hello":["23.4","23.6","23.7"],"my":["23.4"],"is":["23.4"],"mes":["23.4"],"一般用于跨层级传递":["23.5"],"world":["23.6","23.7"],"father":["23.6"],"隐式注入":["23.8"],"cloneelement":["23.9"],"children":["23.9","25.2"],"forwardref":["23.9"],"可接收父组件传递过来的ref确定具体渲染的dom":["23.9"],"myform":["23.9"],"可使父组件直接访问抛出方法":["23.9"],"a":["23.9"],"currentcominstance":["24.1"],"ref是一个函数":["24.1"],"node":["24.2"],"span":["24.2"],"ref":["24.2","24.3","24.6"],"通过forwardref转发":["24.2"],"newfahter组件是为了转发ref的中间组件":["24.2"],"给form组件实例":["24.3"],"绑定给":["24.3"],"form属性":["24.3"],"给index组件实例":["24.3"],"index属性":["24.3"],"button":["24.3","25.4"],"给button":["24.3"],"dom":["24.3"],"元素":["24.3"],"高阶组件把组件作为参数":["24.4"],"我们想获取的ref其实是这个参数的实例":["24.4"],"如果不使用forwardref转发一下那么最终获取到的组件就是hoc返回的wrap组件":["24.4"],"但是我们需要的事传递进hoc被包裹的组件":["24.4"],"forwardref的意义是可以让开发着手动控制ref的指向":["24.4"],"details":["24.4"],"view":["24.4"],"the":["24.4"],"jsx":["24.4"],"togjsmsg":["24.5"],"togyqmsg":["24.5"],"调用父组件传递过来的修改函数":["24.5"],"togjs":["24.5"],"提供实例方法供父组件调用":["24.5"],"toyq":["24.5"],"msg":["24.5","35.1"],"gjs":["24.5"],"say":["24.5"],"保存数据":["24.6"],"如果有":["24.6"],"usememo":["24.6"],"引用":["24.6"],"对象中的数据":["24.6"],"无须将":["24.6"],"对象添加成":["24.6"],"dep":["24.6"],"因为":["24.6"],"改变numbera":["25.1"],"改变numberb":["25.1"],"children只依赖a":["25.1"],"当b更新后会触发组件整体更新":["25.1"],"此时就需要单独判断children是否需要更新":["25.1"],"根据修改的值是不是a判断":["25.1"],"优化":["25.1"],"demo":["25.2"],"中把":["25.2"],"对应的":["25.2"],"element":["25.2","25.3"],"可以缓存":["25.3"],"对象":["25.3"],"从而达到按条件渲染组件":["25.3"],"优化性能的作用":["25.3"],"如果组件中不期望每次":["25.3"],"都重新计算一些值":["25.3"],"组件本身改变state":["25.4"],"onclick":["25.4"],"state相同情况":["25.4"],"typeof":["25.5"],"instance":["25.5"],"shouldcomponentupdate":["25.5"],"newprops":["25.5"],"newstate":["25.5"],"nextcontext":["25.5"],"逻辑":["25.5"],"绑定函数要用usecallback或者usememo处理":["25.6"],"就是再用class":["25.6"],"组件开发项目的时候":["25.6"],"如果父组件是函数":["25.6"],"子组件是purecomponent":["25.6"],"那么绑定函数要小心":["25.6"],"因为函数组件每一次执行":["25.6"],"如果不处理":["25.6"],"还会声明一个新的函数":["25.6"],"所以purecomponent对比同样会失效":["25.6"],"propsnuma":["25.7"],"true":["25.7"],"只有当":["25.7"],"子组件渲染":["25.9"],"number":["25.9"],"child":["25.9"],"prevprops":["25.9"],"nextprops":["25.9"],"而不是":["25.10"],"一般会采用受控组件的模式去管理表单数据层":["25.11"],"表单数据层完全托管于":["25.11"],"或是":["25.11"],"用户触发事件名进而执行相应的处理函数":["28.1"],"例如":["28.1"],"然后返回下一个结果":["28.2"],"打卡列侬墙":["28.4"],"finalstate":["28.4"],"reduce":["28.4"],"output":["28.4"],"document":["28.4"],"getelementbyid":["28.4"],"type":["28.5"],"add":["28.5"],"message":["28.5"],"添加":["28.5"],"可以使用usereducer来更好地组织和管理状态的变化逻辑":["28.6"],"替代usestate":["28.6"],"在一些情况下":["28.6"],"使用usereducer可以替代多个独立的usestate":["28.6"],"export":["35.1"],"focused":["35.1"],"此时controller":["35.1"],"存在了强耦合的关联":["35.1"],"控制反转":["35.2"],"需要一个管理容器":["35.4"],"container":["35.4"],"注册方法":["35.5"],"register":["35.5"],"dependency":["35.5"],"khtml":["40.0"],"like":["40.0"],"gecko":["40.0"],"version":["40.0"],"safari":["40.0"],"15accept":["40.0"],"encoding":["40.0"],"gzipbody":["40.0"],"url":["40.0"]},{"0":["18.10","22.4"],"1":["13.2","18.6"],"2":["23.3","35.4"],"3":["13.0"],"4":["6.1"],"5":["25.9"],"8":["20.2"],"9":["5.2"],"10":["5.2"],"3000":["18.6"],"中间件实例代码":["1.0"],"injectable":["1.0"],"export":["1.0","13.3","24.5","25.9","28.4"],"class":["1.0","24.4","25.9"],"loggermiddleware":["1.0"],"implements":["1.0"],"nestmiddleware":["1.0"],"use":["1.0"],"req":["1.0"],"const":["1.1","1.2","18.5","18.10","22.4","23.6","23.7","24.4","24.5","24.6","25.6"],"request":["1.1"],"switchtohttp":["1.1"],"getrequest":["1.1"],"return":["1.1","1.2","20.1","23.4","25.6"],"validaterequest":["1.1"],"function":["1.1","23.8","24.5","28.4"],"before":["1.2"],"now":["1.2"],"date":["1.2"],"他可以在控制器之前或之后对数据进行预处理":["1.3"],"import":["2.0","13.5"],"config":["2.0"],"from":["2.0"],"读取":["2.0"],"env":["2.0"],"到":["2.0"],"process":["2.0"],"环境变量中":["2.0"],"path":["2.0"],"join":["2.0"],"system":["3.0"],"provider":["3.0","18.14"],"send":["3.0"],"getsmsprovider":["3.0"],"使用":["3.0","20.2"],"nest":["3.0"],"实现具有依赖关系的对象之间的解耦":["4.0"],"第三方举例":["4.0"],"name":["4.1"],"string":["4.1"],"module":["5.0"],"controller提供一个路由处理器":["5.1"],"他可以将http请求映射到响应的处理器方法上":["5.1"],"并将处理器方法的结果作为http响应返回给client":["5.1"],"controller是处理":["5.1"],"控制器层拦截器":["5.2"],"路由拦截器":["5.2"],"全局管道":["5.2"],"提供者在模块的":["5.3"],"providers":["5.3"],"属性中定义":["5.3"],"用于注册到服务容器中":["5.3"],"用于被其他类依赖注入":["5.3"],"提供者可以在自身的constructor构造函数中依赖注入其他服务提供者":["5.3"],"imports":["5.4"],"jwtmodule":["5.4"],"registerasync":["5.4"],"configmodule":["5.4"],"inject":["5.4"],"configservice":["5.4"],"愿我们共同进步":["6.0"],"操作数据库以及处理所有逻辑的地方":["6.1"],"管道":["6.1"],"守卫等各个部分":["7.0"],"以便他们可以对请求进行处理和转换":["7.0"],"登录接收账号密码":["9.0"],"argon2":["9.0"],"还可以先获取原始组件的渲染树":["13.0"],"进行可控性修改":["13.0"],"可以配合":["13.0"],"反向继承":["13.1"],"属性代理可以和业务组件低耦合":["13.2"],"零耦合":["13.2"],"对于条件渲染和":["13.2"],"属性增强":["13.2"],"只负责控制子组件渲染和传递额外的":["13.2"],"就可以了":["13.2"],"所以无须知道":["13.2"],"直接继承需要包装的组件":["13.3"],"default":["13.3","24.5","25.9","28.4"],"优点":["13.3"],"①":["13.3"],"控制渲染树":["13.4"],"component":["13.4","24.4"],"ul":["13.4"],"li":["13.4"],"vue":["13.4"],"props":["13.5","25.1"],"loading":["13.5"],"index":["13.5","18.14"],"asyncrouter":["13.5"],"pages":["13.5"],"click":["13.6"],"removeeventlistener":["13.6"],"编写hoc":["13.7"],"没有权限":["13.7"],"nopermission":["13.7"],"div":["13.7","15.9","20.1"],"您暂时没有权限":["13.7"],"请联系管理员开通权限":["13.7"],"permissionhoc":["13.7"],"订阅状态":["14.1"],"创建reducer":["14.1"],"更新试图":["14.1"],"usesyncexternalstore":["14.1"],"订阅外部数据源触发更新":["14.1"],"而是更改前的值":["14.5"],"这意味着log时更改未发生":["14.5"],"br":["14.5"],"原因":["14.5"],"setnumber是异步的":["14.5"],"触发handleclick时":["14.5"],"任务线程会先执行同步再执行异步":["14.5"],"所以log打印的是更改前的值":["14.5"],"外部log可以获取到最新的值的原因是":["14.5"],"在执行完同步的log后执行异步setnumber":["14.5"],"异步setnumber触发重新渲染":["14.5"],"重新执行index函数":["14.5"],"initstate":["14.6"],"实际使用":["14.6"],"type":["14.6","24.5","24.6"],"导致代码冗余":["14.7"],"应该与":["14.8"],"forwardref":["14.8"],"一起使用":["14.8"],"以便将子组件的引用传递给父组件":["14.8"],"总结来说":["14.8"],"解决了在":["14.8"],"组件中":["14.8"],"父组件需要直接访问子组件的实例方法或属性时":["14.8"],"通过更简洁":["14.8"],"直观的方式实现组件之间的通信的问题":["14.8"],"code":["14.8"],"group":["14.8"],"isfetching等状态了":["15.1"],"它会自动管理数据加载状态":["15.1"],"数据同步和预取":["15.1"],"支持数据预取和自动同步":["15.1"],"提前获取数据并在后台刷新":["15.1"],"以保持数据最新":["15.1"],"无数据同步":["15.2"],"useeffect":["15.9"],"初始化请求数据":["15.9"],"h1":["15.9"],"p":["15.9"],"加载中":["15.9"],"button":["15.9","24.5"],"onclick":["15.9","24.5"],"重试":["15.9"],"刷新":["15.9"],"after":["15.9"],"该属性将包含错误信息":["15.10"],"通常是一个错误对象":["15.10"],"包含有关查询错误的详细信息":["15.10"],"status":["15.10"],"表示查询的状态":["15.10"],"用于指示加载中":["15.10"],"更有语义的组织资源":["16.0"],"三种路由的实现方式":["16.0"],"browserrouter":["16.0"],"selected":["16.3"],"prompt":["16.3"],"满足条件时提示用户是否离开页面":["16.3"],"when":["16.3"],"stores":["17.1","18.1"],"多数据源模式":["17.1","18.1"],"将状态存放到多个数据源中":["17.1","18.1"],"数据流动不可控":["17.3"],"在mvc模式中":["17.3"],"视图可以直接修改模型的状态":["17.3"],"模型可以直接更新视图":["17.3"],"统一状态管理":["17.4"],"数据可预测性":["17.4"],"新状态":["17.4"],"旧状态":["17.4"],"事件":["17.4"],"tip":["17.4"],"flux":["17.4"],"的核心思想是单向数据流":["17.4"],"容易导致不必要的":["18.3"],"无用渲染":["18.3"],"造成性能损失":["18.3"],"比如react":["18.3"],"react":["18.5","22.1","23.4","24.4","24.6"],"创建atom":["18.5","18.6"],"valueatom":["18.5","18.6"],"派生atom":["18.6"],"依赖某个atom":["18.6"],"text":["18.7","24.5"],"value":["18.7","24.5"],"set":["18.8","18.9"],"arg":["18.8","18.9"],"addnumberatom":["18.9"],"null":["18.9","24.1","24.3","28.4"],"async":["18.9"],"get":["18.9"],"result":["18.9"],"useatom":["18.10"],"useatomvalue":["18.10"],"usesetatom":["18.10"],"jotai":["18.10"],"countatom":["18.10"],"a":["18.10"],"而没有更新操作":["18.11"],"请使用useatomvalue":["18.11"],"或者说":["18.12"],"用provider包裹的组件":["18.12"],"store中的状态":["18.13"],"是全局的":["18.13"],"dom":["18.14"],"client":["18.14"],"app":["18.14"],"tsx":["18.14"],"css":["18.14"],"创建一个":["19.1"],"root":["19.1"],"存放":["19.1"],"比如":["19.2"],"redux":["19.2"],"thunk":["19.2"],"themeprovider":["20.0"],"ccc":["20.1"],"background":["20.1"],"pink":["20.1"],"hooks":["20.2"],"usecontext":["20.2"],"下面看一下":["20.2"],"接受一个参数":["20.2"],"就是想要获取的":["20.2"],"返回一个":["20.2"],"值":["20.2"],"就是最近的":["20.2"],"提供":["20.2"],"contextvalue":["20.2"],"其原理主要是运用了":["22.0"],"对于":["22.1"],"执行":["22.1"],"处理逻辑是采用异步调用":["22.1"],"这样浏览器只会绘制一次":["22.2"],"如果修改":["22.2"],"布局放在":["22.2"],"那":["22.2"],"templates":["22.3"],"为需要":["22.3"],"styled":["22.3"],"的":["22.3","23.3"],"定义一系列css属性":["22.3"],"当该组件的js代码被解析执行的时候":["22.3"],"components":["22.3"],"会动态生成一个":["22.3"],"选择器":["22.3"],"并把对应的":["22.3"],"alldemo":["22.4"],"functionlifecycle":["22.4"],"num":["22.4"],"setnum":["22.4"],"usestate":["22.4"],"组件挂载完成":["22.4"],"清除":["22.4"],"初始化会默认执行一次":["23.1"],"jsx":["23.1","24.6"],"属性访问到":["23.2"],"组件":["23.2"],"为":["23.2"],"渲染与否":["23.3"],"可以将需要传给":["23.3"],"直接通过函数参数的方式传递给执行函数":["23.3"],"alien":["23.4"],"let":["23.4","23.6","24.6","25.4"],"us":["23.4","23.6","24.6","25.4"],"learn":["23.4","23.6","24.6","25.4"],"map":["23.4"],"item":["23.4"],"focus":["23.4"],"if":["23.4","35.5"],"fatherprops":["23.6","23.7"],"mes":["23.6","24.6"],"father":["23.7"],"age":["23.7"],"formvalue":["23.9"],"setformvalue":["23.9"],"setvalue":["23.9"],"inputvalue":["23.9"],"callback":["23.9"],"renderelements":["23.9"],"这里是react":["23.9"],"children用来循环react":["23.9"],"element的方法":["23.9"],"foreach":["23.9"],"el":["23.9"],"currentcomponentinstance":["24.1"],"forwardref的第二个参数是ref":["24.2"],"这个ref是grandfahter组件传递过来的":["24.2"],"至此一层一层从prop传递":["24.2"],"最终通过ref赋值":["24.2"],"grandfather":["24.2"],"button属性":["24.3"],"点击":["24.3"],"wrap":["24.4"],"extends":["24.4"],"render":["24.4","25.7"],"forwardedref":["24.4"],"otherprops":["24.4"],"this":["24.4"],"对":["24.5"],"gjs说":["24.5"],"input":["24.5"],"onchange":["24.5"],"e":["24.5"],"target":["24.5"],"to":["24.5"],"耿嘉帅":["24.5"],"gjscomp":["24.5"],"始终指向一个内存空间":["24.6"],"所以这样一点好处是可以随时访问到变化后的值":["24.6"],"tolearn":["24.6"],"constructor":["25.1"],"super":["25.1"],"对象":["25.2"],"缓存起来":["25.2"],"第二个参数为一个数组":["25.2"],"存放当前":["25.2"],"把它缓存起来":["25.3"],"可以把函数和属性缓存起来":["25.3"],"作为":["25.3"],"purecomponent":["25.3"],"的绑定方法":["25.3"],"或者配合其他hooks一起使用":["25.3"],"原理其实很简单":["25.3"],"每次执行":["25.3"],"state不同情况":["25.4"],"state为引用数据类型时候":["25.4"],"hello":["25.4"],"my":["25.4"],"is":["25.4"],"ctor":["25.5"],"prototype":["25.5"],"shallowequal":["25.5"],"oldprops":["25.5"],"oldstate":["25.5"],"综上可以用":["25.6"],"usecallback":["25.6"],"或者":["25.6"],"或":["25.7"],"发生变化时才会更新":["25.7"],"false":["25.7"],"console":["25.7"],"log":["25.7"],"compare":["25.8"],"如果返回true":["25.9"],"需要memo备忘":["25.9"],"会跳过shouldcomponentupdate的判断":["25.10"],"直接更新组件":["25.10"],"state":["25.11"],"而用户操作表单往往是频繁的":["25.11"],"需要频繁改变数据层":["25.11"],"所以很有可能让整个页面组件高频率":["25.11"],"用户触发添加程序":["28.1"],"react中的reducer也是这样的他们都接受":["28.2"],"textcontent":["28.4"],"json":["28.4"],"stringify":["28.4"],"reducer":["28.4"],"newstate":["28.5"],"接收状态事件":["28.5"],"计算新的状态":["28.5"],"switch":["28.5"],"从而将相关状态集中管理":["28.6"],"减少状态逻辑的分散":["28.6"],"可预测性":["28.6"],"无法复用":["35.1"],"若我们想用authservice时必须新注册一个类来实现":["35.1"],"并且需要改动getuser里面的代码":["35.1"],"那我们此时就需要解决这个问题":["35.1"],"使用di":["35.1"],"依赖是service":["35.1"],"依赖的标准需要拥有一个getlist方法":["35.1"],"并且接收一个id":["35.1"],"控制反转的本质就是降低耦合度":["35.2"],"更方便的依赖注入":["35.3"],"解析方法":["35.5"],"resolve":["35.5"],"page":["41.0"]},{"0":["24.6","25.4","25.9"],"1":["25.5"],"2":["13.2","17.3","19.1","25.5","25.10"],"3":["13.2","17.1","18.1","25.11","35.3","35.4"],"5":["6.1"],"9":["14.3"],"11":["5.2"],"12":["5.2"],"13":["5.2"],"14":["5.2"],"102":["40.0"],"300":["40.0"],"request":["1.0"],"res":["1.0"],"response":["1.0"],"next":["1.0"],"function":["1.0","13.4","14.8","20.2","24.6","25.4"],"console":["1.0","15.9","18.10","23.1"],"log":["1.0","15.9","18.10"],"中间件触发":["1.0"],"if":["1.1","23.9","25.1"],"true":["1.1"],"details":["1.1"],"定义一个authguard守卫类":["1.1"],"实现canactivate接口":["1.1"],"handle":["1.2"],"pipe":["1.2"],"tap":["1.2"],"after":["1.2"],"然后将数据传递给控制器或下一个管道":["1.3"],"管道的主要目的是增强应用的可靠性":["1.3"],"dirname":["2.0"],"const":["2.0","14.8","22.3","25.1","25.7"],"appservice":["2.0"],"node":["2.0","24.1","24.5"],"development":["2.0"],"bservice":["2.0"],"imports":["2.0"],"controllers":["2.0"],"快速配置env配置":["3.0"],"配置环境文件":["3.0"],"a":["3.0"],"import":["3.0","13.0","14.3"],"registeras":["3.0"],"from":["3.0","14.3"],"nestjs":["3.0"],"default":["3.0","24.6","25.4","28.5"],"ts注解":["4.0"],"或直接传递参数":["4.0"],"iphone":["4.1"],"extends":["4.1","13.6","25.9"],"静态模块":["5.0"],"http请求并返回http响应的类":["5.1"],"controller的作用是将路由映射到处理请求方法上":["5.1"],"在controller中可以使用nestjs提供的装饰器来定义":["5.1"],"路由":["5.1"],"中间件":["5.1"],"控制器管道":["5.2"],"路由管道":["5.2"],"路由参数管道":["5.2"],"需要使用":["5.3"],"装饰器声明该提供者":["5.3"],"注册到容器的提供者":["5.3"],"默认只对当前模块有效":["5.3"],"即作用域为模块":["5.3"],"usefactory":["5.4"],"return":["5.4","14.6","18.7","18.10","20.2","23.8","23.9","24.4","28.4","35.5"],"secret":["5.4"],"get":["5.4","18.6"],"pipes":["6.1"],"核验请求的数据":["6.1"],"过滤器":["6.1"],"当一个请求到达应用程序时":["7.0"],"nestjs框架会将他封装成一个executioncontext对象":["7.0"],"verify对密码进行解密":["9.0"],"解密符合":["9.0"],"等":["13.0"],"api":["13.0"],"实现动态加载组件":["13.0"],"实现代码分割":["13.0"],"两种":["13.1"],"业务组件做了些什么":["13.2"],"所以正向属性代理":["13.2"],"更适合做一些开源项目的":["13.2"],"目前开源的":["13.2"],"基本都是通过这个模式实现的":["13.2"],"同样适用于类组件和函数组件":["13.2"],"方便获取组件内部状态":["13.3"],"比如":["13.3"],"state":["13.3","25.5","25.9","28.4"],"props":["13.3","13.7","23.9","24.4","25.3","25.5"],"生命周期":["13.3"],"绑定的事件函数等":["13.3"],"②":["13.3"],"es6继承可以良好继承静态属性":["13.3"],"angular":["13.4"],"advance":["13.4"],"组件中":["13.5"],"在":["13.5","23.3"],"生命周期动态加载上述的路由组件component":["13.5"],"如果在切换路由或者没有加载完毕时":["13.5"],"显示的是":["13.5"],"效果":["13.5"],"组件赋能":["13.5"],"对于属性代理虽然不能直接获取组件内的状态":["13.5"],"但是可以通过":["13.5"],"div":["13.6","18.10","20.2","22.4","25.7"],"ref":["13.6"],"class":["13.6"],"index":["13.6","14.8","23.6","24.6","25.9"],"authorization":["13.7","15.9"],"component":["13.7","25.9"],"home":["13.7","25.4"],"matchpermission":["13.7"],"list":["13.7"],"indexof":["13.7"],"usetransition":["14.1"],"concurrent模式下":["14.1"],"过渡更新任务":["14.1"],"结果是0":["14.3"],"react":["14.3","23.1","23.2","23.6","23.8"],"usestate获取到最新的number":["14.5"],"所以打印的值是最新的number":["14.5"],"人话":["14.5"],"点击button时触发的log和setnumber在第一任务线程":["14.5"],"第一线程执行完毕后执行第一线程引起的一系列任务":["14.5"],"外部在第二任务线程中执行的":["14.5"],"此时setnumber已执行完毕":["14.5"],"点击按钮后执行过程":["14.5"],"线程1":["14.5"],"handleclick":["14.5"],"宏任务log":["14.5"],"微任务setnumber":["14.5"],"触发线程2":["14.5"],"name":["14.6"],"switch":["14.6","28.4"],"case":["14.6","28.4","28.5"],"increment":["14.6"],"count":["14.6"],"demo":["14.8"],"jsx":["14.8","40.0"],"childref":["14.8"],"useref":["14.8"],"null":["14.8","24.5"],"click":["14.8"],"chcildref":["14.8"],"logger":["14.8"],"这在提高用户体验和性能方面很有帮助":["15.1"],"自动缓存失效处理":["15.1"],"当数据过期或需要刷新时":["15.1"],"可以自动处理缓存失效并重新获取数据":["15.1"],"无需手动编写过期和刷新逻辑":["15.1"],"服务器状态更新":["15.1"],"无数据预取":["15.2"],"usequery":["15.9"],"query":["15.9"],"querykey":["15.9"],"owner":["15.9"],"repo":["15.9"],"repos":["15.9"],"issues":["15.9"],"headers":["15.9"],"成功或错误状态":["15.10"],"例如":["15.10","40.0"],"可以是字符串":["15.10"],"loading":["15.10"],"success":["15.10"],"或":["15.10"],"hashrouter":["16.0"],"memoryrouter":["16.0"],"好处":["16.0"],"formishalffilledout":["16.3"],"message":["16.3"],"are":["16.3"],"you":["16.3"],"sure":["16.3"],"可在多个地方使用消费":["17.1","18.1"],"usestore":["17.1","18.1"],"这种双向的数据流动会导致数据的不一致和混乱":["17.3"],"难以调试和维护":["17.3"],"由于数据流动不可控":["17.3"],"它将应用程序分为四个主要部分":["17.4"],"br":["17.4"],"b":["17.4"],"view":["17.4"],"视图":["17.4"],"负责渲染用户界面":["17.4"],"接收用户输入并将其发送给":["17.4"],"dispatcher":["17.4"],"redux":["18.3"],"v6完全基于context":["18.3"],"api而导致性能大幅下降":["18.3"],"v7又回退到之前的内部订阅方案":["18.3"],"context更适合放类似主题这种变化不大的全局数据":["18.3"],"依赖某个atom":["18.5"],"当依赖项发生变化时更新触发atom的第一个参数修改变量":["18.5","18.6"],"deriveatom":["18.5","18.6"],"async":["18.6"],"setvalue":["18.7"],"useatom":["18.7"],"text":["18.8"],"fc":["18.8"],"value":["18.8","20.1","23.9"],"await":["18.9"],"url":["18.9"],"setcount":["18.10"],"组件a渲染":["18.10"],"button":["18.10","25.7"],"onclick":["18.10","25.7"],"如果仅更新操作":["18.11"],"而无需渲染状态的组件":["18.11"],"状态是独立的":["18.12"],"不受外部影响":["18.12"],"同时也不影响外部":["18.12"],"任何组件都可以使用":["18.13"],"但是":["18.13"],"createroot":["18.14"],"document":["18.14"],"getelementbyid":["18.14"],"root":["18.14","25.11"],"render":["18.14","25.11"],"strictmode":["18.14"],"state的根对象":["19.1"],"dispatch":["19.1"],"使":["19.2"],"action":["19.2","28.4"],"可以为":["19.2"],"son":["20.1"],"style":["20.2","40.0"],"hooks":["22.0","25.6"],"里面的":["22.0"],"对于每一个":["22.1"],"effect":["22.1"],"的":["22.1","25.3"],"callback":["22.1"],"执行是在浏览器绘制视图之后":["22.2"],"接下来又改":["22.2"],"就可能会导致浏览器再次回流和重绘":["22.2"],"而且由于两次绘制":["22.2"],"样式通过":["22.3"],"标签的形式插入到":["22.3"],"head":["22.3"],"标签里面":["22.3"],"动态生成的":["22.3"],"选择器会有一小段哈希值来保证全局唯一性来避免样式发生冲突":["22.3"],"这种模式下本质上是动态生成":["22.3"],"标签":["22.3"],"title":["22.3"],"组件销毁":["22.4"],"number":["22.4"],"element":["23.2"],"对象":["23.2"],"作用":["23.2"],"可以根据需要控制":["23.2"],"tip":["23.3"],"这种情况":["23.3"],"中":["23.3"],"判断是":["23.4"],"elment":["23.4"],"混入":["23.4"],"cloneelement":["23.4","23.8","25.1"],"一般不需要具体指出":["23.5"],"focus":["23.7"],"prop":["23.8"],"type":["23.9"],"displayname":["23.9"],"混入props":["23.9"],"childrenitem":["23.9"],"onchange":["23.9"],"ref模式获取元素或组件":["24.1"],"childspanref":["24.2"],"newfather":["24.2"],"forwardrefindex":["24.3"],"gyqmsg":["24.5"],"setgyqmsg":["24.5"],"settogyqmsg":["24.5"],"传递函数":["24.5"],"调用子组件的方法":["24.5"],"current":["24.5","28.4"],"yq":["24.5"],"vue3":["24.6"],"export":["24.6","25.4"],"id":["24.6"],"typeinfo":["24.6"],"controllcomponentrender":["25.1"],"通过此函数判断":["25.1"],"只有":["25.1"],"变化的时候":["25.1"],"重新创建":["25.1"],"的依赖项":["25.2"],"在函数组件下一次执行的时候":["25.2"],"会对比":["25.2"],"依赖项里面的状态":["25.2"],"是否有改变":["25.2"],"本质上":["25.3"],"createelement":["25.3"],"会产生一个新的":["25.3"],"这个":["25.3","25.6"],"将作为对应":["25.3"],"父组件":["25.4"],"numbera":["25.4"],"setnumbera":["25.4"],"usestate":["25.4"],"numberb":["25.4"],"setnumberb":["25.4"],"父组件改变props":["25.4"],"判断是否为纯函数":["25.5"],"如果是则进行浅比较shallowequal":["25.5"],"info":["25.5"],"shallowequal过程":["25.5"],"首先新老props":["25.5"],"states比较":["25.5"],"不相等重新生成element":["25.5"],"判断新老":["25.5"],"或者":["25.5"],"有不是对象或者为":["25.5"],"usememo":["25.6"],"解决这个问题":["25.6"],"首选":["25.6"],"初衷就是为了解决这种情况的":["25.6"],"setstate":["25.7"],"需要被包裹的组件":["25.8"],"constructor":["25.9"],"super":["25.9"],"this":["25.9"],"test":["25.9"],"context":["25.10"],"第三种情况就是越是靠近":["25.11"],"app":["25.11"],"程序了解到事件名以后去reducer中找到对应的函数执行操作":["28.1"],"当前state":["28.2"],"和触发的事件action":["28.2"],"tasks":["28.4"],"previous":["28.4"],"使用usereducer可以使状态变化变得可预测":["28.6"],"因为它通过一个reducer函数来处理状态变化":["28.6"],"可以更好地理解状态变化的来源":["28.6"],"中间件和副作用":["28.6"],"不再强依赖一些属性和方法":["35.2"],"具体的实现方式是di依赖注入":["35.2"],"容器需要拥有register方法用来管理容器的注册":["35.4"],"throw":["35.5"],"split":["40.0"],"这样可得到一个数组":["40.0"],"如果我想把他拆分成一个对象该如何实现":["40.0"],"reg":["40.0"],"w":["40.0"],"s":["40.0"],"replace":["40.0"],"iframe":["40.0"],"height":["40.0"],"team":["41.0"]},{"0":["13.7"],"1":["18.10","22.3","22.4","25.7"],"2":["22.2"],"3":["17.3","19.1","25.5"],"4":["13.0","13.2"],"5":["14.3"],"6":["6.1","14.5"],"8":["14.5"],"15":["5.2"],"16":["5.2"],"18":["3.0"],"28":["23.6"],"100":["40.0"],"使用":["1.0"],"添加到模块或者控制器中":["1.0"],"module":["1.0","1.2"],"在canactivate":["1.1"],"方法中":["1.1"],"通过参数context获取到请求对象":["1.1"],"调用validaterequest":["1.1"],"函数验证请求是否合法":["1.1"],"如果请求合法就返回true":["1.1"],"要在控制器中使用守卫":["1.1"],"需要将守卫添加到路由上":["1.1"],"useguard":["1.1"],"controller":["1.1"],"ms":["1.2"],"写入模块中作为提供者":["1.2"],"imports":["1.2"],"安全性":["1.3"],"appcontroller":["2.0"],"appmodule":["2.0"],"不使用dotenv扩展包的话需要手动readfile然后根据":["2.0"],"n拆分":["2.0"],"循环放入process":["2.0"],"key":["2.0"],"太麻烦":["2.0"],"工厂函数":["2.0"],"对于复杂要求的provider":["2.0"],"我们就可以使用":["2.0"],"usefactory":["2.0"],"工厂函数进行提供者注册":["2.0"],"name":["3.0","13.4","23.6","23.7"],"process":["3.0"],"env":["3.0"],"app":["3.0","5.4"],"age":["3.0","23.6"],"最终统一导入到config":["3.0"],"index":["3.0","14.5","23.7","24.4"],"再统一导出":["3.0"],"总之控制权不在类中":["4.0"],"而是由外部决定":["4.0"],"play":["4.1"],"student":["4.1"],"动态模块":["5.0"],"全局模块":["5.0"],"pipe":["5.1"],"dto和请求参数等":["5.1"],"service提供一种实现业务逻辑的方式":["5.1"],"他可以访问操作数据":["5.1"],"控制器":["5.2"],"方法处理器":["5.2"],"请求之后":["5.2"],"可以使用":["5.3"],"exports":["5.3"],"导出给其他模块使用":["5.3"],"提供者是单例的4":["5.3"],"提供者可以是任何值":["5.3"],"token":["5.4"],"expiresin":["5.4"],"100d":["5.4"],"模块提供者":["5.4"],"filters":["6.1"],"处理请求时的错误":["6.1"],"守卫":["6.1"],"这个对象包含了当前请求的上下文信息":["7.0"],"包括请求头":["7.0"],"请求体":["7.0"],"根据头信息":["9.0"],"加入":["13.0"],"loading":["13.0","40.0"],"效果":["13.0"],"两者之间有一些共性和区别":["13.1"],"可以完全隔离业务组件的渲染":["13.2"],"因为属性代理说白了是一个新的组件":["13.2"],"相比反向继承":["13.2"],"可以完全控制业务组件是否渲染":["13.2"],"可以嵌套使用":["13.2"],"多个":["13.2"],"是可以嵌套使用的":["13.2"],"而且一般不会限制包装":["13.2"],"所以无须对静态属性和方法进行额外的处理":["13.3"],"缺点":["13.3"],"函数组件无法使用":["13.3"],"和被包装的组件耦合度高":["13.3"],"需要知道被包装的原始组件的内部状态":["13.3"],"具体做了些什么":["13.3"],"otherprops":["13.4"],"alien":["13.4","23.6"],"替换":["13.4"],"元素节点":["13.4"],"appendelement":["13.4"],"createelement":["13.4"],"hello":["13.4","13.6"],"world":["13.4"],"my":["13.4"],"ref":["13.5"],"获取组件实例":["13.5"],"获取到组件实例":["13.5"],"就可以获取组件的一些状态":["13.5"],"或是手动触发一些事件":["13.5"],"进一步强化组件":["13.5"],"但是注意的是":["13.5"],"类组件才存在实例":["13.5"],"函数组件不存在实例":["13.5"],"hoc":["13.5"],"react":["13.6","23.3","24.2","25.3"],"render":["13.6","25.9"],"classname":["13.6"],"p":["13.6"],"匹配权限":["13.7"],"consumer":["13.7","20.2"],"permissionlist":["13.7"],"usedeferredvalue":["14.1"],"解决更新状态滞后问题":["14.1"],"const":["14.3","35.5"],"indexref":["14.3"],"function":["14.3","14.5","19.2","24.3"],"线程2":["14.5"],"微任务setnumber触发重新渲染":["14.5"],"这就是为什么handleclick函数内打印不到最新的值":["14.5"],"而handleclick函数外可以大打印到最新的值的原因":["14.5"],"js":["14.5","40.0"],"number":["14.5"],"setnumber":["14.5","22.4"],"decrement":["14.6"],"default":["14.6","22.4","23.9","24.3","40.0"],"throw":["14.6"],"new":["14.6","35.5"],"error":["14.6","35.5"],"return":["14.8","18.6","18.8"],"form":["14.8"],"button":["14.8","18.7","22.4","25.9"],"onclick":["14.8","22.4","25.9"],"myform":["14.8"],"对于需要与服务器状态同步的情况":["15.1"],"可以通过提供的无缝数据同步功能来处理":["15.1"],"确保客户端数据的一致性":["15.1"],"更少的重复代码":["15.1"],"无数据失效处理":["15.2"],"inputowner":["15.9"],"setinputowner":["15.9"],"facebook":["15.9"],"inputrepo":["15.9"],"setinputrepo":["15.9"],"setquerykey":["15.9"],"issuccess":["15.10"],"表示查询是否成功完成":["15.10"],"如果查询成功完成":["15.10"],"页面松耦合":["16.0"],"lazyload":["16.0"],"want":["16.3"],"leave":["16.3"],"redirect":["16.3"],"重定向":["16.3"],"atomic":["17.1","18.1"],"state":["17.1","18.1","22.4"],"原子状态":["17.1","18.1"],"当应用程序发生错误或状态异常时":["17.3"],"很难定位问题的根源并进行调试和修复":["17.3"],"嵌套回调和依赖关系":["17.3"],"调度器":["17.4"],"负责接收来自":["17.4"],"的动作":["17.4"],"并将它们分发给注册的":["17.4"],"而并不适合存放频繁更新的复杂状态集合":["18.3"],"原子化":["18.3"],"组件内状态":["18.3"],"但是api较多":["18.3"],"get":["18.5","35.1"],"使用atom":["18.5"],"await":["18.6"],"text":["18.6","18.9","22.3"],"div":["18.7","23.9"],"useatom":["18.8","18.9","18.14"],"addnumber":["18.8"],"fc":["18.9"],"value":["18.9"],"prev":["18.10"],"add":["18.10"],"b":["18.10"],"count":["18.10"],"请使用":["18.11"],"即使大家共用同一个atom状态":["18.12"],"如果不想让这个组件受外部更新影响":["18.12"],"如果某个组件使用了provider包裹":["18.13"],"那么该组件的状态是独立的":["18.13"],"getdefaultstore":["18.14"],"useatomvalue":["18.14"],"num":["18.14"],"num2":["18.14"],"navstore":["18.14"],"更新store中的state":["19.1"],"subscribe":["19.1"],"enhancer":["19.2"],"提供者":["20.0"],"themeconsumer":["20.0"],"作用有两个":["20.1"],"属性传递":["20.1"],"context":["20.1"],"消费者":["20.2"],"订阅者之consumer":["20.2"],"订阅者采取":["20.2"],"props":["20.2","24.2"],"接受最近一层":["20.2"],"中value":["20.2"],"作为":["20.2"],"函数的参数":["20.2"],"可以将参数取出来":["20.2"],"useeffect":["22.0","24.3"],"会向":["22.1"],"settimeout回调函数一样":["22.1"],"放入任务队列":["22.1"],"等到主线程任务完成":["22.1"],"dom":["22.1"],"视图上可能会造成闪现突兀的效果":["22.2"],"callback":["22.2"],"中代码执行会阻塞浏览器绘制":["22.2"],"h1":["22.3"],"font":["22.3"],"size":["22.3"],"5em":["22.3"],"align":["22.3"],"center":["22.3"],"color":["22.3"],"bf4f74":["22.3"],"wrapper":["22.3"],"section":["22.3"],"padding":["22.3"],"states":["22.4"],"改变state":["22.4","25.7"],"export":["22.4","23.9","24.3"],"isrender":["22.4"],"setrender":["22.4"],"log":["23.1","24.3"],"props改变":["23.1"],"是否渲染":["23.2"],"可以用":["23.2"],"属性访问到是函数":["23.3"],"并不是":["23.3"],"element":["23.3"],"对象":["23.3"],"针对这种情况":["23.3"],"像下面这种情况下":["23.3"],"else":["23.4"],"typeof":["23.4"],"中某个属性":["23.5"],"而是将":["23.5"],"indexprops":["23.6","23.7"],"children":["23.8"],"mes":["23.8"],"push":["23.9"],"123s":["23.9"],"json":["23.9"],"stringify":["23.9"],"ref是一个对象":["24.1"],"forwardref":["24.2"],"father":["24.2"],"grandref":["24.2"],"父组件":["24.2"],"class":["24.2"],"extends":["24.2"],"home":["24.3"],"useref":["24.3"],"console":["24.3"],"prop":["24.4"],"对yq说":["24.5"],"changetype":["24.6"],"info":["24.6","25.6"],"current":["24.6"],"的改变":["24.6"],"不需要视图变化":["24.6"],"如果有改变重新执行":["25.2"],"得到新的缓存值":["25.2"],"返回值":["25.2"],"pendingprops":["25.3"],"在此":["25.3"],"更新调和阶段":["25.3"],"会对比":["25.3"],"上老":["25.3"],"oldprops":["25.3"],"和新的":["25.3"],"改变numbera":["25.4"],"改变numberb":["25.4"],"对于props":["25.4"],"null":["25.5"],"的":["25.5"],"那么直接返回":["25.5"],"false":["25.5","28.4"],"更新组件":["25.5"],"通过":["25.5"],"object":["25.5"],"keys":["25.5"],"将新老":["25.5"],"或者新老":["25.5"],"handercallback":["25.6"],"usecallback接受两个参数":["25.6"],"第一个参数是需要缓存的函数":["25.6"],"第二个参数为deps":["25.6"],"如果deps内依赖项改变返回新的函数":["25.6"],"和":["25.6"],"numa":["25.7"],"比较函数":["25.8"],"用来判断是否需要更新":["25.8"],"setstate":["25.9"],"如果组件依赖于context":["25.10"],"那么当context发生变化时":["25.10"],"根组件越值得注意":["25.11"],"根组件渲染会波及到整个组件树重新":["25.11"],"子组件":["25.11"],"这样的优点就是把操作整合到一起":["28.1"],"只需要知道用户执行了什么操作去reducer中寻找响应的程序而不是直接触发这些程序":["28.1"],"然后返回新的state":["28.2"],"done":["28.4"],"changed":["28.4"],"tasksk":["28.4"],"map":["28.4"],"t":["28.4"],"initstate":["28.5"],"接收接受个初始值":["28.5"],"和状态计算函数":["28.5"],"返回的dispatch来调用状态计算函数":["28.5"],"通过usestate保存状态":["28.5"],"usereducer可以配合副作用和中间件来处理状态变化时的特定逻辑":["28.6"],"使得状态管理更加灵活":["28.6"],"复杂动态表单":["28.6"],"在处理复杂的动态表单或用户输入场景时":["28.6"],"实际使用":["35.1"],"abstract":["35.1"],"authservice":["35.1"],"xxx":["35.1"],"控制反转需要一个容器":["35.2"],"配置集中管理":["35.3"],"容器需要有一个解析的方法":["35.4"],"依赖":["35.5"],"未被注册到容器":["35.5"],"请先注册到容器再去使用":["35.5"],"width":["40.0"],"scrolling":["40.0"],"no":["40.0"],"title":["40.0"],"untitled":["40.0"],"src":["40.0"],"https":["40.0"],"codepen":["40.0"],"io":["40.0"],"woskvxzd":["40.0"],"the":["40.0"],"animator":["40.0"],"embed":["40.0"],"qwymdbq":["40.0"],"tab":["40.0"],"2cresult":["40.0"],"frameborder":["40.0"]},{"0":["14.5","14.8"],"1":["14.3","24.3","24.5","25.9"],"2":["14.1"],"4":["14.3","17.3","25.5"],"5":["19.1"],"7":["6.1"],"17":["5.2"],"18":["5.2"],"28":["23.7"],"appcontroller":["1.1","1.2"],"constructor":["1.1","4.1","13.5","22.4","24.2"],"private":["1.1"],"readonly":["1.1"],"appservice":["1.1","1.2"],"get":["1.1"],"useguards":["1.1"],"eagonguard":["1.1"],"controllers":["1.2","5.4"],"providers":["1.2","5.4"],"provide":["1.2"],"app":["1.2"],"interceptor":["1.2"],"可维护性":["1.3"],"xjclass":["2.0"],"make":["2.0"],"return":["2.0","18.9","18.14","24.6"],"this":["2.0"],"is":["2.0","13.4"],"method":["2.0"],"hd":["2.0"],"依赖注入其他提供者":["2.0"],"注册到全局module":["3.0"],"module":["3.0"],"imports":["3.0"],"configmodule":["3.0"],"forroot":["3.0"],"isglobal":["3.0"],"true":["3.0","22.4","40.0"],"load":["3.0"],"controller":["3.0"],"内部仅仅调用一个抽象的方法":["4.0"],"具体的方法实现由第三方决定":["4.0"],"protected":["4.1"],"env配置相关":["5.0"],"同事还可以与其他服务交互以完成复杂的业务逻辑":["5.1"],"service是处理应用程序逻辑的类":["5.1"],"将业务逻辑从controller中分离出来":["5.1"],"使得controller只需处理http请求和响应":["5.1"],"控制器拦截器":["5.2"],"异常过滤器":["5.2"],"而不仅仅是服务类":["5.3"],"提供者是":["5.3"],"nestjs":["5.3"],"应用程序中的核心概念之一":["5.3"],"它们将代码块标记为可注入的":["5.3"],"authservice":["5.4","35.5"],"jwtstrategy":["5.4"],"控制器":["5.4"],"authcontroller":["5.4"],"向外提供接口":["5.4"],"guards":["6.1"],"鉴权认证相关":["6.1"],"拦截器":["6.1"],"查询参数":["7.0"],"响应对象等":["7.0"],"载荷":["9.0"],"签名规则":["9.0"],"ref":["13.0","13.2"],"来获取原始组件实例":["13.0"],"操作实例下的属性和方法":["13.0"],"接下来分别介绍一下两种模式下的高阶组件":["13.1"],"的先后顺序":["13.2"],"缺点":["13.2"],"一般无法直接获取原始组件的状态":["13.2"],"如果想要获取":["13.2"],"需要":["13.2"],"获取组件实例":["13.2"],"③":["13.3"],"如果多个反向继承":["13.3"],"嵌套在一起":["13.3"],"当前状态会覆盖上一个状态":["13.3"],"这样带来的隐患是非常大的":["13.3"],"比如说有多个":["13.3"],"componentdidmount":["13.3"],"newchild":["13.4"],"children":["13.4"],"map":["13.4","24.6"],"child":["13.4"],"wrapcomponent":["13.5"],"super":["13.5","24.2"],"node":["13.5","24.4"],"获取实例":["13.5"],"world":["13.6","22.3"],"button":["13.6","18.8","18.9"],"组件内部点击":["13.6"],"export":["13.6","18.6","24.4"],"default":["13.6","24.4"],"writedoc":["13.7"],"绑定文档录入页面":["13.7"],"class":["13.7"],"extends":["13.7"],"writetag":["13.7"],"执行副作用":["14.1"],"b1":["14.1"],"这是分类b下的项目b1":["14.1"],"current":["14.3"],"每个回调函数捕获正确的值":["14.3"],"造成此结果的原因是当循环时":["14.3"],"每次循环执行的settimeout都会在一秒钟后执行":["14.3"],"当一秒钟后执行时当前的i已经是10了":["14.3"],"console":["14.5","14.8","24.4"],"log":["14.5","24.4"],"重新渲染":["14.5"],"reducertest":["14.6"],"number":["14.6","23.1"],"dispatchnumber":["14.6"],"initialstate":["14.6"],"count":["14.8","18.14"],"setcount":["14.8","18.14"],"usestate":["14.8","25.1","28.5"],"你可以通过一些简单的":["15.1"],"hooks":["15.1"],"和配置来处理数据获取和管理":["15.1"],"减少了编写重复代码的工作量":["15.1"],"总之":["15.1","28.6"],"尽管可以使用普通的数据获取库来处理数据请求":["15.1"],"但":["15.1"],"无服务器状态更新等问题":["15.2"],"issuequery":["15.9"],"span":["15.9"],"仓库":["15.9"],"input":["15.9"],"name":["15.9"],"value":["15.9","18.5","18.6"],"onchange":["15.9"],"e":["15.9"],"target":["15.9"],"isfetching":["15.10"],"表示是否正在获取数据":["15.10"],"无论是从远程服务器还是从缓存中":["15.10"],"如果正在获取数据":["15.10"],"之类的可以基于路由实现":["16.0"],"重构":["16.0"],"维护":["16.0"],"例如登录判断":["16.3"],"router":["16.3"],"path":["16.3"],"render":["16.3","22.3","24.2"],"logged":["16.3"],"与创建对象形式的存储不同":["17.1","18.1"],"针对每一个变量可以是响应式的":["17.1","18.1"],"通过原子派生的方式来适应复杂的开发场景":["17.1","18.1"],"在复杂的应用程序中":["17.3"],"数据流动可能涉及多个嵌套的回调函数和依赖关系":["17.3"],"这会导致代码的可读性和可维护性下降":["17.3"],"数据存储":["17.4"],"负责管理应用程序的状态和逻辑":["17.4"],"接收来自":["17.4"],"的动作并更新自身的状态":["17.4"],"它通过将原子状态进行派生":["18.3"],"组合成新的状态":["18.3"],"类似vue的computed":["18.3"],"所谓组件内状态":["18.3"],"其实就是内部使用了usestate":["18.3"],"text":["18.5"],"div":["18.6","18.8","18.9","18.14","24.2","24.6"],"onclick":["18.7","18.8","18.9"],"addnumber":["18.9"],"组件b渲染":["18.10"],"p":["18.10"],"组件b":["18.10"],"这么做的目的":["18.11"],"防止无意义的渲染":["18.11"],"这样就不会触发更新了":["18.12"],"不受外部影响":["18.13"],"同时也不影响外部":["18.13"],"status":["18.14"],"style":["18.14"],"background":["18.14","22.3"],"pink":["18.14"],"black":["18.14"],"订阅":["19.1"],"监听store中的state变化":["19.1"],"增强器":["19.2"],"动作":["19.2"],"供给":["20.1"],"consumer":["20.1"],"使用":["20.1"],"属性改变":["20.1"],"混入":["20.2"],"组件":["20.2","23.6"],"说白了就是":["20.2"],"变成了":["20.2"],"themeconsumer":["20.2"],"订阅消费者":["20.2"],"和":["22.0"],"uselayouteffect":["22.0"],"更新":["22.1"],"js":["22.1"],"执行完成":["22.1"],"视图绘制完毕":["22.1"],"才执行":["22.1"],"一句话概括如何选择":["22.2"],"修改":["22.2"],"4em":["22.3"],"papayawhip":["22.3"],"hello":["22.3"],"这个是时候":["22.3"],"的作用就出现了":["22.3"],"的执行在":["22.3"],"改变props":["22.4"],"br":["22.4"],"false":["22.4"],"卸载组件":["22.4"],"做数据初始化":["22.4"],"将滑动处理函数":["22.4"],"cloneelement":["23.2"],"强化":["23.2"],"混入新的":["23.2"],"是不能直接渲染的":["23.3"],"直接渲染会报错":["23.3"],"details":["23.3"],"view":["23.3"],"the":["23.3"],"code":["23.3"],"null":["23.4","24.4"],"index":["23.4"],"直接传入或者是抽离到子组件中":["23.5"],"组件一方面直接将":["23.6"],"alien":["23.7"],"mes":["23.7"],"let":["23.7"],"us":["23.7"],"区别":["23.8","25.6"],"显示注入在dom":["23.8"],"view内可以直接看到":["23.8"],"隐式注入再函数内使用cloneelemnt":["23.8"],"item":["23.9","24.6"],"createref":["24.1"],"component":["24.2"],"son":["24.2","24.5"],"如上代码所示":["24.3"],"流程主要分为几个方面":["24.3"],"通过":["24.3"],"创建一个":["24.3"],"对象":["24.3"],"将当前":["24.3"],"对象传递给子组件":["24.3"],"hocindex":["24.4"],"useref":["24.4"],"useeffect":["24.4","25.11"],"函数没有实例":["24.5"],"所以使用useimperativehandle":["24.5"],"里面传递参数模拟类组件实例":["24.5"],"forwawrdref使函数组件可以被ref获取实例":["24.5"],"这样的话其实跟类组件的性质是一样的":["24.5"],"sonmes":["24.5"],"setsonmes":["24.5"],"useimperativehandle创建实例方法":["24.5"],"第一个参数是要传递的ref对象":["24.5"],"第二个参数是一个函数":["24.5"],"第三个参数是一个数组":["24.5"],"数组中的值发生变化时":["24.5"],"才会重新执行第二个参数的函数":["24.5"],"sonrtate":["24.5"],"if":["24.6","28.4"],"添加依赖项":["24.6"],"使用react提供的usememo优化":["25.1"],"setnumbera":["25.1"],"setnumberb":["25.1"],"usememo":["25.1"],"执行":["25.2"],"的返回值":["25.2"],"如果":["25.2"],"中有依赖项改变":["25.2"],"newprop":["25.3"],"是否相等":["25.3"],"如果相等函数组件就会放弃子组件的调和更新":["25.3"],"从而子组件不会重新渲染":["25.3"],"如果上述把":["25.3"],"对象缓存起来":["25.3"],"上面":["25.3"],"会浅比较":["25.4"],"如果相等则不会重新渲染":["25.4"],"否则重新渲染":["25.4"],"对于state":["25.4"],"浅比较只会比较基础数据类型":["25.4"],"对于引用类型":["25.4"],"比如":["25.4"],"demo":["25.4"],"中":["25.4"],"的":["25.4"],"单纯的改变":["25.4"],"的属性名":["25.5"],"key":["25.5"],"变成数组":["25.5"],"判断数组的长度是否相等":["25.5"],"证明有属性增加或者减少":["25.5"],"那么更新组件":["25.5"],"遍历老":["25.5"],"或者老":["25.5"],"判断对应的新":["25.5"],"usecallback返回的是一个记忆化的回调函数":["25.6"],"只有当依赖项发生变化时":["25.6"],"回调函数才会改变":["25.6"],"这可以防止不必要的组件重新渲染":["25.6"],"例如":["25.6"],"如果你有一个经常重新渲染的父组件":["25.6"],"其中有一个子组件接收一个函数属性":["25.6"],"那么usecallback就非常有用":["25.6"],"因为它可以确保只有当函数的依赖项改变时":["25.6"],"函数才会被重新创建":["25.6"],"相反":["25.6"],"usememo返回的是一个记忆化的值":["25.6"],"这个值是运行函数的结果":["25.6"],"只有当依赖项改变时":["25.6"],"numb":["25.7"],"可以通过新老props":["25.7"],"state比较":["25.7"],"判断是否渲染":["25.7"],"但是如果是引用类型":["25.7"],"比如对象":["25.7"],"返回true则不更新":["25.8"],"返回false则更新":["25.8"],"组件会重新渲染":["25.10"],"不会走shouldcomponentupdate":["25.10"],"一是浪费性能":["25.11"],"二是可能执行":["25.11"],"更加符合常理":["28.1"],"这样action行为会随着时间的推移积累到状态中":["28.2"],"task":["28.4"],"else":["28.4"],"setstate":["28.5"],"function":["28.5"],"usereducer可以帮助更好地处理不同字段的状态变化":["28.6"],"usereducer适用于需要更精细控制状态逻辑":["28.6"],"处理复杂状态变化":["28.6"],"instance":["35.1"],"constroller":["35.1"],"这个容器接手类的控制权":["35.2"],"从容器中解析已注册的依赖项并注入":["35.4"],"让所有的依赖项统一管理注册解耦了对象之间的强依赖关系":["35.4"],"lazy":["40.0"],"allowtransparency":["40.0"],"allowfullscreen":["40.0"],"see":["40.0"],"pen":["40.0"],"a":["40.0"],"href":["40.0"],"by":["40.0"],"耿延":["40.0"]},{"0":["15.9"],"1":["14.8","15.9","18.14"],"2":["14.3","24.3"],"3":["23.9"],"5":["13.0"],"19":["5.2"],"123":["18.14"],"在上面的代码中":["1.0"],"我们将loggermiddleware中间件添加到了appmodule模块中":["1.0"],"并使用forroutes":["1.0"],"方法指定了该中间件适用于所有路由":["1.0"],"这样":["1.0"],"每次请求到达控制器之前":["1.0"],"都会先执行loggermiddleware中间件中的代码":["1.0"],"gethello":["1.1"],"string":["1.1"],"将authguard守卫添加到路由上":["1.1"],"并使用":["1.1"],"装饰器指定守卫":["1.1"],"这样每次请求到达控制器之前都会先执行authguard守卫中的代码":["1.1"],"以确保请求的合法性":["1.1"],"useclass":["1.2"],"appmodule":["1.2"],"管道的应用场景":["1.3"],"将做为参数传递给":["2.0"],"方法":["2.0"],"authcontroller":["2.0"],"authmodule":["2.0","5.4"],"constroctor":["3.0"],"直接注入":["3.0"],"传递泛型类型":["3.0"],"configtype会提供类型":["3.0"],"而不需要处理业务逻辑":["5.1"],"在service中":["5.1"],"可以编写业务逻辑和调用其他服务":["5.1"],"路由":["5.2"],"之后是控制器":["5.2"],"之后是全局":["5.2"],"服务器响应":["5.2"],"并提供与其它代码块之间的依赖关系":["5.3"],"当需要在组件或控制器中使用一个实例时":["5.3"],"会自动处理依赖关系并将实例提供给需要的组件或控制器":["5.3"],"exports":["5.4"],"export":["5.4","13.4","14.5","14.8","18.10","28.5"],"class":["5.4"],"interceptors":["6.1"],"处理http请求前后所执行的逻辑":["6.1"],"executioncontext只在当前请求有效":["7.0"],"不可以和其他请求共享":["7.0"],"返回token":["9.0"],"可以对原始组件做一些事件监听":["13.0"],"错误监控等":["13.0"],"无法直接继承静态属性":["13.2"],"如果需要继承需要手动处理":["13.2"],"或者引入第三方库":["13.2"],"因为本质上是产生了一个新组件":["13.2"],"所以需要配合":["13.2"],"forwardref":["13.2"],"来转发":["13.2"],"当前":["13.3"],"会覆盖上一个":["13.3"],"这样副作用串联起来":["13.3"],"影响很大":["13.3"],"cloneelement":["13.4"],"default":["13.4","14.5","14.8","18.6","18.10"],"可以做一些其他的操作":["13.5"],"box":["13.6"],"组件外部点击":["13.6"],"绑定标签录入页面":["13.7"],"绑定标签列表页面":["13.7"],"绑定文档列表页面":["13.7"],"项目b2":["14.1"],"这是分类b下的项目b2":["14.1"],"alt":["14.1"],"text":["14.1","23.9"],"let会在每次循环的时候保存当前作用域的变量":["14.3"],"所以每次循环的时候都会保存当前的i":["14.3"],"所以打印出来的结果是0":["14.3"],"tip":["14.3"],"不会产生新的作用域":["14.3"],"所以每次循环的时候都是共享一个作用域":["14.3"],"所以每次循环的时候都会覆盖上一次的i":["14.3"],"所以最后打印出来的结果都是10":["14.3"],"return":["14.5","18.5","23.3"],"button":["14.5","14.6","18.14","24.6"],"onclick":["14.5","14.6","18.14","24.6"],"点击":["14.5"],"div":["14.6","14.8","18.5","24.4"],"add":["14.6","18.7","18.8","18.9","18.14"],"log":["14.8","24.5"],"提供了一整套功能":["15.1"],"可以更好地管理数据获取":["15.1"],"缓存":["15.1"],"状态以及用户体验等方面的问题":["15.1"],"从而减少了开发工作量并提供了更好的性能和用户体验":["15.1"],"查看最新issue信息":["15.9"],"最新一条issue信息":["15.9"],"stringify":["15.9"],"data":["15.9"],"dataupdatedat":["15.10"],"表示数据上次更新的时间戳":["15.10"],"refetch":["15.10"],"用于手动重新获取数据的函数":["15.10"],"扩展更容易":["16.0"],"dashboard":["16.3"],"publichome":["16.3"],"atom":["17.1","18.1"],"组件通信困难":["17.3"],"当应用程序中的组件需要共享和同步状态时":["17.3"],"传统的mvc模式无法提供一个清晰的机制来处理组件之间的通信和状态共享":["17.3"],"action":["17.4"],"动作":["17.4"],"定义用户在":["17.4"],"中执行的操作":["17.4"],"它们会被发送给":["17.4"],"state变化":["18.3"],"触发更新渲染罢了":["18.3"],"有兴趣可以阅读手动实现recoil原理":["18.3"],"danger":["18.6"],"这样会阻塞渲染线程":["18.6"],"不建议这样做":["18.6"],"异步请求应该放在组件内部":["18.6"],"或者使用异步更新atom":["18.6"],"www":["18.9"],"abc":["18.9"],"com":["18.9"],"asynctest":["18.10"],"不会触发订阅事件":["18.12"],"即使大家共用同一个atom状态":["18.13"],"p":["18.14"],"x":["18.14"],"combinereducer":["19.1"],"将多个reducers合并成一个rootreducer":["19.1"],"reducer":["19.2"],"纯函数":["19.2"],"订阅消费者":["20.0"],"会让消费":["20.1"],"的组件重新渲染":["20.1"],"son":["20.2"],"将":["20.2"],"内容转化成":["20.2"],"所以":["22.1"],"回调函数不会阻塞浏览器绘制视图":["22.1"],"改变布局就用":["22.2"],"其他情况就用":["22.2"],"dom":["22.3"],"更新前":["22.3"],"所以此时使用":["22.3"],"避免了浏览器出现再次重回和重排的可能":["22.3"],"解决了性能上的问题":["22.3"],"如果使用uselayouteffect的话":["22.3"],"它的执行时机在dom更新完成":["22.3"],"浏览器只需绘制即可":["22.3"],"此时插入style便可引起浏览器的重绘":["22.3"],"因为样式发生了变化":["22.3"],"做防抖处理":["22.4"],"getderivedstatefromprops":["22.4"],"props获取后":["22.4"],"得到两个参数":["22.4"],"上一个props":["22.4"],"更新或的props":["22.4"],"组件挂载后":["22.4"],"shouldcomponentupdate":["22.4"],"性能优化":["22.4"],"只有":["22.4"],"list":["22.4"],"改变":["22.4","25.1"],"渲染视图":["22.4"],"render":["22.4"],"渲染":["22.4"],"item":["22.4"],"getsnapshotbeforeupdate":["22.4"],"保存更新前的快照数据":["22.4"],"组件即将更新":["22.4"],"组件即将卸载":["22.4"],"或者修改":["23.2"],"的子元素":["23.2"],"这种情况需要先遍历":["23.4"],"判断":["23.4"],"元素类型":["23.4"],"针对":["23.4"],"element":["23.4"],"节点":["23.4"],"通过":["23.4"],"针对函数":["23.4"],"直接传递参数":["23.4"],"执行函数":["23.4"],"抽象传递给":["23.6"],"一方面混入":["23.6"],"learn":["23.7"],"react":["23.7"],"api":["23.8"],"注入":["23.8"],"myinput":["23.9"],"e":["23.9"],"target":["23.9"],"ref对象模式获取元素或组件":["24.1"],"向":["24.3"],"组件传递的":["24.3"],"对象上":["24.3"],"绑定":["24.3"],"孙组件实例":["24.3"],"子组件实例":["24.3"],"和":["24.3"],"current":["24.4"],"组件实例":["24.4"],"转发引用":["24.5"],"使函数组件可以接受ref":["24.5"],"这样就可以获取到实例":["24.5"],"forwardson":["24.5"],"parent":["24.5"],"instance":["24.5"],"console":["24.5"],"key":["24.6"],"bind":["24.6"],"null":["24.6"],"用":["25.1"],"可以达到同样的效果":["25.1"],"需要更新的值":["25.1"],"放在":["25.1"],"deps":["25.1"],"中":["25.1"],"重新形成element对象":["25.1"],"否则通过":["25.1"],"拿到上次的缓存值":["25.1"],"达到如上同样效果":["25.1"],"比起类组件":["25.1"],"我更推荐函数组件用":["25.1"],"这种方式":["25.1"],"返回的重新执行":["25.2"],"产生的值":["25.2"],"否则取上一次缓存值":["25.2"],"也就和":["25.3"],"上":["25.3"],"指向相同的内存空间":["25.3"],"也就是相等":["25.3"],"从而跳过了本次更新":["25.3"],"下属性是不会促使组件更新的":["25.4"],"因为浅比较两次":["25.4"],"还是指向同一个内存空间":["25.4"],"想要解决这个问题也容易":["25.4"],"浅拷贝就可以解决":["25.4"],"或新":["25.5"],"有没有与之对应并且相等的":["25.5"],"这个相等是浅比较":["25.5"],"如果有一个不对应或者不相等":["25.5"],"到此为止":["25.5"],"浅比较流程结束":["25.5"],"purecomponent":["25.5"],"就是这么做渲染节流优化的":["25.5"],"这个值才会重新计算":["25.6"],"这对于避免重复进行昂贵的计算或数据转换非常有用":["25.6"],"如果你有一个组件":["25.6"],"它执行一个可能非常昂贵的操作":["25.6"],"如计算一个数的阶乘":["25.6"],"那么usememo就可以用来记忆化这个计算的结果":["25.6"],"从而只有当输入的数改变时":["25.6"],"才会重新运行这个计算":["25.6"],"总的来说":["25.6"],"usecallback和usememo的主要区别在于":["25.6"],"usecallback返回的是一个记忆化的函数":["25.6"],"而usememo返回的是一个记忆化的值":["25.6"],"数组":["25.7"],"那么浅比较就会失效":["25.7"],"因为新老props":["25.7"],"state指向的是同一个内存空间":["25.7"],"所以我们需要深比较":["25.7"],"这个时候就需要用到lodash的深比较函数isequal":["25.7"],"immutable":["25.7"],"js":["25.7"],"也可以实现深比较":["25.7"],"componentwillreceiveprops":["25.11"],"等钩子":["25.11"],"造成意想不到的情况发生":["25.11"],"filter":["28.4"],"throw":["28.4"],"error":["28.4"],"未知":["28.4"],"使用中间件或副作用等情况下":["28.6"],"可以优于简单使用usestate来管理组件状态":["28.6"],"此时我们的constroller与service解耦":["35.1"],"具体调用的方法完全取决于外部依赖注入进来的方法":["35.1"],"可扩展性":["35.1"],"解耦":["35.1"],"可测试性":["35.1"],"controller":["35.5"],"on":["40.0"]}]'},t={"0.0":{t:"<resume/>",p:"",l:"Resume/index.html",a:"resume"},"1.0":{t:"中间件",p:`::: info 存在意义
处理HTTP请求的函数，他可以在请求到达控制器之前/之后执行一些操作 他可以是全局的也可以是局部的
场景：身份验证，日志记录，错误处理
:::
::: details
中间 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html",a:"中间件"},"1.1":{t:"守卫",p:`Guard 是一种用于保护路由的机制，他可以在请求到达控制器之前或者之后执行一些操作。守卫可以用于实现身份验证，权限控制，缓存等功能。在NestJs中收尾可以是全局的也可以是局部的。守卫路由
[[Ex ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#守卫",a:"守卫"},"1.2":{t:"拦截器",p:`处理HTTP请求和响应的函数，在请求到达控制器之前之后执行一些操作。拦截器可以实现日志记录，错误处理，数据转换。在Nestjs中拦截器可以是全局的也可局部
@Injectable()
export c ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#拦截器",a:"拦截器"},"1.3":{t:"管道",p:`管道是数据流入controller前进行的一波数据处理
其中数据处理包含了对数据的转换,验证。他可以在控制器之前或之后对数据进行预处理。然后将数据传递给控制器或下一个管道。
$$管道的主要目的是增强应 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#管道",a:"管道"},"2.0":{t:">注入基本数据",p:`因为普通数据服务不是Class，所以要使用@Inject来注入

@Module({
	providers:[
		{
			provide:'APP_NAME',
			useValue:'使用普通 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Provider.html",a:"注入基本数据"},"3.0":{t:"> 案例，第三方发送短信服务。 根据不同配置使用不同的第三方运营商",p:`sms.serivce.ts
@Injectable()
export class AppController(){
	constructor(){
		private ali:aliService, ...`,l:"articles/BackEnd/NestJs/Basic/Code/env配置相关.html",a:"案例-第三方发送短信服务。-根据不同配置使用不同的第三方运营商"},"4.0":{t:"控制反转 IOC",p:`面向对象中的设计原则，用来减少计算机代码之前的耦合度。其根本思想是：”借助于第三方“ 实现具有依赖关系的对象之间的解耦

$$ 第三方举例：TS注解，或直接传递参数。总之控制权不在类中，而是由外部决定 ...`,l:"articles/BackEnd/NestJs/Basic/Code/设计模式模式.html",a:"控制反转-ioc"},"4.1":{t:"依赖注入 DI",p:`IOC 的具体实现，在类以外的地方提供服务。类内部调用的是该具体服务的抽象

	abstrct class Phone {
		playGame(name:string):string
	}
	cla ...`,l:"articles/BackEnd/NestJs/Basic/Code/设计模式模式.html#依赖注入-di",a:"依赖注入-di"},"5.0":{t:"- Nest 请求声明周期",p:`

[[Provider]]

动态Provider
asynProvider



Module

静态模块
动态模块
全局模块



[[env配置相关]]


`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html",a:"nest-请求声明周期"},"5.1":{t:"Module Controller Service的关系",p:`
Module 提供了一个模块化的方式来组织和管理您的应用程序的代码，同时还允许您使用依赖注入和模块之间的依赖关系来构建更加可扩展的应用程序。
$$ Module是Nestjs应用程序的基本构建块，每 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#module-controller-service的关系",a:"module-controller-service的关系"},"5.2":{t:"Nest 请求生命周期",p:`!img

1.  收到请求
2.  全局绑定的中间件
3.  模块绑定的中间件
4.  全局守卫
5.  控制层守卫
6.  路由守卫
7.  全局拦截器（控制器之前）
8.  控制器层拦截器 （控 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#nest-请求生命周期",a:"nest-请求生命周期"},"5.3":{t:"[[Provider]]",p:`提供服务,用于表示应用程序中可注入的任何东西。除了服务，Provider 还可以提供其他类型的对象，例如 Factory 工厂、配置对象、连接对象等。


提供者使用 @Injectable() 装饰 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#provider",a:"provider"},"5.4":{t:"Module",p:`模块是一个子程序，用于定义控制器，提供者或向其他模块开放提供者（开放模块的API）


默认情况下控制器，提供者在当前模块可用，即模块作用域
若果向其他模块提供服务可以将提供者定义在export属性中 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#module",a:"module"},"5.5":{t:"	",p:"",l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#",a:""},"5.6":{t:"动态Module",p:"",l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#动态module",a:"动态module"},"6.0":{t:"hi  我是Eagon,今天给大家分享Nest基础系列-Nestjs核心基础概念。 愿我们共同进步",p:"",l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html",a:"hi-我是eagon-今天给大家分享nest基础系列-nestjs核心基础概念。-愿我们共同进步"},"6.1":{t:"核心概念概览",p:`
模块 Modules 组合所有逻辑的地方,我理解为DI的Container
控制器 Controller处理请求
服务 Service 操作数据库以及处理所有逻辑的地方
管道 Pipes 核验请求的 ...`,l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html#核心概念概览",a:"核心概念概览"},"6.2":{t:" 重点1: NestJs 处理Https时的生命周期",p:"",l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html#重点1-nestjs-处理https时的生命周期",a:"重点1-nestjs-处理https时的生命周期"},"7.0":{t:">他代表了一个HTTP请求的执行上下文，提供了许多属性和方法，可用于在请求的生命周期内访问",p:`
ExecutionContext是在每个请求到达控制器之前被Nestjs封装产生的，他的请求是将请求的上下文，传递给控制器，拦截器，管道，守卫等各个部分。以便他们可以对请求进行处理和转换
当一个请求 ...`,l:"articles/BackEnd/NestJs/Basic/link/Execution Context 执行上下文.html",a:"他代表了一个http请求的执行上下文-提供了许多属性和方法-可用于在请求的生命周期内访问"},"8.0":{t:"# NestJs",p:"",l:"articles/BackEnd/NestJs/index.html",a:"nestjs"},"9.0":{t:"- register 接收账号密码argon2 hash 加密插入数据库",p:`
login   登录接收账号密码，argon2 verify对密码进行解密
解密符合，根据头信息，载荷, 签名规则 返回token

`,l:"articles/BackEnd/NestJs/jwt/流程.html",a:"register-接收账号密码argon2-hash-加密插入数据库"},"11.0":{t:"js",p:"",l:"articles/FontEnd/js/index.html",a:"js"},"12.0":{t:"# 项目列表",p:"",l:"articles/FontEnd/react/Basic/index.html",a:"项目列表"},"12.1":{t:"高阶组件HOC",p:"",l:"articles/FontEnd/react/Basic/index.html#高阶组件hoc",a:"高阶组件hoc"},"13.0":{t:"# 高阶组件HOC",p:`总结

强化 props ，可以通过 HOC ，向原始组件混入一些状态。
渲染劫持，可以利用 HOC ，动态挂载原始组件，还可以先获取原始组件的渲染树，进行可控性修改。
可以配合 import 等 a ...`,l:"articles/FontEnd/react/HOC/index.html",a:"高阶组件hoc"},"13.1":{t:"两种不同的高阶组件",p:`常用的高阶组件有属性代理和反向继承两种，两者之间有一些共性和区别。接下来分别介绍一下两种模式下的高阶组件。
`,l:"articles/FontEnd/react/HOC/index.html#两种不同的高阶组件",a:"两种不同的高阶组件"},"13.2":{t:"属性代理",p:`属性代理，就是用组件包裹一层代理组件，在代理组件上，可以做一些，对源组件的强化操作。这里注意属性代理返回的是一个新组件，被包裹的原始组件，将在新的组件里被挂载。
function HOC(WrapCo ...`,l:"articles/FontEnd/react/HOC/index.html#属性代理",a:"属性代理"},"13.3":{t:"反向继承",p:`反向继承
反向继承和属性代理有一定的区别，在于包装后的组件继承了原始组件本身，所以此时无须再去挂载业务组件。
class Index extends React.Component{
  render ...`,l:"articles/FontEnd/react/HOC/index.html#反向继承",a:"反向继承"},"13.4":{t:"编写HOC 什么时候使用HOC",p:`

强化Props
强化 props 就是在原始组件的 props 基础上，加入一些其他的 props ，强化原始组件功能


控制渲染
HOC 反向继承模式，可以通过 super.render()  ...`,l:"articles/FontEnd/react/HOC/index.html#编写hoc-什么时候使用hoc",a:"编写hoc-什么时候使用hoc"},"13.5":{t:"动态加载Loading",p:`export default function dynamicHoc(loadRouter) {
  return class Content extends React.Component {
   ...`,l:"articles/FontEnd/react/HOC/index.html#动态加载loading",a:"动态加载loading"},"13.6":{t:"事件监控",p:`HOC 不一定非要对组件本身做些什么？也可以单纯增加一些事件监听，错误监控。
以下代码HOC ，只对组件内的点击事件做一个监听效果。
function ClickHoc (Component){
   ...`,l:"articles/FontEnd/react/HOC/index.html#事件监控",a:"事件监控"},"13.7":{t:"权限拦截",p:`::: code-group

export const Permission = React.createContext([]) 
export default function Index(){
 ...`,l:"articles/FontEnd/react/HOC/index.html#权限拦截",a:"权限拦截"},"14.0":{t:"# Hooks",p:"",l:"articles/FontEnd/react/Hooks/index.html",a:"hooks"},"14.1":{t:"API分类",p:`
关键词： concurrent
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;使用范围&lt;/th&gt;
&lt;th&gt;Hooks&lt;/th&gt;
&lt;t ...`,l:"articles/FontEnd/react/Hooks/index.html#api分类",a:"api分类"},"14.2":{t:"Hooks",p:"",l:"articles/FontEnd/react/Hooks/index.html#hooks",a:"hooks"},"14.3":{t:"useRef",p:`&lt;details&gt;
场景：稳定引用，获取dom节点，获取上一次的值

闭包 异步访问到旧变量的问题

::: code-group
 // 典型的闭包循环案例，每次循环调用setTimeo ...`,l:"articles/FontEnd/react/Hooks/index.html#useref",a:"useref"},"14.4":{t:"数据更新驱动类",p:"",l:"articles/FontEnd/react/Hooks/index.html#数据更新驱动类",a:"数据更新驱动类"},"14.5":{t:"useState",p:`&lt;details&gt;
const [state, setState] = useState(initialState);
参数接收一个初始值，返回一个数组，数组的第一个元素是当前的state ...`,l:"articles/FontEnd/react/Hooks/index.html#usestate",a:"usestate"},"14.6":{t:"useReducer",p:`对于拥有许多状态更新逻辑的组件来说，过于分散的事件处理程序可能会令人不知所措。对于这种情况，你可以将组件的所有状态更新(增删改查)逻辑整合到一个外部函数中，这个函数叫作 reducer。
reduce ...`,l:"articles/FontEnd/react/Hooks/index.html#usereducer",a:"usereducer"},"14.7":{t:"useContext",p:`作用: 传递数据，避免props层层传递，导致代码冗余
`,l:"articles/FontEnd/react/Hooks/index.html#usecontext",a:"usecontext"},"14.8":{t:"useImperativeHandle",p:`::: info 解决了什么问题?
子组件通过ref抛出方法供父组件调用
React函数 组件，父组件需要直接访问子组件的实例方法或属性的问题。
在 React 中，父组件通常通过 props 向子组 ...`,l:"articles/FontEnd/react/Hooks/index.html#useimperativehandle",a:"useimperativehandle"},"15.0":{t:"# React Query",p:"",l:"articles/FontEnd/react/ReactQuery/index.html",a:"react-query"},"15.1":{t:"出现背景/解决问题",p:"**灵魂拷问Q： 为什么用axios不可以 为什么需要出现React QueryA:尽管可以使用普通的 Axios 或其他数据获取库来处理数据请求，但在某些情况下，使用 React Query 可以带 ...",l:"articles/FontEnd/react/ReactQuery/index.html#出现背景-解决问题",a:"出现背景-解决问题"},"15.2":{t:"核心概念",p:`解决普通请求代码重复，后期维护困难。无数据缓存，无数据同步，无数据预取，无数据失效处理，无服务器状态更新等问题。
`,l:"articles/FontEnd/react/ReactQuery/index.html#核心概念",a:"核心概念"},"15.3":{t:"使用教程",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#使用教程",a:"使用教程"},"15.4":{t:"自动缓存和数据同步",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#自动缓存和数据同步",a:"自动缓存和数据同步"},"15.5":{t:"加载状态管理",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#加载状态管理",a:"加载状态管理"},"15.6":{t:"数据同步和预取",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#数据同步和预取",a:"数据同步和预取"},"15.7":{t:"自动缓存失效处理",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#自动缓存失效处理",a:"自动缓存失效处理"},"15.8":{t:"服务器状态更新",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#服务器状态更新",a:"服务器状态更新"},"15.9":{t:"更少的重复代码",p:`::: code-group
import as React from 'react';
​
export default function App() {
  // 存储 后端返回数据
  cons ...`,l:"articles/FontEnd/react/ReactQuery/index.html#更少的重复代码",a:"更少的重复代码"},"15.10":{t:"API",p:`


APIname
Are




data：
查询返回的数据


isLoading：
表示查询是否正在加载中。如果数据正在加载，该属性为 true；否则为 false。


isError：
表 ...`,l:"articles/FontEnd/react/ReactQuery/index.html#api",a:"api"},"15.11":{t:"总结",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#总结",a:"总结"},"16.0":{t:"# React Router",p:`后端概念：发送url请求到服务器端，server会通过不同的地址返回不同的页面
为什么需要路由：

单页应用需要路由切换
通过url可以定位到页面
更有语义的组织资源

三种路由的实现方式：

Bro ...`,l:"articles/FontEnd/react/ReactRouter/index.html",a:"react-router"},"16.1":{t:"快速上手",p:"",l:"articles/FontEnd/react/ReactRouter/index.html#快速上手",a:"快速上手"},"16.2":{t:"原理分析",p:"",l:"articles/FontEnd/react/ReactRouter/index.html#原理分析",a:"原理分析"},"16.3":{t:"核心API",p:`


name
effect
demo




Link
普通链接，不会触发刷新
&lt;Link to=&quot;&quot;/&gt;


NavLink
类似Link
但是会添加当前选中状态& ...`,l:"articles/FontEnd/react/ReactRouter/index.html#核心api",a:"核心api"},"17.0":{t:"# React 全局存储/状态管理",p:"",l:"articles/FontEnd/react/Storage/index.html",a:"react-全局存储-状态管理"},"17.1":{t:"常见的状态管理模式",p:`
global：  全局式，也被称作单一数据源，将所有的数据放到一个大对象中，关键词：combineReducers();
multiple stores：  多数据源模式，将状态存放到多个数据源中， ...`,l:"articles/FontEnd/react/Storage/index.html#常见的状态管理模式",a:"常见的状态管理模式"},"17.2":{t:"Flex 架构",p:"",l:"articles/FontEnd/react/Storage/index.html#flex-架构",a:"flex-架构"},"17.3":{t:"出现背景 & 解决痛点",p:"Flux架构解决前端应用程序中状态管理和数据流动的复杂性问题。在传统的MVC（Model-View-Controller）模式中，应用程序的状态分散在多个视图和控制器之间，导致数据流动难以追踪和管理。 ...",l:"articles/FontEnd/react/Storage/index.html#出现背景-解决痛点",a:"出现背景-解决痛点"},"17.4":{t:"架构特点 & 详细介绍",p:`Flux架构通过引入单向数据流的概念，将数据的流动变得可控和可预测。它明确了数据流动的路径，并将状态的修改限制在特定的流程中。这样做的好处包括：


易于追踪和调试：由于数据流是单向的，数据的变化路径 ...`,l:"articles/FontEnd/react/Storage/index.html#架构特点-详细介绍",a:"架构特点-详细介绍"},"18.0":{t:"# Jotai",p:`引用来源：Ryun
`,l:"articles/FontEnd/react/Storage/jotai/index.html",a:"jotai"},"18.1":{t:"常见的状态管理模式",p:`
global：  全局式，也被称作单一数据源，将所有的数据放到一个大对象中，关键词：combineReducers();
multiple stores：  多数据源模式，将状态存放到多个数据源中， ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#常见的状态管理模式",a:"常见的状态管理模式"},"18.2":{t:"Jotai  原子状态管理",p:"",l:"articles/FontEnd/react/Storage/jotai/index.html#jotai-原子状态管理",a:"jotai-原子状态管理"},"18.3":{t:"原子式解决了什么问题",p:`reactHook 使State的拆分和逻辑共享变得更容易
但useState 和 useContext对于多个store仍需要维护多个Context Provider 因为当Context改变，所有 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#原子式解决了什么问题",a:"原子式解决了什么问题"},"18.4":{t:"使用教程",p:"",l:"articles/FontEnd/react/Storage/jotai/index.html#使用教程",a:"使用教程"},"18.5":{t:"1. 创建 atom  派生atom  使用 useAtom",p:`::: details View The Code
import { atom, useAtom } from &quot;jotai&quot;;
import { FC } from &quot; ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_1-创建-atom-派生atom-使用-useatom",a:"_1-创建-atom-派生atom-使用-useatom"},"18.6":{t:"2. 异步派生",p:`::: details View The Code
import { atom, useAtom } from &quot;jotai&quot;;
import { FC } from &quot; ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_2-异步派生",a:"_2-异步派生"},"18.7":{t:"3. 函数组件内更新方式",p:`::: details View The Code
  const ValueAtom = atom(1)
  const Text = ()=&gt;{
    const [value,setVa ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_3-函数组件内更新方式",a:"_3-函数组件内更新方式"},"18.8":{t:"4. atom内更新方式",p:`::: details View The Code
  const ValueAtom = atom(1)
  const AddNumberAtom = atom(ge=&gt;ge(ValueAt ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_4-atom内更新方式",a:"_4-atom内更新方式"},"18.9":{t:"5. 异步更新atom 区别于第二条异步获取，异步更新不会阻塞线程",p:`::: details View The Code
  const MockData = new Promise&lt;string&gt;((r) =&gt; {
    setTimeout(() ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_5-异步更新atom-区别于第二条异步获取-异步更新不会阻塞线程",a:"_5-异步更新atom-区别于第二条异步获取-异步更新不会阻塞线程"},"18.10":{t:"6. 渲染问题",p:`:::   details View The Code

当我们点击add时，发现A和B都重新渲染了，但是问题来了，A为什么要重新渲染呀，A只是触发了更新操作，并不需要重新渲染呀？？？


这是因为， ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_6-渲染问题",a:"_6-渲染问题"},"18.11":{t:"7. 解决渲染问题 useAtomValue、useSetAtom",p:`
如果有的组件只需要监听状态的变化值，而没有更新操作 请使用useAtomValue
如果仅更新操作，而无需渲染状态的组件，请使用 useSetAtom
这么做的目的：防止无意义的渲染

`,l:"articles/FontEnd/react/Storage/jotai/index.html#_7-解决渲染问题-useatomvalue、usesetatom",a:"_7-解决渲染问题-useatomvalue、usesetatom"},"18.12":{t:"8. Provider",p:`
正常情况下，无需用Provider包裹组件
但如果需要控制某些组件的状态不发生更新，可以用Provider包裹
或者说，用Provider包裹的组件，状态是独立的，不受外部影响，同时也不影响外部，即 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_8-provider",a:"_8-provider"},"18.13":{t:"9.store",p:`
createStore,export出去,使用Jotai的Provider提供给App


其中，store中的状态，是全局的，任何组件都可以使用，但是，如果某个组件使用了Provider包裹，那么 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_9-store",a:"_9-store"},"18.14":{t:"实际使用",p:`::: code-group
import { createStore, atom } from &quot;jotai&quot;;

const myStore = createStore();
 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#实际使用",a:"实际使用"},"19.0":{t:"# Redux",p:"",l:"articles/FontEnd/react/Storage/redux/index.html",a:"redux"},"19.1":{t:"API介绍",p:`
reducer 纯函数，接收两个参数，一个是state，一个是action，返回一个新的state
createStore 创建一个 root 存放 state的根对象
dispatch 更新sto ...`,l:"articles/FontEnd/react/Storage/redux/index.html#api介绍",a:"api介绍"},"19.2":{t:"摘要",p:`
middleware 中间件,中间件用于增强 dispatch 功能，返回一个增强后的 dispatch（比如 redux-thunk 使 action 可以为 function）
enhancer ...`,l:"articles/FontEnd/react/Storage/redux/index.html#摘要",a:"摘要"},"20.0":{t:"# Context Provider Consumer",p:`
const ThemeContext = React.createContext(null)
const ThemeProvider = ThemeContext.Provider  //提供者
c ...`,l:"articles/FontEnd/react/context/index.html",a:"context-provider-consumer"},"20.1":{t:"提供者Provider用法",p:`const ThemeProvider = ThemeContext.Provider  //提供者
export default function ProviderDemo(){
    const ...`,l:"articles/FontEnd/react/context/index.html#提供者provider用法",a:"提供者provider用法"},"20.2":{t:"消费者Consumer用法",p:`对于新版本想要获取 context 的消费者，React 提供了3种形式
::: code-group
React v16.6 提供了 contextType 静态属性，用来获取上面 Provider ...`,l:"articles/FontEnd/react/context/index.html#消费者consumer用法",a:"消费者consumer用法"},"21.0":{t:"!react",p:"",l:"articles/FontEnd/react/index.html",a:"react"},"22.0":{t:"# 生命周期",p:`React hooks也提供了 api ，用于弥补函数组件没有生命周期的缺陷。其原理主要是运用了 hooks 里面的 useEffect 和 useLayoutEffect
`,l:"articles/FontEnd/react/lifeCycle/index.html",a:"生命周期"},"22.1":{t:"useEffect",p:`useEffect(()=&gt;{
    return destory
},dep)


第一个参数callback 返回销毁函数 下次执行useEffect会首先执行这个销毁函数。 销毁定时器, ...`,l:"articles/FontEnd/react/lifeCycle/index.html#useeffect",a:"useeffect"},"22.2":{t:"useLayoutEffect",p:`useLayoutEffect 和 useEffect 不同的地方是采用了同步执行


首先 useLayoutEffect 是在 DOM 更新之后，浏览器绘制之前，这样可以方便修改 DOM，获取 D ...`,l:"articles/FontEnd/react/lifeCycle/index.html#uselayouteffect",a:"uselayouteffect"},"22.3":{t:"useInsertionEffect",p:`在介绍 useInsertionEffect 用途之前，先看一下 useInsertionEffect 的执行时机。
React.useEffect(()=&gt;{
    console.log( ...`,l:"articles/FontEnd/react/lifeCycle/index.html#useinsertioneffect",a:"useinsertioneffect"},"22.4":{t:"类组件生命周期在函数组件内使用Effect替代方案",p:`::: code-group
// componentDidMount
React.useEffect(()=&gt;{
    /* 请求数据 ， 事件监听 ， 操纵dom */
},[])  /* ...`,l:"articles/FontEnd/react/lifeCycle/index.html#类组件生命周期在函数组件内使用effect替代方案",a:"类组件生命周期在函数组件内使用effect替代方案"},"23.0":{t:"# props",p:"",l:"articles/FontEnd/react/props/index.html",a:"props"},"23.1":{t:"监听props改变",p:`函数组件中可以用 useEffect 来作为 props 改变后的监听函数。(不过有一点值得注意, useEffect 初始化会默认执行一次)
  React.useEffect(()=&gt;{
  ...`,l:"articles/FontEnd/react/props/index.html#监听props改变",a:"监听props改变"},"23.2":{t:"Render Children 模式",p:`① props 插槽组件

&lt;Container&gt;
    &lt;Children&gt;
&lt;/Container&gt;


上述可以在 Container 组件中，通过 pro ...`,l:"articles/FontEnd/react/props/index.html#render-children-模式",a:"render-children-模式"},"23.3":{t:"Render Props 模式",p:`&lt;Container&gt;
   { (ContainerProps)=&gt; &lt;Children {...ContainerProps}  /&gt; }
&lt;/Containe ...`,l:"articles/FontEnd/react/props/index.html#render-props-模式",a:"render-props-模式"},"23.4":{t:"组合模式",p:`如果 Container 的 Children 既有函数也有组件，这种情况应该怎么处理呢？
&lt;Container&gt;
    &lt;Children /&gt;
    { (Contai ...`,l:"articles/FontEnd/react/props/index.html#组合模式",a:"组合模式"},"23.5":{t:"操作Props 抽象Props",p:`::: tip
抽象 props 一般用于跨层级传递 props ，一般不需要具体指出 props 中某个属性，而是将 props 直接传入或者是抽离到子组件中。
:::
`,l:"articles/FontEnd/react/props/index.html#操作props-抽象props",a:"操作props-抽象props"},"23.6":{t:"混入 props",p:`::: details View The Code
function Son(props){
    console.log(props)
    return &lt;div&gt; hello,w ...`,l:"articles/FontEnd/react/props/index.html#混入-props",a:"混入-props"},"23.7":{t:"抽离Props",p:`::: details View The Code
function Son(props){
    console.log(props)
    return &lt;div&gt; hello,w ...`,l:"articles/FontEnd/react/props/index.html#抽离props",a:"抽离props"},"23.8":{t:"props 的显式注入和隐式注入",p:`显式注入
&lt;Father&gt;
    &lt;Son data='{data}' name='123'&gt;
&lt;/Father&gt;

隐式注入
function Father(p ...`,l:"articles/FontEnd/react/props/index.html#props-的显式注入和隐式注入",a:"props-的显式注入和隐式注入"},"23.9":{t:"demo",p:`::: code-group

用于表单状态管理的&lt;Form&gt; 和 &lt;FormItem&gt; 组件

&lt;Form&gt;用于管理表单状态；
&lt;FormItem&gt;用 ...`,l:"articles/FontEnd/react/props/index.html#demo",a:"demo"},"24.0":{t:"# Ref",p:"",l:"articles/FontEnd/react/ref/index.html",a:"ref"},"24.1":{t:"获取Ref的三种方式",p:`
ref是一个字符串
::: details View The Code

/* 类组件 */
class Children extends Component{  
    render=()=&g ...`,l:"articles/FontEnd/react/ref/index.html#获取ref的三种方式",a:"获取ref的三种方式"},"24.2":{t:"转发Ref(跨层级获取Ref)",p:`如果我想在父组件 获取 孙/子 组件的实例

通过回调函数将子组件的Ref作为参数
::: details View The Code

function ParentComponent(){
  c ...`,l:"articles/FontEnd/react/ref/index.html#转发ref-跨层级获取ref",a:"转发ref-跨层级获取ref"},"24.3":{t:"组合转发Ref",p:`::: details View The Code
// 表单组件
class Form extends React.Component{
    render(){
       return &l ...`,l:"articles/FontEnd/react/ref/index.html#组合转发ref",a:"组合转发ref"},"24.4":{t:"高阶组件转发",p:"如果通过高阶组件包裹一个原始类组件，就会产生一个问题，如果高阶组件 HOC 没有处理 ref ，那么由于高阶组件本身会返回一个新组件，所以当使用 HOC 包装后组件的时候，标记的 ref 会指向 HO ...",l:"articles/FontEnd/react/ref/index.html#高阶组件转发",a:"高阶组件转发"},"24.5":{t:"组件通信",p:`
类组件通信: 因为类组件有实例，所以我们可以直接获取实例然后调用实例方法来操作
函数组件通信: 对于函数组件，本身是没有实例的，所以我们要借用forwardRef(使函数组件可以接收Ref) + u ...`,l:"articles/FontEnd/react/ref/index.html#组件通信",a:"组件通信"},"24.6":{t:"函数组件数据缓存",p:`函数组件每一次 render ，函数上下文会重新执行，那么有一种情况就是
在执行一些事件方法改变数据或者保存新数据的时候，有没有必要更新视图，有没有必要把数据放到 state 中。如果视图层更新不依赖 ...`,l:"articles/FontEnd/react/ref/index.html#函数组件数据缓存",a:"函数组件数据缓存"},"25.0":{t:"# 渲染优化",p:"",l:"articles/FontEnd/react/render/index.html",a:"渲染优化"},"25.1":{t:"React 几种控制 render 方法",p:`
第一种就是从父组件直接隔断子组件的渲染，经典的就是 memo，缓存 element 对象。
父组件 render ，子组件有没有必要跟着父组件一起 render ，如果没有必要，则就需要阻断更新
: ...`,l:"articles/FontEnd/react/render/index.html#react-几种控制-render-方法",a:"react-几种控制-render-方法"},"25.2":{t:"useMemo用法",p:`::: details
const cacheSomething = useMemo(create,deps)


create：第一个参数为一个函数，函数的返回值作为缓存值，如上 demo 中把 C ...`,l:"articles/FontEnd/react/render/index.html#usememo用法",a:"usememo用法"},"25.3":{t:"useMemo原理",p:"useMemo 会记录上一次执行 create 的返回值，并把它绑定在函数组件对应的 fiber 对象上，只要组件不销毁，缓存值就一直存在，但是 deps 中如果有一项改变，就会重新执行 create ...",l:"articles/FontEnd/react/render/index.html#usememo原理",a:"usememo原理"},"25.4":{t:"pureComponent",p:`纯组件是一种发自组件本身的渲染优化策略，当开发类组件选择了继承 PureComponent ，就意味这要遵循其渲染规则。规则就是浅比较 state 和 props 是否相等。
基本使用
::: det ...`,l:"articles/FontEnd/react/render/index.html#purecomponent",a:"purecomponent"},"25.5":{t:"pureComponent原理",p:`

pureComponentPrototype有一个prototype属性，isPureReactComponent，这个属性是一个布尔值，用来标识当前组件是否是纯组件，如果是纯组件，那么在更新时， ...`,l:"articles/FontEnd/react/render/index.html#purecomponent原理",a:"purecomponent原理"},"25.6":{t:"pureComponent注意事项",p:`PureComponent可以让组件自发的做一层性能上的调优，但是父组件给是PureComponent的子组件绑定事件要小心，避免两种情况

避免使用箭头函数，不要给是PureComponent子组件 ...`,l:"articles/FontEnd/react/render/index.html#purecomponent注意事项",a:"purecomponent注意事项"},"25.7":{t:"shouldComponentUpdate",p:`有的时候把控制渲染交给React组件本身处理靠不住，那么我们便可以自定义渲染方案决定组建是否更新

使用

class Index extends React.Component {
  state  ...`,l:"articles/FontEnd/react/render/index.html#shouldcomponentupdate",a:"shouldcomponentupdate"},"25.8":{t:"React.Memo",p:`React.memo(Component,compare)
Component: 需要被包裹的组件
compare: 比较函数，用来判断是否需要更新，返回true则不更新，返回false则更新

`,l:"articles/FontEnd/react/render/index.html#react-memo",a:"react-memo"},"25.9":{t:"React.Memo的特点",p:`

memo 当二个参数 compare 不存在时，会用浅比较原则处理 props ，相当于仅比较 props 版本的 pureComponent 。


memo 同样适合类组件和函数组件。


D ...`,l:"articles/FontEnd/react/render/index.html#react-memo的特点",a:"react-memo的特点"},"25.10":{t:"打破渲染限制的方法使Memo和PureComponent失效",p:`
forceUpdate 如果更新状态使用的forceUpdate 而不是 setState 会跳过shouldComponentUpdate的判断，直接更新组件
Context 如果组件依赖于con ...`,l:"articles/FontEnd/react/render/index.html#打破渲染限制的方法使memo和purecomponent失效",a:"打破渲染限制的方法使memo和purecomponent失效"},"25.11":{t:"控制渲染的场景",p:`
大屏展示组件数据量大，渲染耗时长，可以使用React.memo局部更新
表单，React 一般会采用受控组件的模式去管理表单数据层，表单数据层完全托管于 props 或是 state ，而用户操作表 ...`,l:"articles/FontEnd/react/render/index.html#控制渲染的场景",a:"控制渲染的场景"},"27.0":{t:"context",p:"",l:"articles/FontEnd/relevance/context.html",a:"context"},"28.0":{t:"# reducer",p:`
action + state  = new state

`,l:"articles/FontEnd/relevance/reducer.html",a:"reducer"},"28.1":{t:"与state的区别",p:`state是用户触发函数来执行具体的一步一步操作，reducer是把操作整合到一起，用户触发事件名进而执行相应的处理函数
例如：用户触发添加程序, 程序了解到事件名以后去reducer中找到对应的函数 ...`,l:"articles/FontEnd/relevance/reducer.html#与state的区别",a:"与state的区别"},"28.2":{t:"命名原因",p:`reducer是根据reduce命名 ,它接收目前的结果和当前的值，然后返回下一个结果.
React中的reducer也是这样的他们都接受 当前state 和触发的事件action ,然后返回新的st ...`,l:"articles/FontEnd/relevance/reducer.html#命名原因",a:"命名原因"},"28.3":{t:" ",p:"",l:"articles/FontEnd/relevance/reducer.html#",a:""},"28.4":{t:"reduce实现reducer",p:`::: code-group
import tasksReducer from './tasksReducer.js';

let actions = [
  {type: 'added', id:  ...`,l:"articles/FontEnd/relevance/reducer.html#reduce实现reducer",a:"reduce实现reducer"},"28.5":{t:"实现useReducer",p:`通过useState保存当前状态＋action = new state
::: code-group
const App = ()=&gt;{
  const [state,dispatch] = u ...`,l:"articles/FontEnd/relevance/reducer.html#实现usereducer",a:"实现usereducer"},"28.6":{t:"实际用途",p:`useReducer是React提供的一个Hook，用于管理组件的状态（state）。它的实际用途包括：


状态复杂逻辑：当组件的状态逻辑较为复杂，涉及多个状态变化时，可以使用useReducer来 ...`,l:"articles/FontEnd/relevance/reducer.html#实际用途",a:"实际用途"},"29.0":{t:"useRef",p:"",l:"articles/FontEnd/relevance/useRef.html",a:"useref"},"30.0":{t:"base",p:"",l:"articles/FontEnd/vue/base/index.html",a:"base"},"31.0":{t:"# vue",p:"",l:"articles/FontEnd/vue/index.html",a:"vue"},"33.0":{t:"前置",p:"",l:"articles/algorithm/base/index.html",a:"前置"},"34.0":{t:"时间复杂度",p:"",l:"articles/algorithm/base/time.html",a:"时间复杂度"},"35.0":{t:"# Nest主要设计模式",p:"",l:"articles/designModel/IOCDI/index.html",a:"nest主要设计模式"},"35.1":{t:"Dependency Injection 依赖注入",p:`class UserService {
  getList(id) {
    // 获取用户的逻辑 
  }
}

class Controller {
  constructor() {
     ...`,l:"articles/designModel/IOCDI/index.html#dependency-injection-依赖注入",a:"dependency-injection-依赖注入"},"35.2":{t:"Inversion of Control  控制反转",p:`控制反转的本质就是降低耦合度，不再强依赖一些属性和方法。具体的实现方式是DI依赖注入
控制反转需要一个容器，这个容器接手类的控制权
`,l:"articles/designModel/IOCDI/index.html#inversion-of-control-控制反转",a:"inversion-of-control-控制反转"},"35.3":{t:"好处",p:`
解耦和模块化
更方便的依赖注入
配置集中管理

`,l:"articles/designModel/IOCDI/index.html#好处",a:"好处"},"35.4":{t:"如何控制反转",p:`控制反转需要的条件如下

需要一个管理容器  Container
容器需要拥有register方法用来管理容器的注册
容器需要有一个解析的方法 （从容器中解析已注册的依赖项并注入)
让所有的依赖项统一 ...`,l:"articles/designModel/IOCDI/index.html#如何控制反转",a:"如何控制反转"},"35.5":{t:"案例",p:`  abstract class Service {
    getList: () =&gt; void;
    putList: () =&gt; void;
  }

  class Cont ...`,l:"articles/designModel/IOCDI/index.html#案例",a:"案例"},"36.0":{t:"设计模式",p:"",l:"articles/designModel/index.html",a:"设计模式"},"37.0":{t:"<myIndex/>",p:"",l:"index.html",a:"myindex"},"38.0":{t:"# 记录和楠楠的日常生活",p:"",l:"nannan/index.html",a:"记录和楠楠的日常生活"},"39.0":{t:"# 我们的故事",p:"",l:"nannan/story/index.html",a:"我们的故事"},"40.0":{t:"# 根据空格拆分字符串",p:` const str = \`remote_addr：192.168.3.69:48512
status_code：200
content_type：
method：GET
proto：HTTP/1.1 ...`,l:"otherArticles/index.html",a:"根据空格拆分字符串"},"41.0":{t:"<!-- ---",p:`layout :  false
layout: page
&lt;team/&gt; --&gt;
`,l:"team/index.html",a:""}},n={previewLength:100,buttonLabel:"搜索",placeholder:"情输入关键词",allow:[],ignore:[]},r={INDEX_DATA:e,PREVIEW_LOOKUP:t,Options:n};export{r as default};
