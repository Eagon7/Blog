const e={map:'[{"resume":["0.0"],"aop":["1.0"],"中间件":["1.1","2.0"],"全局中间件":["1.2"],"路由中间件":["1.3"],"路由守卫":["1.4"],"拦截器":["1.5","2.2"],"pipe":["1.6"],"exceptionfilter":["1.7","13.1"],"守卫":["2.1"],"管道":["2.3"],"注入基本数据":["3.0"],"案例":["4.0","48.5"],"控制反转":["5.0"],"依赖注入":["5.1"],"nest":["6.0","6.2"],"module":["6.1","6.4"],"provider":["6.3"],"动态module":["6.6"],"hi":["7.0"],"核心概念概览":["7.1"],"重点1":["7.2"],"他代表了一个http请求的执行上下文":["8.0"],"reflect":["9.0"],"circular":["10.0"],"装饰器总结":["11.0"],"optional":["11.1"],"global":["11.2"],"catch":["11.3"],"post":["11.4"],"setmetadata":["11.5"],"headers":["11.6"],"ip":["11.7"],"session":["11.8"],"hostparam":["11.9"],"req":["11.10"],"next":["11.11"],"redirect":["11.12"],"动态模块":["12.0"],"定义":["12.1","12.2"],"forroot":["12.3"],"总结":["12.4","13.4","18.3","19.4","27.11"],"exception切换不同上下文":["13.0"],"guard等切换上下文":["13.2"],"为啥要多俩方法":["13.3"],"http数据传输方式":["14.0"],"urlparam":["14.1"],"form":["14.2","14.3"],"json":["14.4"],"nest实现基本的http请求":["14.5"],"nestjs":["15.0"],"register":["16.0"],"合并装饰器":["17.0"],"自定义装饰器":["17.1"],"全局module和生命周期":["18.0"],"全局模块":["18.1"],"生命周期lifecycle":["18.2"],"多种provider":["19.0"],"注册value值":["19.1"],"动态注册服务":["19.2"],"异步动态注册服务":["19.3"],"文件上传":["20.0"],"语法":["22.0"],"js":["23.0"],"项目列表":["24.0"],"高阶组件hoc":["24.1","25.0"],"两种不同的高阶组件":["25.1"],"属性代理":["25.2"],"反向继承":["25.3"],"编写hoc":["25.4"],"动态加载loading":["25.5"],"事件监控":["25.6"],"权限拦截":["25.7"],"hooks":["26.0","26.2"],"api分类":["26.1"],"useref":["26.3","42.0"],"数据更新驱动类":["26.4"],"usestate":["26.5"],"usereducer":["26.6"],"usecontext":["26.7"],"useimperativehandle":["26.8"],"react":["27.0","28.0","29.0","33.0","35.4","35.5","38.1","38.8","38.9"],"出现背景":["27.1","29.3"],"核心概念":["27.2"],"使用教程":["27.3","30.4"],"自动缓存和数据同步":["27.4"],"加载状态管理":["27.5"],"数据同步和预取":["27.6"],"自动缓存失效处理":["27.7"],"服务器状态更新":["27.8"],"更少的重复代码":["27.9"],"api":["27.10"],"快速上手":["28.1"],"原理分析":["28.2"],"核心api":["28.3"],"常见的状态管理模式":["29.1","30.1"],"flex":["29.2"],"架构特点":["29.4"],"jotai":["30.0","30.2"],"原子式解决了什么问题":["30.3"],"实际使用":["30.14"],"redux":["31.0"],"api介绍":["31.1"],"摘要":["31.2"],"context":["32.0","40.0"],"提供者provider用法":["32.1"],"消费者consumer用法":["32.2"],"生命周期":["34.0"],"useeffect":["34.1"],"uselayouteffect":["34.2"],"useinsertioneffect":["34.3"],"类组件生命周期在函数组件内使用effect替代方案":["34.4"],"渲染调优":["35.0"],"懒加载和异步渲染":["35.1"],"异步渲染":["35.2"],"懒加载":["35.3"],"props":["36.0","36.8"],"监听props改变":["36.1"],"render":["36.2","36.3"],"组合模式":["36.4"],"操作props":["36.5"],"混入":["36.6"],"抽离props":["36.7"],"demo":["36.9"],"ref":["37.0"],"获取ref的三种方式":["37.1"],"转发ref":["37.2"],"组合转发ref":["37.3"],"高阶组件转发":["37.4"],"组件通信":["37.5"],"函数组件数据缓存":["37.6"],"渲染控制":["38.0"],"usememo用法":["38.2"],"usememo原理":["38.3"],"purecomponent":["38.4"],"purecomponent原理":["38.5"],"purecomponent注意事项":["38.6"],"shouldcomponentupdate":["38.7"],"打破渲染限制的方法使memo和purecomponent失效":["38.10"],"控制渲染的场景":["38.11"],"reducer":["41.0"],"与state的区别":["41.1"],"命名原因":["41.2"],"reduce实现reducer":["41.4"],"实现usereducer":["41.5"],"实际用途":["41.6"],"base":["43.0"],"vue":["44.0"],"前置":["46.0"],"时间复杂度":["47.0"],"nest主要设计模式":["48.0"],"dependency":["48.1"],"inversion":["48.2"],"好处":["48.3"],"如何控制反转":["48.4"],"设计模式":["49.0"],"myindex":["50.0"],"记录和楠楠的日常生活":["51.0"],"我们的故事":["52.0"],"根据空格拆分字符串":["53.0"]},{"0":["30.14","31.1"],"1":["1.3","1.7","6.2","7.1","12.1","14.5","25.0","25.4","26.5","29.1","29.4","30.1","30.5","34.2","38.6","38.10","38.11","48.3","53.0"],"2":["6.2","12.2","25.4","30.6"],"3":["30.7","53.0"],"4":["30.8"],"5":["30.9"],"6":["30.10","32.2"],"7":["30.11"],"8":["30.12"],"9":["30.13"],"69":["53.0"],"123":["14.5"],"168":["53.0"],"192":["53.0"],"200":["53.0"],"48512":["53.0"],"后端架构一般都是mvc架构":["1.0"],"mvc是model":["1.0"],"view":["1.0","30.6","30.8","30.9","30.10","36.6","36.7","37.1","37.2","37.3","37.5"],"controller的简写":["1.0"],"请求一般会先发送到controller":["1.0"],"中间件是express的概念":["1.1"],"middleware":["1.2","31.2"],"ts":["1.2","1.4","1.5","1.7","4.0","9.0","11.8","11.9","11.12","12.1","12.2","12.3","13.1","13.2","13.3","14.5","17.1","19.1","19.2","26.3","26.5","30.14","34.1","41.4"],"main":["1.2"],"路由中间件首先要创建一个中间件类":["1.3"],"然后在路由上使用":["1.3"],"创建中间件类":["1.3"],"nest":["1.3","1.5","1.6","14.5","18.2","19.0"],"guard":["1.4","2.1","11.5","13.4"],"guard是路由守卫的意思":["1.4"],"可以用于在调用某个controller之前判断权限":["1.4"],"返回true或false来决定是否放行":["1.4"],"n":["1.4","1.7"],"g":["1.4","1.5","1.7"],"gu":["1.4"],"auth":["1.4"],"guards":["1.4"],"role":["1.4"],"no":["1.4","1.5","1.7"],"spec":["1.4","1.5","1.7"],"image":["1.4"],"code":["1.4","1.7","11.3","11.10","12.2","14.5","19.0","25.7","26.3","27.9","30.6","30.8","30.9","30.10","30.14","32.2","34.4","36.6","36.7","36.9","37.1","37.2","37.3","37.5","38.1","41.4","41.5","53.0"],"group":["1.4","1.7","11.3","11.10","12.2","14.5","19.0","25.7","26.3","27.9","30.14","32.2","34.4","36.9","37.5","38.1","41.4","41.5"],"interceptor":["1.5","13.0"],"拦截器是在controller之前之后执行的一段代码":["1.5"],"可以用来做一些通用的逻辑":["1.5"],"比如日志":["1.5"],"异常处理等等":["1.5"],"logger":["1.5"],"import":["1.5","13.1","17.1","27.9","30.6","30.14","35.4","41.4"],"callhandler":["1.5"],"executioncontext":["1.5","13.0"],"injectable":["1.5","1.7","3.0","4.0","9.0","13.2"],"nestinterceptor":["1.5"],"from":["1.5","13.1","27.9","30.14","41.4"],"nestjs":["1.5","7.2"],"common":["1.5"],"observable":["1.5"],"tap":["1.5"],"pipe是管道的意思":["1.6"],"用来对参数做校验和转换":["1.6"],"除了路由的权限控制":["1.6"],"目标":["1.6"],"controller":["1.6","6.1","9.0","11.9","14.5","18.2"],"之前之后的处理这些都是通用逻辑外":["1.6"],"对参数的处理也是一个通用的逻辑":["1.6"],"所以":["1.6"],"也抽出了对应的切面":["1.6"],"也就是":["1.6"],"可以对抛出的异常做处理":["1.7"],"返回对应的响应":["1.7"],"创建一个filter":["1.7"],"filter":["1.7"],"test":["1.7"],"flat":["1.7"],"validate":["1.7"],"pipe":["1.7"],"export":["1.7","3.0","4.0","12.1","12.3","13.1","13.2","25.5","25.7","27.9","30.14","37.1"],"class":["1.7","3.0","4.0","11.5","12.1","13.1","13.2","25.3","25.5","37.1","37.3","38.4","38.6","38.7","48.1","48.5"],"validatepipe":["1.7"],"implements":["1.7","13.1"],"pipetransform":["1.7"],"transform":["1.7"],"value":["1.7"],"any":["1.7"],"metadata":["1.7"],"argumentmetadata":["1.7"],"if":["1.7"],"info":["2.0","26.8","35.2"],"存在意义":["2.0"],"处理http请求的函数":["2.0"],"他可以在请求到达控制器之前":["2.0"],"之后执行一些操作":["2.0"],"他可以是全局的也可以是局部的":["2.0"],"场景":["2.0","26.3"],"身份验证":["2.0"],"日志记录":["2.0"],"是一种用于保护路由的机制":["2.1"],"他可以在请求到达控制器之前或者之后执行一些操作":["2.1"],"守卫可以用于实现身份验证":["2.1"],"权限控制":["2.1"],"缓存等功能":["2.1"],"在nestjs中收尾可以是全局的也可以是局部的":["2.1"],"守卫路由":["2.1"],"execution":["2.1"],"context":["2.1","32.2"],"处理http请求和响应的函数":["2.2"],"在请求到达控制器之前之后执行一些操作":["2.2"],"拦截器可以实现日志记录":["2.2"],"错误处理":["2.2"],"数据转换":["2.2"],"在nestjs中拦截器可以是全局的也可局部":["2.2"],"管道是数据流入controller前进行的一波数据处理":["2.3"],"因为普通数据服务不是class":["3.0"],"所以要使用":["3.0"],"inject来注入":["3.0"],"typescript":["3.0","4.0","30.6","48.1","48.5"],"module":["3.0","9.0","12.1","12.2","12.4","18.2","19.2"],"providers":["3.0"],"provide":["3.0"],"app":["3.0","27.9","41.5"],"name":["3.0","14.5","28.3","36.4","38.4"],"usevalue":["3.0"],"使用普通值":["3.0"],"authservice":["3.0"],"第三方发送短信服务":["4.0"],"根据不同配置使用不同的第三方运营商":["4.0"],"sms":["4.0"],"serivce":["4.0"],"appcontroller":["4.0"],"constructor":["4.0"],"private":["4.0"],"ali":["4.0"],"aliservice":["4.0"],"tencent":["4.0"],"ioc":["5.0","5.1"],"di":["5.1"],"的具体实现":["5.1"],"请求声明周期":["6.0"],"service的关系":["6.1"],"提供了一个模块化的方式来组织和管理您的应用程序的代码":["6.1"],"请求生命周期":["6.2"],"img":["6.2"],"java":["6.2"],"收到请求":["6.2"],"提供服务":["6.3"],"用于表示应用程序中可注入的任何东西":["6.3"],"除了服务":["6.3"],"还可以提供其他类型的对象":["6.3"],"模块是一个子程序":["6.4"],"用于定义控制器":["6.4"],"提供者或向其他模块开放提供者":["6.4"],"开放模块的api":["6.4"],"默认情况下控制器":["6.4"],"提供者在当前模块可用":["6.4"],"我是eagon":["7.0"],"模块":["7.1"],"modules":["7.1"],"提供了许多属性和方法":["8.0"],"可用于在请求的生命周期内访问":["8.0"],"definemetadata":["9.0"],"tip":["9.0","18.3","19.4","20.0"],"nest中使用的是reflect":["9.0"],"definemetadata来实现":["9.0"],"get等装饰器的功能":["9.0"],"它的作用是在类上定义元数据":["9.0"],"use":["9.0"],"如果设置了propertykey":["9.0"],"还可以再具体的属性上定义元数据":["9.0"],"单独为某个属性设置元数据":["9.0"],"metadatakey":["9.0"],"dependency如何解决":["10.0"],"为什么会出现circulr":["10.0"],"dependency":["10.0"],"使provider为可选":["11.1"],"当controller需要注入一个provider":["11.1"],"如果这个provider不存在的话":["11.1"],"使provider全局可用":["11.2"],"当一个module被设置为":["11.2"],"exceptionfilter":["11.3"],"是处理抛出的未捕获异常的":["11.3"],"通过":["11.3","11.6","11.7","11.8","14.5"],"来指定处理的异常":["11.3"],"如果是post请求":["11.4"],"可以使用":["11.4"],"body获取到请求体":["11.4"],"我们一般用":["11.4"],"dto":["11.4"],"handle":["11.5"],"和":["11.5","12.3","13.0","30.3","34.2","36.9","38.4"],"可以通过":["11.5","25.4"],"制定元信息数据":["11.5"],"提供给守卫":["11.5"],"拦截器等使用":["11.5"],"然后在":["11.5"],"todo":["11.8"],"details":["11.8","26.3","26.5","30.6","30.7","30.8","30.9","30.10","36.6","36.7","37.1","37.2","37.3","37.5","38.2","38.4"],"session拿到session":["11.8"],"get":["11.8","11.12","14.5","53.0"],"用于取域名部分的参数":["11.9"],"除了可以制定具体path生效外":["11.9"],"还可以指定host":["11.9"],"response":["11.10"],"直接注入request":["11.10"],"response属性":["11.10"],"前面取的是request属性":["11.10"],"当然也可以注入request对象":["11.10"],"除了注入":["11.11"],"res不会返回响应外":["11.11"],"注入":["11.11"],"next也不会":["11.11"],"当你有两个handler来处理同一个路由的时候":["11.11"],"重定向":["11.12"],"provider":["12.0","18.0","18.2","30.12","32.0","32.1","32.2"],"第一种方法是在module中写一个静态的注册方法注册":["12.1"],"config":["12.1"],"bbb":["12.2"],"imports":["12.2","19.2"],"configurablemoduleclass":["12.2"],"forfeature":["12.3"],"const":["12.3","25.7","26.5","27.9","30.14","32.1","38.2","41.5","53.0"],"module可以传入":["12.4"],"options根据配置生成对应的module":["12.4"],"还可以吧传入的options作为provider注入到别的对象里":["12.4"],"建议的动态产生":["12.4"],"的方法名有":["12.4"],"register":["12.4"],"nestjs支持":["13.0"],"http服务":["13.0"],"websocket服务":["13.0"],"tcp通信服务":["13.0"],"不同类型的服务在guard":["13.0"],"等取到的功能不同":["13.0"],"导致无法复用":["13.0"],"argumenthost":["13.0"],"取到上下文和参数":["13.0"],"参数":["13.1"],"exceptions":["13.1"],"argumentshost":["13.1"],"切换不同上下文":["13.1"],"aaaexception":["13.1"],"aaa":["13.1"],"exception":["13.1","13.4"],"catch":["13.1"],"myexceptionfilter":["13.1"],"t":["13.1"],"getclass":["13.3"],"gethandler":["13.3"],"比如守卫验证权限使":["13.3"],"需要获取目标方法的元数据":["13.3"],"就可以通过":["13.3"],"方法获取到目标方法的元数据":["13.3"],"然后比对决定是否放行":["13.3"],"为了让filter":["13.4"],"支持http":["13.4"],"ws":["13.4"],"url":["14.0"],"query":["14.1","14.5","27.0"],"都属于get路径传参":["14.1"],"tsx":["14.1","27.9","53.0"],"params":["14.1"],"router1":["14.1","14.5"],"urlencoded":["14.2","14.4"],"直接用表单提交数据":["14.2"],"提交的就是这种":["14.2"],"他和query的区别就是把查询的query放在了body里":["14.2"],"然后指定下":["14.2"],"content":["14.2","25.5","53.0"],"type":["14.2","41.4","53.0"],"是":["14.2","35.2"],"application":["14.2"],"data":["14.3","27.10"],"不再是通过":["14.3"],"分隔数据":["14.3"],"form":["14.4","36.9","37.3"],"param":["14.5"],"http":["14.5","53.0"],"id":["14.5","48.1"],"router":["14.5","28.0"],"在":["14.5","26.8"],"里":["14.5"],"装饰器来取":["14.5"],"find":["14.5"],"findall":["14.5"],"string":["14.5"],"接收账号密码argon2":["16.0"],"装饰器太多了":["17.0"],"有时候我们需要合并装饰器":["17.0"],"这样就可以减少代码量":["17.0"],"模块导出":["18.0"],"注意":["18.1"],"全局模块不推荐经常使用":["18.1"],"在启动的时候":["18.2"],"会递归解析":["18.2"],"依赖":["18.2"],"扫描其中的":["18.2"],"注入它的依赖":["18.2"],"模块可以":["18.3"],"实现了ioc":["19.0"],"从main文件臊面":["19.0"],"分析module引用及依赖中的关系":["19.0"],"自动把provider注入到目标对象":["19.0"],"当需要异步获取provider时":["19.3"],"可以使用usefactory的async版本":["19.3"],"例如":["19.3"],"一般情况provider通过":["19.4"],"injectable声明":["19.4"],"总结":["25.0"],"强化":["25.0","25.4"],"props":["25.0","25.4","26.8","36.3","36.6","38.4","38.9"],"常用的高阶组件有":["25.1"],"就是用组件包裹一层代理组件":["25.2"],"在代理组件上":["25.2"],"可以做一些":["25.2"],"对源组件的强化操作":["25.2"],"这里注意属性代理返回的是一个新组件":["25.2"],"被包裹的原始组件":["25.2"],"将在新的组件里被挂载":["25.2"],"jsx":["25.2","25.3","25.5","25.6","25.7","32.1","32.2","34.3","34.4","36.2","36.3","36.4","36.6","36.7","36.8","36.9","37.1","37.2","37.3","37.5","38.1","38.2","38.4","38.6","38.7"],"反向继承和属性代理有一定的区别":["25.3"],"在于包装后的组件继承了原始组件本身":["25.3"],"所以此时无须再去挂载业务组件":["25.3"],"index":["25.3","25.7","37.3","38.6","38.7","41.4"],"什么时候使用hoc":["25.4"],"强化props":["25.4"],"就是在原始组件的":["25.4"],"基础上":["25.4"],"加入一些其他的":["25.4"],"强化原始组件功能":["25.4"],"控制渲染":["25.4"],"hoc":["25.4","25.6","37.4"],"反向继承模式":["25.4"],"super":["25.4"],"default":["25.5","25.7","27.9","37.1"],"function":["25.5","25.6","25.7","27.9","38.1"],"dynamichoc":["25.5"],"loadrouter":["25.5"],"return":["25.5","34.1","37.3","38.1"],"extends":["25.5","37.1","37.3","38.4","38.7"],"react":["25.5","25.7","26.8","27.9","32.2","34.0","34.3","34.4","35.2","37.3","38.4","38.7"],"component":["25.5","37.1","37.3","38.7"],"不一定非要对组件本身做些什么":["25.6"],"也可以单纯增加一些事件监听":["25.6"],"错误监控":["25.6"],"以下代码hoc":["25.6"],"只对组件内的点击事件做一个监听效果":["25.6"],"clickhoc":["25.6"],"通过context传递权限":["25.7"],"permission":["25.7"],"createcontext":["25.7"],"关键词":["26.1"],"concurrent":["26.1"],"table":["26.1"],"tr":["26.1"],"th":["26.1"],"使用范围":["26.1"],"hooks":["26.1"],"稳定引用":["26.3"],"获取dom节点":["26.3"],"获取上一次的值":["26.3"],"闭包":["26.3"],"异步访问到旧变量的问题":["26.3"],"典型的闭包循环案例":["26.3"],"每次循环调用settimeout的时候都会保存当前的作用域":["26.3"],"state":["26.5","37.6","38.4","38.7","41.5","41.6"],"setstate":["26.5"],"initialstate":["26.5"],"参数接收一个初始值":["26.5"],"返回一个数组":["26.5"],"数组的第一个元素是当前的state":["26.5"],"第二个元素是更新state的函数":["26.5"],"注意事项":["26.5"],"对于拥有许多状态更新逻辑的组件来说":["26.6"],"过于分散的事件处理程序可能会令人不知所措":["26.6"],"对于这种情况":["26.6"],"你可以将组件的所有状态更新":["26.6"],"增删改查":["26.6"],"逻辑整合到一个外部函数中":["26.6"],"这个函数叫作":["26.6"],"reducer":["26.6","31.1"],"reducer是弥补usestate在逻辑复杂情况下的缺陷":["26.6"],"它分为三个步骤":["26.6"],"作用":["26.7"],"解决了什么问题":["26.8"],"子组件通过ref抛出方法供父组件调用":["26.8"],"react函数":["26.8"],"组件":["26.8","36.9"],"父组件需要直接访问子组件的实例方法或属性的问题":["26.8"],"中":["26.8","37.6"],"父组件通常通过":["26.8"],"向子组件传递数据和回调函数来实现组件之间的通信":["26.8"],"这种方式可以确保数据流的单向性":["26.8"],"解决问题":["27.1"],"灵魂拷问q":["27.1"],"为什么用axios不可以":["27.1"],"为什么需要出现react":["27.1"],"querya":["27.1"],"尽管可以使用普通的":["27.1"],"axios":["27.1"],"解决普通请求代码重复":["27.2"],"befor":["27.9"],"as":["27.9"],"存储":["27.9"],"后端返回数据":["27.9"],"zen":["27.9"],"setzen":["27.9"],"usestate":["27.9"],"加载状态":["27.9"],"isloading":["27.9","27.10"],"setisloading":["27.9"],"false":["27.9"],"是否请求成功":["27.9"],"iserror":["27.9"],"setiserror":["27.9"],"apiname":["27.10"],"are":["27.10"],"查询返回的数据":["27.10"],"表示查询是否正在加载中":["27.10"],"后端概念":["28.0"],"effect":["28.3","34.4"],"demo":["28.3"],"link":["28.3"],"普通链接":["28.3"],"全局存储":["29.0"],"global":["29.1","30.1"],"全局式":["29.1","30.1"],"架构":["29.2"],"解决痛点":["29.3"],"flux架构解决前端应用程序中状态管理和数据流动的复杂性问题":["29.3"],"在传统的mvc":["29.3"],"详细介绍":["29.4"],"flux架构通过引入单向数据流的概念":["29.4"],"将数据的流动变得可控和可预测":["29.4"],"它明确了数据流动的路径":["29.4"],"并将状态的修改限制在特定的流程中":["29.4"],"这样做的好处包括":["29.4"],"易于追踪和调试":["29.4"],"由于数据流是单向的":["29.4"],"引用来源":["30.0"],"原子状态管理":["30.2"],"reacthook":["30.3"],"使state的":["30.3"],"拆分":["30.3"],"创建":["30.5"],"atom":["30.5","30.14"],"派生atom":["30.5"],"使用":["30.5","38.7"],"useatom":["30.5"],"异步派生":["30.6"],"the":["30.6","30.8","30.9","30.10","36.6","36.7","37.1","37.2","37.3","37.5"],"函数组件内更新方式":["30.7"],"atom内更新方式":["30.8"],"异步更新atom":["30.9"],"区别于第二条异步获取":["30.9"],"异步更新不会阻塞线程":["30.9"],"渲染问题":["30.10"],"当我们点击add时":["30.10"],"发现a和b都重新渲染了":["30.10"],"但是问题来了":["30.10"],"a为什么要重新渲染呀":["30.10"],"a只是触发了更新操作":["30.10"],"store":["30.13","30.14"],"createstore":["30.14"],"jotai":["30.14"],"mystore":["30.14"],"countatom":["30.14"],"纯函数":["31.1"],"中间件":["31.2"],"consumer":["32.0"],"themeprovider":["32.1"],"themecontext":["32.1"],"对于新版本想要获取":["32.2"],"的消费者":["32.2"],"提供了3种形式":["32.2"],"①":["32.2","36.2"],"类组件之contexttype":["32.2"],"方式":["32.2"],"v16":["32.2"],"提供了":["32.2"],"contexttype":["32.2"],"静态属性":["32.2"],"用来获取上面":["32.2"],"destory":["34.1"],"useeffect":["34.2","34.3","34.4","36.1"],"不同的地方是采用了同步执行":["34.2"],"在介绍":["34.3"],"用途之前":["34.3"],"先看一下":["34.3"],"的执行时机":["34.3"],"console":["34.3","38.1"],"log":["34.3","38.1"],"执行":["34.3"],"模块渲染后":["34.4"],"componentdidmount":["34.4"],"请求数据":["34.4"],"事件监听":["34.4"],"操纵dom":["34.4"],"切记":["34.4"],"dep":["34.4"],"这里要记住":["34.4"],"这样当前":["34.4"],"没有任何依赖项":["34.4"],"也就只有初始化执行一次":["34.4"],"模块卸载前":["34.4"],"componentwillunmount":["34.4"],"suspense":["35.2"],"悬念":["35.2"],"提出的一种同步的代码来实现异步操作的方案":["35.2"],"suspense可以让组件":["35.2"],"动态加载":["35.3"],"lazy":["35.4"],"接受一个函数":["35.4"],"这个函数需要动态调用":["35.4"],"它必须返回一个":["35.4"],"promise":["35.4"],"该":["35.4"],"lazy和suspense实现动态加载原理":["35.5"],"函数组件中可以用":["36.1"],"children":["36.2","36.3","36.4","37.1","38.1","38.4"],"模式":["36.2","36.3"],"container":["36.3","36.4"],"containerprops":["36.3","36.4"],"如果":["36.4"],"的":["36.4"],"既有函数也有组件":["36.4"],"这种情况应该怎么处理呢":["36.4"],"haha":["36.4"],"首先在":["36.4"],"抽象props":["36.5"],"的显式注入和隐式注入":["36.8"],"显式注入":["36.8"],"功能":["36.9"],"用于表单状态管理的":["36.9"],"formitem":["36.9"],"用于管理表单状态":["36.9"],"用于管理":["36.9"],"input":["36.9"],"输入框组件":["36.9"],"编写的组件能够实现的功能是":["36.9"],"①form":["36.9"],"组件可以被":["36.9"],"ref":["36.9","37.4","37.5"],"获取实例":["36.9"],"然后可以调用实例方法":["36.9"],"submitform":["36.9"],"获取表单内容":["36.9"],"用于提交表单":["36.9"],"ref是一个字符串":["37.1"],"类组件":["37.1"],"render":["37.1","37.3","37.6","38.1"],"div":["37.1","37.3","38.1"],"hello":["37.1"],"world":["37.1"],"跨层级获取ref":["37.2"],"如果我想在父组件":["37.2"],"获取":["37.2"],"孙":["37.2"],"子":["37.2"],"组件的实例":["37.2"],"通过回调函数将子组件的ref作为参数":["37.2"],"表单组件":["37.3"],"如果通过高阶组件包裹一个原始类组件":["37.4"],"就会产生一个问题":["37.4"],"如果高阶组件":["37.4"],"没有处理":["37.4"],"那么由于高阶组件本身会返回一个新组件":["37.4"],"所以当使用":["37.4"],"包装后组件的时候":["37.4"],"标记的":["37.4"],"类组件通信":["37.5"],"因为类组件有实例":["37.5"],"所以我们可以直接获取实例然后调用实例方法来操作":["37.5"],"函数组件通信":["37.5"],"对于函数组件":["37.5"],"本身是没有实例的":["37.5"],"所以我们要借用forwardref":["37.5"],"使函数组件可以接收ref":["37.5"],"useimperativehandle":["37.5"],"一方面第一个参数接受父组件传递的":["37.5"],"对象":["37.5","38.1"],"另一方面第二个参数是一个函数":["37.5"],"函数返回值":["37.5"],"作为":["37.5"],"对象获取的内容":["37.5"],"向传下来的ref传递方法":["37.5"],"forwardref":["37.5"],"函数组件每一次":["37.6"],"函数上下文会重新执行":["37.6"],"那么有一种情况就是":["37.6"],"在执行一些事件方法改变数据或者保存新数据的时候":["37.6"],"有没有必要更新视图":["37.6"],"有没有必要把数据放到":["37.6"],"如果视图层更新不依赖想要改变的数据":["37.6"],"那么":["37.6"],"改变带来的更新效果就是多余的":["37.6"],"几种控制":["38.1"],"方法":["38.1"],"第一种就是从父组件直接隔断子组件的渲染":["38.1"],"经典的就是":["38.1"],"memo":["38.1","38.8","38.9"],"缓存":["38.1"],"element":["38.1"],"父组件":["38.1"],"子组件有没有必要跟着父组件一起":["38.1"],"如果没有必要":["38.1"],"则就需要阻断更新":["38.1"],"导致不必要更新的demo":["38.1"],"子组件":["38.1"],"number":["38.1"],"子组件渲染":["38.1"],"let":["38.1","41.4"],"us":["38.1"],"learn":["38.1"],"cachesomething":["38.2"],"usememo":["38.2","38.3"],"会记录上一次执行":["38.3"],"create":["38.3"],"的返回值":["38.3"],"并把它绑定在函数组件对应的":["38.3"],"fiber":["38.3"],"对象上":["38.3"],"只要组件不销毁":["38.3"],"缓存值就一直存在":["38.3"],"纯组件是一种发自组件本身的渲染优化策略":["38.4"],"当开发类组件选择了继承":["38.4"],"就意味这要遵循其渲染规则":["38.4"],"规则就是浅比较":["38.4"],"是否相等":["38.4"],"基本使用":["38.4"],"纯组件本身":["38.4"],"purecomponentprototype有一个prototype属性":["38.5"],"ispurereactcomponent":["38.5"],"这个属性是一个布尔值":["38.5"],"用来标识当前组件是否是纯组件":["38.5"],"如果是纯组件":["38.5"],"那么在更新时":["38.5"],"会先进行浅比较":["38.5"],"如果相等":["38.5"],"就不会进行更新":["38.5"],"如果不相等":["38.5"],"才会进行更新":["38.5"],"这个属性在更新组件":["38.5"],"updateclassinstance":["38.5"],"purecomponent可以让组件自发的做一层性能上的调优":["38.6"],"但是父组件给是purecomponent的子组件绑定事件要小心":["38.6"],"避免两种情况":["38.6"],"避免使用箭头函数":["38.6"],"不要给是purecomponent子组件绑定箭头函数":["38.6"],"因为父组件每一次render如果是箭头函数绑定的话":["38.6"],"都会重新声场一个箭头函数":["38.6"],"purecomponent的浅比较就会失效":["38.6"],"参数函数指针改变":["38.6"],"导致子组件每一次都会重新渲染":["38.6"],"有的时候把控制渲染交给react组件本身处理靠不住":["38.7"],"那么我们便可以自定义渲染方案决定组建是否更新":["38.7"],"memo的特点":["38.9"],"当二个参数":["38.9"],"compare":["38.9"],"不存在时":["38.9"],"会用浅比较原则处理":["38.9"],"相当于仅比较":["38.9"],"版本的":["38.9"],"purecomponent":["38.9"],"同样适合类组件和函数组件":["38.9"],"大屏展示组件数据量大":["38.11"],"渲染耗时长":["38.11"],"可以使用react":["38.11"],"action":["41.0","41.5"],"state是用户触发函数来执行具体的一步一步操作":["41.1"],"reducer是根据reduce命名":["41.2"],"js":["41.4","41.5"],"tasksreducer":["41.4"],"actions":["41.4"],"added":["41.4"],"通过usestate保存当前状态":["41.5"],"new":["41.5"],"usereducer是react提供的一个hook":["41.6"],"用于管理组件的状态":["41.6"],"injection":["48.1"],"依赖注入":["48.1"],"userservice":["48.1"],"getlist":["48.1","48.5"],"获取用户的逻辑":["48.1"],"adminservice":["48.1"],"of":["48.2"],"控制反转需要的条件如下":["48.4"],"abstract":["48.5"],"service":["48.5"],"void":["48.5"],"putlist":["48.5"],"str":["53.0"],"remote":["53.0"],"addr":["53.0"],"status":["53.0"],"method":["53.0"],"proto":["53.0"],"layout":["54.0"]},{"0":["11.9","11.10","26.3","38.1","38.7","53.0"],"1":["12.2","18.2","26.6","30.8","34.1","37.6","38.1","38.4","41.4","48.4"],"2":["7.1","25.0","26.5","26.6","29.4","37.6","38.6","38.11","41.4"],"3":["6.2","26.6","29.4"],"4":["6.2"],"5":["6.2","26.1","53.0"],"10":["26.3","53.0"],"11":["53.0"],"14":["53.0"],"18":["38.4"],"123":["14.1"],"200":["27.9"],"605":["53.0"],"789":["14.1"],"9226":["53.0"],"然后由它调用model层的service来完成业务逻辑":["1.0"],"最后返回view":["1.0"],"tip":["1.0","36.5","37.6"],"什么是aop":["1.0"],"aspect":["1.0"],"nest底层是express":["1.1"],"async":["1.2","27.9"],"function":["1.2","25.2","32.1","34.4","35.2","36.3","36.6","36.7","37.2","38.5","38.9"],"bootstrap":["1.2"],"const":["1.2","1.5","4.0","25.4","25.6","30.6","30.8","30.9","32.0","32.2","36.4","37.2","37.3","38.4"],"app":["1.2"],"generate":["1.3"],"middleware":["1.3"],"logger":["1.3"],"no":["1.3","1.6","2.1"],"spec":["1.3","1.6","2.1"],"flat":["1.3","1.6"],"roleguard":["1.4"],"守卫要实现canactivate接口":["1.4"],"可以从参数context中获取请求信息":["1.4"],"然后做一些权限验证":["1.4"],"返回true或false":["1.4"],"injectable":["1.4","1.6","2.1","2.2","13.3"],"export":["1.4","1.5","2.1","2.2","11.3","11.4","12.2","13.0","32.1","35.4","38.1","38.6"],"class":["1.4","1.5","2.2","11.3","11.4","13.0","25.2","32.2","37.5","38.1"],"implements":["1.4","1.5","2.2","11.3","13.2"],"canactivate":["1.4","13.2","13.3"],"context":["1.4","1.5","13.2"],"rxjs":["1.5"],"timeinterceptor":["1.5"],"intercept":["1.5"],"next":["1.5"],"any":["1.5","48.5"],"starttime":["1.5"],"date":["1.5"],"now":["1.5"],"return":["1.5","1.7","12.1","14.5","25.2","25.3","25.6","34.4","36.6","37.2","38.4","41.5"],"handle":["1.5"],"pipe":["1.5"],"console":["1.5","11.8","13.1","14.5","30.14","36.6","36.7","37.1","37.2","38.4","38.9"],"g":["1.6","2.1"],"validate":["1.6"],"ts":["1.6","11.1","11.3","11.4","11.5","11.6","11.10","11.11","13.0","17.0","19.0","19.3"],"import":["1.6","11.5","13.3","17.0","30.5","36.9","37.5","38.9"],"argumentmetadata":["1.6"],"pipetransform":["1.6"],"from":["1.6","11.5","13.3","30.6","36.9","37.5","38.9"],"nestjs":["1.6","11.5","13.3","20.0"],"common":["1.6","13.3"],"number":["1.7","14.5","38.4"],"isnan":["1.7"],"parseint":["1.7"],"此时pipe验证参数失败":["1.7"],"抛出异常错误被exceptionfilter接收":["1.7"],"参数传递给exception":["1.7"],"throw":["1.7"],"new":["1.7","12.3","30.9","48.1"],"badrequestexception":["1.7"],"我想要的是number类型":["1.7"],"pipe抛出异常进入异常过滤器":["1.7"],"catch":["1.7"],"testfilter":["1.7"],"exception":["1.7"],"错误处理":["2.0"],"details":["2.0","30.5","36.4"],"中间件可以执行以下任务":["2.0"],"执行任何代码操作":["2.0"],"对请求对象进行更改":["2.0"],"结束当前请求生命周期":["2.0"],"调用下一个中间件函数":["2.0"],"如果当前中间件没有":["2.0"],"手动结束生命周期":["2.0"],"执行上下文":["2.1"],"typescript":["2.1","2.2","5.1","30.5","30.7","30.8","30.9"],"n":["2.1"],"gu":["2.1"],"xxx":["2.1"],"logginginterceptor":["2.2"],"nestinterceptor":["2.2"],"其中数据处理包含了对数据的转换":["2.3"],"constractor":["3.0"],"inject":["3.0","4.0"],"private":["3.0","48.5"],"appname":["3.0"],"注册类":["3.0"],"使用类将提供者注册到服务是最常用的方式":["3.0"],"autherservice":["3.0"],"以上是简写形式":["3.0"],"完整写法应该如下":["3.0"],"tencentservices":["4.0"],"smsservice":["4.0"],"base":["4.0"],"key":["4.0","9.0","36.9","48.5"],"baseconfig":["4.0"],"configtype":["4.0"],"typeof":["4.0"],"getsmsservice":["4.0"],"type":["4.0"],"string":["4.0","30.9","48.5"],"面向对象中的设计原则":["5.0"],"用来减少计算机代码之前的耦合度":["5.0"],"在类以外的地方提供服务":["5.1"],"类内部调用的是该具体服务的抽象":["5.1"],"provider":["6.0"],"同时还允许您使用依赖注入和模块之间的依赖关系来构建更加可扩展的应用程序":["6.1"],"module是nestjs应用程序的基本构建块":["6.1"],"每个模块都有一个独立的作用域":["6.1"],"其中包含一组相关的controller":["6.1"],"全局绑定的中间件":["6.2"],"模块绑定的中间件":["6.2"],"全局守卫":["6.2"],"控制层守卫":["6.2"],"例如":["6.3"],"factory":["6.3"],"工厂":["6.3"],"配置对象":["6.3"],"连接对象等":["6.3"],"提供者使用":["6.3"],"即模块作用域":["6.4"],"若果向其他模块提供服务可以将提供者定义在export属性中":["6.4"],"其他模块需要再imports属性中引入当前模块":["6.4"],"模块是":["6.4"],"设计模式模式":["6.4"],"的":["6.4","9.0","11.4","35.4"],"多个模块共享当前模块实例":["6.4"],"今天给大家分享nest基础系列":["7.0"],"组合所有逻辑的地方":["7.1"],"我理解为di的container":["7.1"],"控制器":["7.1"],"处理https时的生命周期":["7.2"],"executioncontext是在每个请求到达控制器之前被nestjs封装产生的":["8.0"],"他的请求是将请求的上下文":["8.0"],"metadatavalue":["9.0"],"target":["9.0"],"propertykey":["9.0"],"getmetadata":["9.0"],"元数据存放在哪里":["9.0"],"存在类或者对象上呀":["9.0"],"如果给类或者类的静态属性添加元数据":["9.0"],"那就保存在类上":["9.0"],"如果给实例属性添加元数据":["9.0"],"那就保存在对象上":["9.0"],"用类似":["9.0"],"metadata":["9.0"],"有两个模块a和b":["10.0"],"a依赖b":["10.0"],"b依赖a":["10.0"],"这样就形成了循环依赖":["10.0"],"那么会报错":["11.1"],"把它设置为可选的会避免这个问题":["11.1"],"global时":["11.2"],"export属性全局可用":["11.2"],"httpexception":["11.3"],"aaafilter":["11.3"],"来接受请求体里的参数":["11.4"],"或者":["11.5"],"interceptor":["11.5"],"里取出来":["11.5"],"code":["11.5","13.0","25.4","30.5","30.7","36.4"],"group":["11.5","13.0","25.4"],"controller":["11.5","11.10","13.0","29.3","48.1"],"装饰器取某个请求头":["11.6"],"或者全部请求头":["11.6"],"拿到请求的ip":["11.7"],"log":["11.8","13.1","14.5","30.14","36.6","36.7","37.1","37.2","38.4","38.9"],"host":["11.9","11.10","13.1","53.0"],"可以再第一个handler里注入next":["11.11"],"调用它来吧请求转发到第二个handler":["11.11"],"get":["11.11","30.14"],"eee":["11.11"],"abc":["11.12"],"http":["11.12","14.2"],"baidu":["11.12"],"是可以通过":["12.0"],"usefactory":["12.0"],"configmodule":["12.1"],"static":["12.1","32.2"],"register":["12.1","12.2"],"options":["12.1","12.3"],"configoptions":["12.1"],"dynamicmodule":["12.1"],"providers":["12.1","19.0","19.2"],"aaa":["12.2"],"configurablemoduleclass":["12.3"],"module":["12.3","19.0","19.1","19.3","25.5"],"token":["12.3"],"configurablemodulebuilder":["12.3"],"forroot":["12.4"],"forfeature":["12.4"],"3种":["12.4"],"用一次注册一次":["12.4"],"只注册一次":["12.4"],"获取到哪个服务":["13.0"],"然后在代码中if":["13.0"],"else进行处理":["13.0"],"执行顺序demo":["13.0"],"a":["13.1","14.2","14.5"],"错误错误":["13.1"],"b":["13.1","14.2"],"错误啦":["13.1"],"guardexceptionguard":["13.2"],"executioncontext":["13.3","13.4","17.1"],"reflector":["13.3"],"rpc等场景下复用":["13.4"],"nest":["13.4"],"设计了argumenthost":["13.4"],"和":["13.4"],"param":["14.0"],"query":["14.0","27.1"],"id":["14.1","41.4"],"x":["14.2","53.0"],"www":["14.2"],"jsx":["14.2","25.4","35.2","35.4","38.5","38.8","38.9"],"post":["14.2"],"而是用":["14.3"],"一串数字做为":["14.3"],"boundary":["14.3"],"分隔符":["14.3"],"因为不是":["14.3"],"需要对内容做":["14.4"],"url":["14.4"],"encode":["14.4"],"age":["14.5","38.4"],"this":["14.5","25.5","37.1","37.3","38.1","38.4","48.1"],"action":["14.5","26.6"],"returns":["14.5"],"all":["14.5"],"把所有的参数都放到一个对象里面":["14.5"],"findone":["14.5"],"params":["14.5"],"hash":["16.0"],"加密插入数据库":["16.0"],"提高代码可读性":["17.0"],"createparamdecorator":["17.1"],"另一个模块需要":["18.0"],"imports":["18.0","19.0","19.1","19.3"],"它才能用这些":["18.0"],"注入太多的provider不清楚来源":["18.1"],"可维护性差":["18.1"],"全部解析完后":["18.2"],"会监听网络端口":["18.2"],"开始处理请求":["18.2"],"这个过程中":["18.2"],"暴露了一些生命周期方法":["18.2"],"首先":["18.2","34.2"],"递归初始化模块":["18.2"],"global声明为全局":["18.3"],"这样它export的provider就可以在各处使用了":["18.3"],"authmodule":["19.0"],"prismamodule":["19.0","19.2"],"provide":["19.2"],"providertest":["19.2"],"链接redis当redis链接成功后再注册provider":["19.3"],"然后再":["19.4"],"module的providers数组里注册的class":["19.4"],"默认provier的token就是class":["19.4"],"可以通过":["25.0"],"hoc":["25.0","25.2"],"向原始组件混入一些状态":["25.0"],"属性代理":["25.1"],"wrapcomponent":["25.2"],"advance":["25.2"],"extends":["25.2","25.3","32.2","37.5","38.1","38.6"],"react":["25.2","25.3","25.4","27.1","30.6","36.9","37.1","37.5","38.5","38.6","38.11"],"component":["25.2","25.3","25.6","32.2","37.5","38.1","38.6"],"state":["25.2","25.5","38.1","41.0"],"render":["25.3","25.4","38.4","38.6"],"div":["25.3","36.4","41.5"],"hello":["25.3"],"world":["25.3"],"得到":["25.4"],"之后的内容":["25.4"],"利用这一点":["25.4"],"可以做渲染劫持":["25.4"],"更有甚者可以修改":["25.4"],"之后的":["25.4"],"element":["25.4"],"对象":["25.4"],"null":["25.5","25.6","32.2","37.2"],"componentdidmount":["25.5","37.1","37.3"],"if":["25.5","27.9","38.7"],"then":["25.5","25.7","27.9"],"wrap":["25.6"],"props":["25.6","36.1","36.2","36.4","36.7","37.3"],"dom":["25.6","34.2"],"useref":["25.6","37.2","37.5","37.6"],"rootpermission":["25.7"],"setrootpermission":["25.7"],"usestate":["25.7","37.5"],"useeffect":["25.7","37.2","37.5"],"获取权限列表":["25.7"],"getrootpermission":["25.7"],"res":["25.7"],"data":["25.7","36.8"],"as":["25.7"],"具体功能":["26.1"],"td":["26.1"],"rowspan":["26.1"],"数据更新驱动":["26.1"],"因为var不会新建作用域":["26.3"],"所以所有的settimeout都是共享一个作用域":["26.3"],"当for循环同步任务执行完毕后开始执行settimeout此时因为循环完成i的值已经为10":["26.3"],"并且所有的settimout共享一个作用域":["26.3"],"所以打印出来的结果都是10":["26.3"],"for":["26.3"],"var":["26.3"],"i":["26.3"],"在函数组件":["26.5"],"一次执行上下文中":["26.5"],"的值是":["26.5"],"固定不变的":["26.5"],"如果两次":["26.5"],"dispatchaction":["26.5"],"传入":["26.5"],"相同的":["26.5"],"值":["26.5"],"那么组件就":["26.5"],"将设置状态的逻辑":["26.6"],"修改成dispatch":["26.6"],"的一个":["26.6"],"编写":["26.6"],"一个":["26.6","35.4"],"函数":["26.6"],"传递数据":["26.7"],"但有时候父组件需要直接访问子组件的方法":["26.8"],"例如触发子组件的某个功能或获取子组件的状态":["26.8"],"传统的解决方案是使用":["26.8"],"ref":["26.8","37.1"],"来引用子组件的实例":["26.8"],"然后通过":["26.8"],"current":["26.8","37.3"],"来访问子组件的方法或属性":["26.8"],"但是":["26.8","34.4","38.3"],"这种方式需要手动编写一些额外的代码":["26.8"],"不够直观和方便":["26.8"],"的出现解决了这个问题":["26.8"],"或其他数据获取库来处理数据请求":["27.1"],"但在某些情况下":["27.1"],"使用":["27.1"],"可以带来更多的好处和便利性":["27.1"],"自动缓存和数据同步":["27.1"],"后期维护困难":["27.2"],"后端返回的错误数据":["27.9"],"errormessage":["27.9"],"seterrormessage":["27.9"],"fetchdata":["27.9"],"开始获取数据":["27.9"],"将isloading置为true":["27.9"],"true":["27.9","27.10"],"fetch":["27.9"],"https":["27.9"],"api":["27.9"],"github":["27.9"],"com":["27.9"],"response":["27.9"],"如果请求返回status不为200":["27.9"],"则抛出后端错误":["27.9"],"status":["27.9"],"message":["27.9"],"await":["27.9"],"如果数据正在加载":["27.10"],"该属性为":["27.10"],"否则为":["27.10"],"false":["27.10","30.14","54.0"],"iserror":["27.10"],"表示查询是否遇到了错误":["27.10"],"发送url请求到服务器端":["28.0"],"server会通过不同的地址返回不同的页面":["28.0"],"为什么需要路由":["28.0"],"不会触发刷新":["28.3"],"to":["28.3","30.14"],"navlink":["28.3"],"类似link":["28.3"],"状态管理":["29.0"],"也被称作单一数据源":["29.1","30.1"],"将所有的数据放到一个大对象中":["29.1","30.1"],"关键词":["29.1","30.1"],"model":["29.3"],"view":["29.3","30.5","30.7","36.4"],"模式中":["29.3"],"数据的变化路径清晰可见":["29.4"],"可以更轻松地追踪数据的流动和变化过程":["29.4"],"更好的组件通信":["29.4"],"flux架构提供了明确的机制来处理组件之间的通信和状态共享":["29.4"],"使得组件间的交互更加可控和灵活":["29.4"],"状态的集中管理":["29.4"],"flux将应用程序的状态集中存储在存储器":["29.4"],"store":["29.4"],"ryun":["30.0"],"逻辑共享":["30.3"],"变得更容易":["30.3"],"但usestate":["30.3"],"the":["30.5","30.7","36.4"],"atom":["30.6","30.8"],"useatom":["30.6"],"jotai":["30.6"],"fc":["30.6"],"valueatom":["30.8"],"mockdata":["30.9"],"promise":["30.9"],"r":["30.9"],"settimeout":["30.9"],"并不需要重新渲染呀":["30.10"],"这是因为":["30.10"],"如果使用useatom":["30.10"],"即使你不引入它的value值":["30.10"],"但它由useatomvalue包裹":["30.10"],"当更新时":["30.10"],"useatomvalue会触发订阅事件":["30.10"],"从而触发渲染":["30.10"],"如果不理解可以阅读":["30.10"],"recoil原理":["30.10"],"理解":["30.10"],"解决渲染问题":["30.11"],"useatomvalue":["30.11"],"正常情况下":["30.12"],"无需用provider包裹组件":["30.12"],"createstore":["30.13"],"export出去":["30.13"],"statusatom":["30.14"],"监听发生变化":["30.14"],"sub":["30.14"],"value":["30.14","32.2"],"is":["30.14"],"changed":["30.14"],"set":["30.14"],"接收两个参数":["31.1"],"一个是state":["31.1"],"一个是action":["31.1"],"中间件用于增强":["31.2"],"dispatch":["31.2","41.5"],"功能":["31.2"],"themecontext":["32.0","32.2"],"提供者":["32.1"],"default":["32.1","35.4","38.1","38.6"],"providerdemo":["32.1"],"提供的":["32.2"],"属性":["32.2"],"这里注意的是":["32.2"],"不是上述老版的contexttypes":["32.2"],"createcontext":["32.2"],"类组件":["32.2"],"consumerdemo":["32.2"],"hooks也提供了":["34.0"],"dep":["34.1"],"第一个参数callback":["34.1"],"返回销毁函数":["34.1"],"下次执行useeffect会首先执行这个销毁函数":["34.1"],"是在":["34.2"],"更新之后":["34.2"],"浏览器绘制之前":["34.2"],"uselayouteffect":["34.3"],"打印":["34.3"],"增加定时器":["34.4"],"延时器":["34.4"],"解除事件监听器":["34.4"],"清除定时器":["34.4"],"模块组件props更新":["34.4"],"代替":["34.4"],"componentwillreceiveprops":["34.4"],"着实有点牵强":["34.4"],"首先因为二者的执行阶段根本不同":["34.4"],"一个是在render阶段":["34.4"],"一个是在commit阶段":["34.4"],"其次":["34.4"],"会初始化执行一次":["34.4"],"只有组件更新":["34.4"],"await等待异步操作":["35.2"],"直到异步操作完成":["35.2"],"才会渲染组件":["35.2"],"用法":["35.2"],"子组件":["35.2"],"userinfo":["35.2"],"需要":["35.4"],"resolve":["35.4"],"组件":["35.4","37.3"],"来作为":["36.1"],"插槽组件":["36.2"],"container":["36.2","48.5"],"是container":["36.3"],"提供的本质是":["36.3"],"里打印":["36.4"],"看看是什么":["36.4"],"im":["36.4"],"此时需要用到一个api":["36.4"],"isvalidelement":["36.4"],"来判断当前children的值是elementdom还是函数":["36.4"],"抽象":["36.5"],"son":["36.6","36.7","36.8"],"father":["36.8","38.6"],"resetform":["36.9"],"方法用于重置表单":["36.9"],"②form组件自动过滤掉除了formitem之外的其他react元素":["36.9"],"③formitem":["36.9"],"中":["36.9"],"name":["36.9"],"属性作为表单提交时候的":["36.9"],"还有展示的":["36.9"],"label":["36.9"],"④":["36.9"],"可以自动收集":["36.9"],"表单的值":["36.9"],"useimperativehandle":["36.9"],"index":["37.1","38.1"],"refs":["37.1"],"currentdom":["37.1"],"字符串模式获取元素或组件":["37.1"],"parentcomponent":["37.2"],"childref":["37.2"],"childrencomponent":["37.2"],"setref":["37.2"],"forwardref":["37.3","37.4"],"会指向":["37.4"],"返回的组件":["37.4"],"而并不是":["37.4"],"包裹的原始类组件":["37.4"],"为了解决这个问题":["37.4"],"可以对":["37.4"],"做一层处理":["37.4"],"父通信子":["37.5"],"直接传递pros":["37.5"],"子通信父":["37.5"],"直接让父ref获取实例":["37.5"],"得到实例方法":["37.5"],"父调用子实例方法用来修改子组件状态":["37.5"],"yuqingcomp":["37.5"],"这时候更新无疑是一种性能上的浪费":["37.6"],"会创建出一个原始的ref对象":["37.6"],"只要组件不销毁则这个对象一直存在":["37.6"],"不影响视图变化的不要放到state中":["37.6"],"因为每次更新state都会重新渲染组件":["37.6"],"可以通过useref来缓存":["37.6"],"因为useref不会引起组件重新渲染":["37.6"],"第一个能够直接修改数据":["37.6"],"不会造成函数组件冗余的更新作用":["37.6"],"第二个":["37.6"],"numbera":["38.1"],"numberb":["38.1"],"button":["38.1","41.5"],"onclick":["38.1","41.5"],"setstate":["38.1","38.4"],"create":["38.2"],"deps":["38.2","38.3"],"第一个参数为一个函数":["38.2"],"函数的返回值作为缓存值":["38.2"],"如上":["38.2"],"中如果有一项改变":["38.3"],"就会重新执行":["38.3"],"返回值作为新的值记录到":["38.3"],"usememo应用场景":["38.3"],"alien":["38.4"],"obj":["38.4"],"changeobjnumber":["38.4"],"组件渲染":["38.4"],"方法中使用的":["38.5"],"这个函数在更新组件的时候被调用":["38.5"],"在这个函数内部":["38.5"],"有一个专门负责检查是否更新的函数":["38.5"],"checkshouldcomponentupdate":["38.5"],"reconciler":["38.5"],"reactfiberclasscomponent":["38.5"],"js":["38.5"],"purecomponent":["38.6"],"callback":["38.6"],"purecomponent的父组件是函数组件的情况":["38.6"],"statenuma":["38.7"],"statenumb":["38.7"],"newprops":["38.7"],"newstate":["38.7"],"newcontext":["38.7"],"demo":["38.9"],"当父组件传递的number更改且大于5时":["38.9"],"更新组件":["38.9"],"children":["38.9"],"forceupdate":["38.10"],"如果更新状态使用的forceupdate":["38.10"],"memo局部更新":["38.11"],"表单":["38.11"],"reducer是把操作整合到一起":["41.1"],"它接收目前的结果和当前的值":["41.2"],"text":["41.4"],"参观卡夫卡博物馆":["41.4"],"看木偶戏":["41.4"],"deleted":["41.4"],"usereducer":["41.5"],"reducer":["41.5"],"initialstate":["41.5"],"它的实际用途包括":["41.6"],"状态复杂逻辑":["41.6"],"当组件的状态逻辑较为复杂":["41.6"],"涉及多个状态变化时":["41.6"],"获取管理员的逻辑":["48.1"],"constructor":["48.1"],"service":["48.1"],"当前service只能获取用户的逻辑":["48.1"],"但是我想再获取管理员的逻辑时就需要新注册一个类":["48.1"],"read":["48.1"],"处理用户数据的逻辑":["48.1"],"control":["48.2"],"解耦和模块化":["48.3"],"需要一个管理容器":["48.4"],"创建一个变量存贮依赖项":["48.5"],"dependencies":["48.5"],"header":["53.0"],"user":["53.0"],"agent":["53.0"],"mozilla":["53.0"],"macintosh":["53.0"],"intel":["53.0"],"mac":["53.0"],"os":["53.0"],"applewebkit":["53.0"]},{"1":["2.0","11.9","11.10","14.2","29.3","30.7","30.9","31.1","36.3","36.9"],"2":["1.3","18.2","29.1","30.1","30.14","34.1","48.3","48.4"],"3":["7.1","26.5","41.4"],"4":["29.4"],"6":["6.2"],"7":["6.2","14.2"],"8":["6.2"],"12":["53.0"],"15":["53.0"],"22":["14.5"],"23":["14.2"],"85":["14.5"],"89":["14.5"],"123":["36.8"],"200":["25.7"],"400":["1.7"],"1000":["26.3"],"3000":["30.9"],"oriented":["1.0"],"programming":["1.0"],"面向切面编程":["1.0"],"是一种编程范式":["1.0"],"一个请求过来会经过":["1.0"],"controller":["1.0","1.4","18.3"],"fastify":["1.1"],"await":["1.2"],"nestfactory":["1.2"],"create":["1.2"],"appmodule":["1.2","12.4"],"不生成测试文件":["1.3"],"不生成文件夹":["1.3"],"executioncontext":["1.4","2.1","2.2","13.2"],"boolean":["1.4","2.1","13.2"],"promise":["1.4","2.1","30.6"],"observable":["1.4","2.1","13.3"],"console":["1.4","2.2","11.11","25.6","26.3","34.4"],"log":["1.4","1.5","2.2","11.11","25.6","26.3","34.4"],"return":["1.4","4.0","9.0","11.11","25.4","25.7","27.9","35.2","36.7","37.5","38.5","38.7","38.9"],"true":["1.4","38.7"],"x":["1.4","14.5"],"time":["1.5"],"ms":["1.5"],"interceptor要实现nestinterceptor接口":["1.5"],"实现intercept方法":["1.5"],"调用next":["1.5"],"就会调用目标controller":["1.5"],"time是用来计算controller执行时间的":["1.5"],"tap是rxjs的操作符":["1.5"],"用来在observable的生命周期中的某个点执行副作用":["1.5"],"但不会改变observable的数据流":["1.5"],"details":["1.5","37.4"],"rxjs是一个响应式编程的库":["1.5"],"在rxjs中":["1.5"],"tap是一个操作符":["1.5"],"它用于在observable的生命周期中的某个点执行副作用":["1.5"],"在你的代码中":["1.5"],"export":["1.6","11.1","11.9","11.10"],"class":["1.6","2.1","5.1","11.1","11.9","11.10","12.2","25.4"],"validatepipe":["1.6"],"implements":["1.6","2.1"],"transform":["1.6"],"value":["1.6","25.7"],"any":["1.6","9.0","25.7"],"metadata":["1.6"],"if":["1.6","4.0","25.4","38.5"],"number":["1.6","11.4","38.9"],"isnan":["1.6"],"host":["1.7","11.3","14.2"],"argumentshost":["1.7"],"const":["1.7","11.3","11.5","25.5","26.6","30.7","35.2","35.4","36.9","38.9","41.4","48.1"],"response":["1.7","11.3","13.1"],"switchtohttp":["1.7"],"getresponse":["1.7"],"status":["1.7"],"json":["1.7","27.9"],"statuscode":["1.7"],"message":["1.7","41.5"],"aaa":["1.7","11.9","11.10"],"controllet":["1.7"],"get":["1.7","4.0","11.6","11.7","11.10","13.0","17.0","30.8"],"usefilters":["1.7","13.0"],"findall":["1.7"],"query":["1.7"],"num":["1.7"],"必须使用next":["2.0"],"方法将控制权传递给下一个中间件函数":["2.0"],"否则请求将被挂起":["2.0"],"定义中间件":["2.0"],"code":["2.0","12.3","13.2","26.6","37.4"],"group":["2.0","26.6"],"typescript":["2.0","6.4","30.10"],"index":["2.0","25.4"],"ts":["2.0","3.0","11.2","11.7","18.1","26.6"],"authgurad":["2.1"],"canactive":["2.1"],"canactivate":["2.1"],"contenxt":["2.1"],"intercept":["2.2"],"context":["2.2"],"next":["2.2"],"callhandler":["2.2"],"验证":["2.3"],"provider":["3.0","6.1","18.3","25.7","30.3"],"useclass":["3.0"],"动态注册":["3.0"],"下面实现根据不同的环境创建不同的服务":["3.0"],"首先安装":["3.0"],"dotenv":["3.0"],"扩展包":["3.0"],"用来读取":["3.0"],"env环境变量":["3.0"],"然后创建两个服务":["3.0"],"service":["3.0","4.0","7.1"],"与":["3.0"],"b":["3.0","11.4"],"tencnetservice":["4.0"],"privider":["4.0"],"curenv":["4.0"],"this":["4.0","25.2","25.4","32.2","37.2","37.5","38.7","48.5"],"config":["4.0"],"其根本思想是":["5.0"],"借助于第三方":["5.0"],"abstrct":["5.1"],"phone":["5.1"],"playgame":["5.1"],"动态provider":["6.0"],"asynprovider":["6.0"],"service和其他提供者":["6.1"],"module的作用是将应用程序拆分为更小的可重用部分":["6.1"],"以便更好的组织代码和管理依赖关系":["6.1"],"路由守卫":["6.2"],"全局拦截器":["6.2"],"控制器之前":["6.2"],"injectable":["6.3"],"装饰器定义":["6.3"],"这样系统会分析":["6.3"],"constructor":["6.3"],"进行依赖注入":["6.3"],"模块提供者也是单例":["6.4"],"所以模块被多个其他模块使用":["6.4"],"那该模块的provider也是共享的":["6.4"],"导入其他模块":["6.4"],"nestjs核心基础概念":["7.0"],"controller处理请求":["7.1"],"服务":["7.1"],"传递给控制器":["8.0"],"拦截器":["8.0"],"管道":["8.0"],"来存的":["9.0"],"定义一个装饰器函数":["9.0"],"用于添加元数据到类或属性上":["9.0"],"function":["9.0","25.3","36.4","36.9","37.4","38.6"],"mymetadata":["9.0"],"mymetadatakey":["9.0"],"使用装饰器给类添加元数据":["9.0"],"for":["9.0"],"因为nest解析是从上到下的":["10.0"],"所以当解析到a时":["10.0"],"但是b还没有解析":["10.0"],"appcontroller":["11.1","13.0"],"exception":["11.3"],"argumenthost":["11.3","13.4"],"aaadto":["11.4"],"a":["11.4","36.9"],"common":["11.5","13.1","17.1"],"roles":["11.5"],"string":["11.5","27.9","30.6"],"user":["11.5","14.2","35.2"],"abc":["11.6"],"header":["11.6"],"但要使用":["11.8"],"需要安装一个":["11.8"],"express":["11.8","13.1"],"中间件":["11.8"],"npm":["11.8"],"path":["11.9","11.10"],"aaacontroller":["11.10"],"bbb":["11.10"],"nextfunction":["11.11"],"handler1":["11.11"],"com":["11.12"],"redirectbaidu":["11.12"],"动态产生的":["12.0"],"module同样也可以":["12.0"],"provide":["12.1","19.3"],"usevalue":["12.1"],"configservice":["12.1"],"区别":["12.1"],"module的地方":["12.1"],"跟":["12.1"],"module类似":["12.1"],"aaamodule":["12.2"],"extends":["12.2","25.4"],"definition":["12.2"],"import":["12.2","30.10","38.1"],"configurablemodulebuilder":["12.2"],"cccmoduleoptions":["12.3"],"setclassname":["12.3"],"build":["12.3"],"用多次":["12.4"],"一般在":["12.4"],"引入":["12.4"],"用了":["12.4"],"之后":["12.4"],"private":["13.0"],"readonly":["13.0"],"appservice":["13.0","19.2"],"myexceptionfilter":["13.0"],"gethello":["13.0"],"myexceptionfilter只能捕获aaaexception异常":["13.0"],"不能捕获httpexception异常":["13.0"],"因为exceptionfilter的":["13.0"],"catch":["13.0","27.9"],"nestjs":["13.1","17.1"],"aaafilter":["13.1"],"focus":["13.2","19.0","26.3"],"core":["13.3"],"rxjs":["13.3"],"role":["13.3"],"类":["13.4"],"可以通过":["13.4"],"getargs":["13.4"],"或者":["13.4"],"form":["14.0","14.5"],"这里的id叫做params":["14.1"],"agent":["14.2"],"postmanruntime":["14.2"],"accept":["14.2"],"localhost":["14.2"],"url":["14.3","53.0"],"的方式了":["14.3"],"自然也不用再做":["14.3"],"encode":["14.3","14.5"],"而":["14.4"],"data":["14.4","30.6","30.9"],"urlencoded":["14.5"],"是通过body传输数据":["14.5"],"其实是把query字符串放在了body里":["14.5"],"这里需要做url":["14.5"],"axios默认自动编译":["14.5"],"content":["14.5"],"type":["14.5","41.5"],"application":["14.5"],"www":["14.5"],"body":["14.5"],"e5":["14.5"],"用nest接收的话就是使用":["14.5"],"body装饰器":["14.5"],"login":["16.0"],"applydecorators":["17.0"],"useguards":["17.0"],"from":["17.0","17.1","30.5","30.10","38.1"],"多个模块需要用到同一个":["18.0"],"global":["18.1"],"module":["18.1"],"依次次调用模块内":["18.2"],"的onmoduleinit方法":["18.2"],"然后在调用module的onmoduleinit方法":["18.2"],"全部初始化完之后":["18.2"],"再依次调用模块内的":["18.2"],"不需要imports":["18.3"],"authservice":["19.0"],"简写":["19.0"],"jwtservice":["19.0"],"prismamodule":["19.1","19.3"],"inject":["19.2"],"person":["19.2"],"providers":["19.3"],"这样不用使用":["19.4"],"inject来指定注入的token":["19.4"],"但也可以用字符串类型的token":["19.4"],"实现文件上传是基于express":["20.0"],"渲染劫持":["25.0"],"可以利用":["25.0","38.3"],"动态挂载原始组件":["25.0"],"和":["25.1","48.1"],"name":["25.2","36.8"],"alien":["25.2"],"render":["25.2","25.5","32.2","37.5","38.3"],"props":["25.2","34.4","36.5","37.5","38.7","38.11"],"优点":["25.2"],"hoc":["25.3"],"wrapcomponent":["25.3","25.4"],"visible":["25.4"],"else":["25.4"],"div":["25.4","36.6","36.7","37.5","38.4","38.9"],"暂无数据":["25.4"],"动态加载":["25.5"],"组件":["25.5"],"setstate":["25.5","37.5","38.10"],"useeffect":["25.6","37.6"],"handerclick":["25.6"],"发生点击事件":["25.6"],"current":["25.6"],"addeventlistener":["25.6"],"doclist":["25.7"],"taglist":["25.7"],"rootrouter":["25.7"],"usestate":["26.1","32.1","36.9"],"数据驱动更新":["26.1"],"usereducer":["26.1"],"settimeout":["26.3","30.6"],"结果都是10":["26.3"],"let":["26.3"],"在每次循环的时候都会新建一个作用域":["26.3"],"所以当每次循环的时候settimout被分配到异步队列时都会保存当前的作用域i的值":["26.3"],"而不是所有的settimeout共享一个作用域":["26.3"],"不会更新":["26.5"],"当触发":["26.5"],"在":["26.5"],"当前执行上下文中获取不到最新的state":["26.5"],"只有再下一次组件":["26.5"],"rerender":["26.5"],"中才能获取到":["26.5"],"案例":["26.5"],"此时点击按钮":["26.5"],"log打印出来的值并不是更改过后的number":["26.5"],"在你的组件中":["26.6"],"使用":["26.6","26.8"],"参数":["26.6"],"state":["26.6","37.5"],"dispatch":["26.6"],"避免props层层传递":["26.7"],"它允许子组件通过自定义的方式向父组件暴露自己的实例方法或属性":["26.8"],"父组件可以通过":["26.8"],"直接访问子组件的这些方法或属性":["26.8"],"而无需手动编写额外的代码":["26.8"],"父组件可以更直接地与子组件进行交互":["26.8"],"提供了更灵活的组件通信方式":["26.8"],"它使得父组件能够以更直观的方式调用子组件的方法":["26.8"],"从而简化了组件之间的通信逻辑":["26.8"],"需要注意的是":["26.8"],"自带数据缓存和自动刷新功能":["27.1"],"它会自动缓存数据并定期刷新以保持数据的最新状态":["27.1"],"这减少了手动管理缓存的复杂性":["27.1"],"加载状态管理":["27.1"],"query内置状态管理":["27.1"],"你可以不用再写isloading":["27.1"],"无数据缓存":["27.2"],"throw":["27.9"],"new":["27.9","30.6","41.0"],"error":["27.9","27.10"],"text":["27.9"],"请求完成将isloading置为false":["27.9"],"接口请求成功":["27.9"],"将iserror置为false":["27.9"],"存储后端返回的数据":["27.9"],"接口请求错误":["27.9"],"将iserror置为true":["27.9"],"存储后端返回的错误数据":["27.9"],"如果查询出现错误":["27.10"],"单页应用需要路由切换":["28.0"],"通过url可以定位到页面":["28.0"],"但是会添加当前选中状态":["28.3"],"home":["28.3"],"activeclassname":["28.3"],"combinereducers":["29.1","30.1"],"multiple":["29.1","30.1"],"应用程序的状态分散在多个视图和控制器之间":["29.3"],"导致数据流动难以追踪和管理":["29.3"],"这样的架构往往会导致以下问题":["29.3"],"中":["29.4"],"使得状态的修改和管理更加一致和可控":["29.4"],"提升应用程序的可维护性和可扩展性":["29.4"],"flux架构的职责分离和分层结构使得应用程序的各个模块解耦":["29.4"],"提高了代码的可复用性和可测试性":["29.4"],"便于应用程序的扩展和维护":["29.4"],"人话":["29.4"],"数据单向易于追踪更改来源":["29.4"],"usecontext对于多个store仍需要维护多个context":["30.3"],"因为当context改变":["30.3"],"所有消费该context的组件都会重新渲染即使是组件仅用到了":["30.3"],"context的一部分":["30.3"],"jotai":["30.5"],"fc":["30.5","30.10"],"mockdata":["30.6"],"r":["30.6"],"mock":["30.6","30.9"],"valueatom":["30.7","30.9"],"atom":["30.7","30.9","30.10"],"addnumberatom":["30.8"],"ge":["30.8"],"a组件使用即订阅":["30.10"],"atom原子更新触发订阅事件从而更新":["30.10"],"解决办法":["30.10"],"参考7":["30.10"],"react":["30.10","30.14","32.0","32.1"],"usesetatom":["30.11"],"如果有的组件只需要监听状态的变化值":["30.11"],"但如果需要控制某些组件的状态不发生更新":["30.12"],"可以用provider包裹":["30.12"],"使用jotai的provider提供给app":["30.13"],"其中":["30.13"],"default":["30.14"],"main":["30.14"],"reactdom":["30.14"],"返回一个新的state":["31.1"],"createstore":["31.1"],"返回一个增强后的":["31.2"],"createcontext":["32.0"],"null":["32.0"],"contextvalue":["32.1"],"setcontextvalue":["32.1"],"color":["32.1","32.2"],"border":["32.2"],"settheme":["32.2"],"background":["32.2"],"函数组件usecontext方式":["32.2"],"既然类组件都可以快捷获取":["32.2"],"了":["32.2"],"那么函数组件也应该研究一下如何快速获取":["32.2"],"吧":["32.2"],"于是乎":["32.2"],"api":["34.0"],"用于弥补函数组件没有生命周期的缺陷":["34.0"],"销毁定时器":["34.1"],"订阅等以防资源泄露":["34.1"],"第二个参数为依赖项":["34.1"],"依赖项发生变化则执行callback":["34.1"],"这样可以方便修改":["34.2"],"获取":["34.2"],"信息":["34.2"],"本质上是解决":["34.3"],"css":["34.3"],"in":["34.3"],"js":["34.3","35.4"],"产生的重绘问题":["34.3"],"style":["34.3"],"components库为例":["34.3"],"tip":["34.3"],"component":["34.3","38.8"],"你可以使用es6的标签模板字符串语法":["34.3"],"tagged":["34.3"],"变化的时候才会执行":["34.4"],"props变化":["34.4"],"模块更新后":["34.4"],"componentdidupdate":["34.4"],"组件更新完成":["34.4"],"没有":["34.4"],"依赖项":["34.4","37.6"],"注意此时useeffect没有第二个参数":["34.4"],"没有第二个参数":["34.4"],"那么每一次执行函数组件":["34.4"],"都会执行该":["34.4"],"获取用户数据信息":["35.2"],"然后再渲染组件":["35.2"],"getuserinfo":["35.2"],"h1":["35.2"],"lazycomponent":["35.4"],"test":["35.4"],"改变后的监听函数":["36.1"],"不过有一点值得注意":["36.1"],"上述可以在":["36.2"],"组件中":["36.2"],"通过":["36.2"],"reutrn":["36.3"],"这种方式作用是":["36.3"],"根据需要控制":["36.3"],"hello":["36.4","36.6","36.7"],"my":["36.4"],"is":["36.4"],"mes":["36.4"],"一般用于跨层级传递":["36.5"],"world":["36.6","36.7"],"father":["36.6"],"隐式注入":["36.8"],"cloneelement":["36.9"],"children":["36.9","38.2"],"forwardref":["36.9"],"可接收父组件传递过来的ref确定具体渲染的dom":["36.9"],"myform":["36.9"],"可使父组件直接访问抛出方法":["36.9"],"currentcominstance":["37.1"],"ref是一个函数":["37.1"],"node":["37.2"],"span":["37.2"],"ref":["37.2","37.3","37.6"],"通过forwardref转发":["37.2"],"newfahter组件是为了转发ref的中间组件":["37.2"],"给form组件实例":["37.3"],"绑定给":["37.3"],"form属性":["37.3"],"给index组件实例":["37.3"],"index属性":["37.3"],"button":["37.3","38.4"],"给button":["37.3"],"dom":["37.3"],"元素":["37.3"],"高阶组件把组件作为参数":["37.4"],"我们想获取的ref其实是这个参数的实例":["37.4"],"如果不使用forwardref转发一下那么最终获取到的组件就是hoc返回的wrap组件":["37.4"],"但是我们需要的事传递进hoc被包裹的组件":["37.4"],"forwardref的意义是可以让开发着手动控制ref的指向":["37.4"],"view":["37.4"],"the":["37.4"],"jsx":["37.4"],"togjsmsg":["37.5"],"togyqmsg":["37.5"],"调用父组件传递过来的修改函数":["37.5"],"togjs":["37.5"],"提供实例方法供父组件调用":["37.5"],"toyq":["37.5"],"msg":["37.5"],"gjs":["37.5"],"say":["37.5"],"保存数据":["37.6"],"如果有":["37.6"],"usememo":["37.6"],"引用":["37.6"],"对象中的数据":["37.6"],"无须将":["37.6"],"对象添加成":["37.6"],"dep":["37.6"],"因为":["37.6"],"改变numbera":["38.1"],"改变numberb":["38.1"],"children只依赖a":["38.1"],"当b更新后会触发组件整体更新":["38.1"],"此时就需要单独判断children是否需要更新":["38.1"],"根据修改的值是不是a判断":["38.1"],"优化":["38.1"],"demo":["38.2"],"中把":["38.2"],"对应的":["38.2"],"element":["38.2","38.3"],"可以缓存":["38.3"],"对象":["38.3"],"从而达到按条件渲染组件":["38.3"],"优化性能的作用":["38.3"],"如果组件中不期望每次":["38.3"],"都重新计算一些值":["38.3"],"组件本身改变state":["38.4"],"onclick":["38.4"],"state相同情况":["38.4"],"typeof":["38.5"],"instance":["38.5"],"shouldcomponentupdate":["38.5"],"newprops":["38.5"],"newstate":["38.5"],"nextcontext":["38.5"],"逻辑":["38.5"],"绑定函数要用usecallback或者usememo处理":["38.6"],"就是再用class":["38.6"],"组件开发项目的时候":["38.6"],"如果父组件是函数":["38.6"],"子组件是purecomponent":["38.6"],"那么绑定函数要小心":["38.6"],"因为函数组件每一次执行":["38.6"],"如果不处理":["38.6"],"还会声明一个新的函数":["38.6"],"所以purecomponent对比同样会失效":["38.6"],"propsnuma":["38.7"],"只有当":["38.7"],"子组件渲染":["38.9"],"child":["38.9"],"prevprops":["38.9"],"nextprops":["38.9"],"而不是":["38.10"],"一般会采用受控组件的模式去管理表单数据层":["38.11"],"表单数据层完全托管于":["38.11"],"或是":["38.11"],"用户触发事件名进而执行相应的处理函数":["41.1"],"例如":["41.1"],"然后返回下一个结果":["41.2"],"打卡列侬墙":["41.4"],"finalstate":["41.4"],"reduce":["41.4"],"output":["41.4"],"document":["41.4"],"getelementbyid":["41.4"],"add":["41.5"],"添加":["41.5"],"可以使用usereducer来更好地组织和管理状态的变化逻辑":["41.6"],"替代usestate":["41.6"],"在一些情况下":["41.6"],"使用usereducer可以替代多个独立的usestate":["41.6"],"result":["48.1"],"此时controller":["48.1"],"存在了强耦合的关联":["48.1"],"无法复用":["48.1"],"若我们想用authservice时必须新注册一个类来实现":["48.1"],"控制反转":["48.2"],"container":["48.4"],"注册方法":["48.5"],"register":["48.5"],"dependency":["48.5"],"khtml":["53.0"],"like":["53.0"],"gecko":["53.0"],"version":["53.0"],"safari":["53.0"],"15accept":["53.0"],"encoding":["53.0"],"gzipbody":["53.0"]},{"0":["30.10","34.4"],"1":["25.2","30.6"],"2":["14.5","36.3"],"3":["18.2","25.0","48.4"],"4":["7.1"],"5":["38.9"],"8":["32.2"],"9":["6.2"],"10":["6.2"],"111":["11.11"],"456":["14.1"],"3000":["14.2","30.6"],"service":["1.0"],"repository":["1.0"],"db":["1.0"],"这样的一条链路":["1.0"],"aop就是在这条链路上加上一些额外的逻辑":["1.0"],"比如日志":["1.0"],"可选":["1.1"],"use":["1.2","2.0"],"req":["1.2","2.0"],"res":["1.2"],"next":["1.2"],"包含中间件的模块必须实现nestmodule接口":["1.3"],"让我们在appmodule级别设置中间件":["1.3"],"ts":["1.3","10.0","12.0"],"module":["1.3","6.0","10.0","11.2","12.0"],"export":["1.3","2.0","11.5","13.3","14.5","17.0","17.1","25.3","37.5","38.9","41.4"],"class":["1.3","2.0","9.0","13.3","14.5","37.4","38.9"],"xcontroller":["1.4"],"get":["1.4","11.5","11.9","30.9"],"useguards":["1.4"],"index":["1.4","25.5","30.14","35.4"],"全局启用守卫":["1.4"],"main":["1.4"],"第一种":["1.4"],"app":["1.4","30.14"],"useglobalguards":["1.4"],"new":["1.4","1.6","13.0"],"tap用于在observable完成时打印出执行时间":["1.5"],"这里的tap操作符接收一个函数":["1.5"],"这个函数会在每次observable发出值时被调用":["1.5"],"但不会改变或使用这个值":["1.5"],"这个函数是一个箭头函数":["1.5"],"它打印出从开始到现在的时间差":["1.5"],"这是一个很好的用例":["1.5"],"因为你可能想要在不改变observable流的情况下":["1.5"],"记录或打印出一些信息":["1.5"],"和":["1.5"],"middleware很相似":["1.5"],"仔细研究他们的区别":["1.5"],"middleware":["1.5"],"定义":["1.5"],"是一种位于请求和响应处理流程中间的函数":["1.5"],"主要用于请求的前置处理":["1.5"],"用途":["1.5"],"它们通常用于执行一些关于请求的通用操作":["1.5"],"如日志记录":["1.5"],"请求验证":["1.5"],"parseint":["1.6"],"throw":["1.6","13.0"],"badrequestexception":["1.6"],"validation":["1.6"],"failed":["1.6"],"return":["1.6","2.1","2.2","32.1","35.4","36.4","38.6"],"pipe可以拿到req的参数value":["1.6"],"可以对参数进行验证":["1.6"],"格式化等操作":["1.6"],"验证正确就返回":["1.6"],"不正确就抛出异常":["1.6"],"this":["1.7","37.4"],"aaaservice":["1.7"],"details":["1.7"],"nest":["1.7","4.0"],"内置了很多":["1.7"],"http":["1.7","13.1"],"相关的异常":["1.7"],"都是":["1.7"],"httpexception":["1.7","13.0"],"的子类":["1.7"],"unauthorizedexception":["1.7"],"notfoundexception":["1.7"],"forbiddenexception":["1.7"],"notacceptableexception":["1.7"],"requesttimeoutexception":["1.7"],"conflictexception":["1.7"],"goneexception":["1.7"],"payloadtoolargeexception":["1.7"],"unsupportedmediatypeexception":["1.7"],"unprocessableexception":["1.7"],"internalservererrorexception":["1.7"],"notimplementedexception":["1.7"],"badgatewayexception":["1.7"],"serviceunavailableexception":["1.7"],"gatewaytimeoutexception":["1.7"],"中间件实例代码":["2.0"],"injectable":["2.0"],"loggermiddleware":["2.0"],"implements":["2.0","13.3"],"nestmiddleware":["2.0"],"const":["2.1","2.2","9.0","13.1","17.1","30.5","30.10","34.4","36.6","36.7","37.4","37.5","37.6","38.6"],"request":["2.1","11.10","13.4"],"switchtohttp":["2.1","11.3","13.1"],"getrequest":["2.1"],"validaterequest":["2.1"],"function":["2.1","35.4","36.8","37.5","41.4"],"before":["2.2"],"now":["2.2"],"date":["2.2"],"他可以在控制器之前或之后对数据进行预处理":["2.3"],"import":["3.0","25.5"],"config":["3.0"],"from":["3.0","12.2"],"读取":["3.0"],"env":["3.0"],"到":["3.0"],"process":["3.0"],"环境变量中":["3.0"],"path":["3.0"],"join":["3.0"],"system":["4.0"],"provider":["4.0","12.1","30.14"],"send":["4.0"],"getsmsprovider":["4.0"],"使用":["4.0","32.2"],"实现具有依赖关系的对象之间的解耦":["5.0"],"第三方举例":["5.0"],"name":["5.1","19.2","35.2"],"string":["5.1","9.0","12.2","19.2"],"controller提供一个路由处理器":["6.1"],"他可以将http请求映射到响应的处理器方法上":["6.1"],"并将处理器方法的结果作为http响应返回给client":["6.1"],"controller是处理":["6.1"],"控制器层拦截器":["6.2"],"路由拦截器":["6.2"],"全局管道":["6.2"],"提供者在模块的":["6.3"],"providers":["6.3","19.1"],"属性中定义":["6.3"],"用于注册到服务容器中":["6.3"],"用于被其他类依赖注入":["6.3"],"提供者可以在自身的constructor构造函数中依赖注入其他服务提供者":["6.3"],"imports":["6.4","12.4","18.1"],"jwtmodule":["6.4"],"registerasync":["6.4"],"configmodule":["6.4"],"inject":["6.4"],"configservice":["6.4"],"愿我们共同进步":["7.0"],"操作数据库以及处理所有逻辑的地方":["7.1"],"管道":["7.1"],"守卫等各个部分":["8.0"],"以便他们可以对请求进行处理和转换":["8.0"],"the":["9.0"],"entire":["9.0"],"example":["9.0"],"使用装饰器给属性添加元数据":["9.0"],"property":["9.0"],"propertywithmetadata":["9.0"],"获取类的元数据":["9.0"],"classmetadata":["9.0"],"所以会报错":["10.0"],"解决办法":["10.0"],"code":["11.1","11.2","26.8"],"private":["11.1","13.3"],"getresponse":["11.3"],"status":["11.3","27.10"],"getstatus":["11.3"],"controller":["11.4"],"bbb":["11.4","11.9"],"gethello":["11.4"],"body":["11.4"],"aa":["11.5"],"appservice":["11.5"],"useguard":["11.5"],"aaaguard":["11.5","13.3"],"admin":["11.5"],"getpassword":["11.5"],"accept":["11.6"],"install":["11.8"],"在main":["11.8"],"ts引入并启用":["11.8"],"aaacontroller":["11.9"],"hello":["11.9","11.10","38.4"],"console":["11.10","38.7"],"log":["11.10","38.7"],"eee2":["11.11"],"只是多了一个module属性":["12.1"],"这个属性是用来指定这个模块的类型的":["12.1"],"这里是configmodule":["12.1"],"而且我们还可以把参数传入的":["12.1"],"对象作为一个新的":["12.1"],"register可以接收参数":["12.1"],"所以我们可以把参数传入的":["12.1"],"nestjs":["12.2","17.0"],"common":["12.2","17.0"],"interface":["12.2"],"cccmoduleoptions":["12.2"],"number":["12.2"],"设置为全局模块":["12.3"],"xxx":["12.3"],"用":["12.4"],"传入局部配置":["12.4"],"一般在具体模块里":["12.4"],"并且这些方法都可以写":["12.4"],"xxxasync":["12.4"],"aaaexception":["13.0"],"中指定了aaaexception异常处理":["13.0"],"错误错误":["13.0"],"错误啦":["13.0"],"不会处理http异常":["13.0"],"因为catch没有指定httpexception异常":["13.0"],"if":["13.1","36.4","48.5"],"gettype":["13.1"],"ctx":["13.1"],"切换至http上下文":["13.1"],"promise":["13.2"],"observable":["13.2"],"constructor":["13.3","38.1"],"getargbyindex":["13.4"],"拿到上下文参数":["13.4"],"比如":["13.4","31.2"],"response":["13.4"],"urlencoded":["14.0"],"这里的id叫做query":["14.1"],"其中非英文的字符和一些特殊字符要经过编码":["14.1"],"encoding":["14.2"],"gzip":["14.2"],"deflate":["14.2"],"br":["14.2","26.5"],"引入图片":["14.3"],"alt":["14.3"],"text":["14.3","30.7","37.5"],"则需要加很长的":["14.4"],"boundary":["14.4"],"两种方式都有一些缺点":["14.4"],"nest会解析请求体然后注入到dto中":["14.5"],"dto":["14.5"],"data":["14.5"],"transfer":["14.5"],"object":["14.5"],"封装数据传输对象":["14.5"],"创建dto":["14.5"],"在controller中使用":["14.5"],"createcatdto":["14.5"],"isstring":["14.5"],"readonly":["14.5"],"isint":["14.5"],"breed":["14.5"],"登录接收账号密码":["16.0"],"argon2":["16.0"],"时":["18.0"],"可以把这个":["18.0"],"prismamodule":["18.1"],"的":["18.2","34.3","36.3"],"onapplicationbootstrap":["18.2"],"方法":["18.2"],"然后调用":["18.2"],"module都支持启动和销毁函数":["18.3"],"这些生命周期函数都支持async的方式":["18.3"],"provide":["19.0","19.1"],"jwt":["19.0"],"useclass":["19.0"],"usefactory":["19.2","19.3"],"redis":["19.3"],"client":["19.3","30.14"],"async":["19.3","30.9"],"不过注入的时候要用":["19.4"],"inject单独指定":["19.4"],"除了useclass":["19.4"],"multer实现的":["20.0"],"还可以先获取原始组件的渲染树":["25.0"],"进行可控性修改":["25.0"],"可以配合":["25.0"],"反向继承":["25.1"],"属性代理可以和业务组件低耦合":["25.2"],"零耦合":["25.2"],"对于条件渲染和":["25.2"],"属性增强":["25.2"],"只负责控制子组件渲染和传递额外的":["25.2"],"就可以了":["25.2"],"所以无须知道":["25.2"],"直接继承需要包装的组件":["25.3"],"default":["25.3","37.5","38.9","41.4"],"优点":["25.3"],"①":["25.3"],"控制渲染树":["25.4"],"component":["25.4","37.4"],"ul":["25.4"],"li":["25.4"],"vue":["25.4"],"props":["25.5","38.1"],"loading":["25.5","35.4"],"asyncrouter":["25.5"],"pages":["25.5"],"click":["25.6"],"removeeventlistener":["25.6"],"编写hoc":["25.7"],"没有权限":["25.7"],"nopermission":["25.7"],"div":["25.7","27.9","32.1","35.4"],"您暂时没有权限":["25.7"],"请联系管理员开通权限":["25.7"],"permissionhoc":["25.7"],"订阅状态":["26.1"],"创建reducer":["26.1"],"更新试图":["26.1"],"usesyncexternalstore":["26.1"],"订阅外部数据源触发更新":["26.1"],"而是更改前的值":["26.5"],"这意味着log时更改未发生":["26.5"],"原因":["26.5"],"setnumber是异步的":["26.5"],"触发handleclick时":["26.5"],"任务线程会先执行同步再执行异步":["26.5"],"所以log打印的是更改前的值":["26.5"],"外部log可以获取到最新的值的原因是":["26.5"],"在执行完同步的log后执行异步setnumber":["26.5"],"异步setnumber触发重新渲染":["26.5"],"重新执行index函数":["26.5"],"initstate":["26.6"],"实际使用":["26.6"],"type":["26.6","37.5","37.6"],"导致代码冗余":["26.7"],"应该与":["26.8"],"forwardref":["26.8"],"一起使用":["26.8"],"以便将子组件的引用传递给父组件":["26.8"],"总结来说":["26.8"],"解决了在":["26.8"],"组件中":["26.8"],"父组件需要直接访问子组件的实例方法或属性时":["26.8"],"通过更简洁":["26.8"],"直观的方式实现组件之间的通信的问题":["26.8"],"group":["26.8"],"isfetching等状态了":["27.1"],"它会自动管理数据加载状态":["27.1"],"数据同步和预取":["27.1"],"支持数据预取和自动同步":["27.1"],"提前获取数据并在后台刷新":["27.1"],"以保持数据最新":["27.1"],"无数据同步":["27.2"],"useeffect":["27.9"],"初始化请求数据":["27.9"],"h1":["27.9"],"p":["27.9"],"加载中":["27.9"],"button":["27.9","37.5"],"onclick":["27.9","37.5"],"重试":["27.9"],"刷新":["27.9"],"after":["27.9"],"该属性将包含错误信息":["27.10"],"通常是一个错误对象":["27.10"],"包含有关查询错误的详细信息":["27.10"],"表示查询的状态":["27.10"],"用于指示加载中":["27.10"],"更有语义的组织资源":["28.0"],"三种路由的实现方式":["28.0"],"browserrouter":["28.0"],"selected":["28.3"],"prompt":["28.3"],"满足条件时提示用户是否离开页面":["28.3"],"when":["28.3"],"stores":["29.1","30.1"],"多数据源模式":["29.1","30.1"],"将状态存放到多个数据源中":["29.1","30.1"],"数据流动不可控":["29.3"],"在mvc模式中":["29.3"],"视图可以直接修改模型的状态":["29.3"],"模型可以直接更新视图":["29.3"],"统一状态管理":["29.4"],"数据可预测性":["29.4"],"新状态":["29.4"],"旧状态":["29.4"],"事件":["29.4"],"tip":["29.4"],"flux":["29.4"],"的核心思想是单向数据流":["29.4"],"容易导致不必要的":["30.3"],"无用渲染":["30.3"],"造成性能损失":["30.3"],"比如react":["30.3"],"react":["30.5","34.1","36.4","37.4","37.6"],"创建atom":["30.5","30.6"],"valueatom":["30.5","30.6"],"派生atom":["30.6"],"依赖某个atom":["30.6"],"value":["30.7","37.5"],"set":["30.8","30.9"],"arg":["30.8","30.9"],"addnumberatom":["30.9"],"null":["30.9","37.1","37.3","41.4"],"result":["30.9"],"useatom":["30.10"],"useatomvalue":["30.10"],"usesetatom":["30.10"],"jotai":["30.10"],"countatom":["30.10"],"a":["30.10"],"而没有更新操作":["30.11"],"请使用useatomvalue":["30.11"],"或者说":["30.12"],"用provider包裹的组件":["30.12"],"store中的状态":["30.13"],"是全局的":["30.13"],"dom":["30.14"],"tsx":["30.14"],"css":["30.14"],"创建一个":["31.1"],"root":["31.1"],"存放":["31.1"],"redux":["31.2"],"thunk":["31.2"],"themeprovider":["32.0"],"ccc":["32.1"],"background":["32.1"],"pink":["32.1"],"hooks":["32.2"],"usecontext":["32.2"],"下面看一下":["32.2"],"接受一个参数":["32.2"],"就是想要获取的":["32.2"],"返回一个":["32.2"],"值":["32.2"],"就是最近的":["32.2"],"提供":["32.2"],"contextvalue":["32.2"],"其原理主要是运用了":["34.0"],"对于":["34.1"],"执行":["34.1"],"处理逻辑是采用异步调用":["34.1"],"这样浏览器只会绘制一次":["34.2"],"如果修改":["34.2"],"布局放在":["34.2"],"那":["34.2"],"templates":["34.3"],"为需要":["34.3"],"styled":["34.3"],"定义一系列css属性":["34.3"],"当该组件的js代码被解析执行的时候":["34.3"],"components":["34.3"],"会动态生成一个":["34.3"],"选择器":["34.3"],"并把对应的":["34.3"],"alldemo":["34.4"],"functionlifecycle":["34.4"],"num":["34.4"],"setnum":["34.4"],"usestate":["34.4"],"组件挂载完成":["34.4"],"清除":["34.4"],"父组件":["35.2"],"fallback":["35.2","35.4"],"加载过程中的占位符":["35.2"],"需要等待异步加载完成后渲染的组件":["35.2"],"确保组件拿到的数据是异步请求后最新的数据":["35.2"],"suspense":["35.4"],"初始化会默认执行一次":["36.1"],"jsx":["36.1","37.6"],"属性访问到":["36.2"],"组件":["36.2"],"为":["36.2"],"渲染与否":["36.3"],"可以将需要传给":["36.3"],"直接通过函数参数的方式传递给执行函数":["36.3"],"alien":["36.4"],"let":["36.4","36.6","37.6","38.4"],"us":["36.4","36.6","37.6","38.4"],"learn":["36.4","36.6","37.6","38.4"],"map":["36.4"],"item":["36.4"],"focus":["36.4"],"fatherprops":["36.6","36.7"],"mes":["36.6","37.6"],"father":["36.7"],"age":["36.7"],"formvalue":["36.9"],"setformvalue":["36.9"],"setvalue":["36.9"],"inputvalue":["36.9"],"callback":["36.9"],"renderelements":["36.9"],"这里是react":["36.9"],"children用来循环react":["36.9"],"element的方法":["36.9"],"foreach":["36.9"],"el":["36.9"],"currentcomponentinstance":["37.1"],"forwardref的第二个参数是ref":["37.2"],"这个ref是grandfahter组件传递过来的":["37.2"],"至此一层一层从prop传递":["37.2"],"最终通过ref赋值":["37.2"],"grandfather":["37.2"],"button属性":["37.3"],"点击":["37.3"],"wrap":["37.4"],"extends":["37.4"],"render":["37.4","38.7"],"forwardedref":["37.4"],"otherprops":["37.4"],"对":["37.5"],"gjs说":["37.5"],"input":["37.5"],"onchange":["37.5"],"e":["37.5"],"target":["37.5"],"to":["37.5"],"耿嘉帅":["37.5"],"gjscomp":["37.5"],"始终指向一个内存空间":["37.6"],"所以这样一点好处是可以随时访问到变化后的值":["37.6"],"tolearn":["37.6"],"super":["38.1"],"对象":["38.2"],"缓存起来":["38.2"],"第二个参数为一个数组":["38.2"],"存放当前":["38.2"],"把它缓存起来":["38.3"],"可以把函数和属性缓存起来":["38.3"],"作为":["38.3"],"purecomponent":["38.3"],"的绑定方法":["38.3"],"或者配合其他hooks一起使用":["38.3"],"原理其实很简单":["38.3"],"每次执行":["38.3"],"state不同情况":["38.4"],"state为引用数据类型时候":["38.4"],"my":["38.4"],"is":["38.4"],"ctor":["38.5"],"prototype":["38.5"],"shallowequal":["38.5"],"oldprops":["38.5"],"oldstate":["38.5"],"综上可以用":["38.6"],"usecallback":["38.6"],"或者":["38.6"],"或":["38.7"],"发生变化时才会更新":["38.7"],"false":["38.7"],"compare":["38.8"],"如果返回true":["38.9"],"需要memo备忘":["38.9"],"会跳过shouldcomponentupdate的判断":["38.10"],"直接更新组件":["38.10"],"state":["38.11"],"而用户操作表单往往是频繁的":["38.11"],"需要频繁改变数据层":["38.11"],"所以很有可能让整个页面组件高频率":["38.11"],"用户触发添加程序":["41.1"],"react中的reducer也是这样的他们都接受":["41.2"],"textcontent":["41.4"],"json":["41.4"],"stringify":["41.4"],"reducer":["41.4"],"newstate":["41.5"],"接收状态事件":["41.5"],"计算新的状态":["41.5"],"switch":["41.5"],"从而将相关状态集中管理":["41.6"],"减少状态逻辑的分散":["41.6"],"可预测性":["41.6"],"并且需要改动getuser里面的代码":["48.1"],"那我们此时就需要解决这个问题":["48.1"],"使用di":["48.1"],"依赖是service":["48.1"],"依赖的标准需要拥有一个getlist方法":["48.1"],"并且接收一个id":["48.1"],"控制反转的本质就是降低耦合度":["48.2"],"更方便的依赖注入":["48.3"],"容器需要拥有register方法用来管理容器的注册":["48.4"],"解析方法":["48.5"],"resolve":["48.5"],"page":["54.0"]},{"0":["1.7","37.6","38.4","38.9"],"1":["35.4","38.5"],"2":["1.7","25.2","29.3","31.1","35.4","38.5","38.10"],"3":["1.7","25.2","29.1","30.1","38.11","48.3"],"4":["1.7","18.2"],"5":["7.1"],"9":["26.3"],"11":["6.2"],"12":["6.2"],"13":["6.2"],"14":["6.2"],"21":["14.2"],"102":["53.0"],"127":["11.9"],"300":["53.0"],"400":["13.0"],"500":["13.1"],"权限校验":["1.0"],"异常处理等等":["1.0"],"如果直接在controller中去写这些逻辑":["1.0"],"会与业务代码混淆":["1.0"],"不利于维护":["1.0"],"aop就是为了解决这个问题":["1.0"],"所以nest也有中间件的概念":["1.1"],"是一个对象":["1.2"],"包含了请求的所有信息":["1.2"],"appmodule":["1.3"],"implements":["1.3","11.5"],"nestmodule":["1.3"],"configure":["1.3"],"consumer":["1.3"],"middlewareconsumer":["1.3"],"module":["1.4"],"第二种":["1.4"],"imports":["1.4","3.0","10.0","11.2","12.0"],"controllers":["1.4","3.0","18.1","19.0"],"providers":["1.4","11.2","18.1"],"appservice":["1.4","3.0","11.2"],"provide":["1.4"],"useclass":["1.4"],"设置请求头等":["1.5"],"作用域":["1.5"],"可以访问请求和响应对象":["1.5"],"但不能访问处理请求的路由处理程序的细节":["1.5"],"控制流":["1.5"],"不能改变控制流":["1.5"],"即它们不能决定是否继续处理请求":["1.5"],"只能对请求进行一些处理或添加一些额外的信息":["1.5"],"是基于":["1.5"],"aop":["1.5"],"面向切面编程":["1.5"],"概念实现的":["1.5"],"它可以拦截和修改从一个函数流向另一个函数的数据":["1.5"],"它们通常用于在方法执行之前或之后添加额外的逻辑":["1.5"],"如修改返回值":["1.5"],"异常映射":["1.5"],"扩展基本方法行为":["1.5"],"事务管理等":["1.5"],"使用":["1.6"],"aaa":["1.6","11.4","13.0"],"appcontroller":["1.6"],"get":["1.6","6.4","30.6"],"b":["1.6","29.4"],"a":["1.6","4.0","11.1","19.1"],"query":["1.6","27.9"],"num":["1.6"],"也可以自己扩展":["1.7"],"extends":["1.7","5.1","25.6","38.9"],"constructor":["1.7","38.9"],"super":["1.7","38.9"],"forbidden":["1.7"],"httpstatus":["1.7"],"通过这样的方式实现了异常到响应的对应关系":["1.7"],"代码里只要抛出不同的异常":["1.7"],"就会返回对应的响应":["1.7"],"很方便":["1.7"],"aop执行顺序":["1.7"],"middleware是继承的express":["1.7"],"在最外层调用":["1.7"],"进入路由先调用guard判断是否有权限":["1.7"],"如有权限会跳到拦截器":["1.7"],"拦截器组织了一个链条通过next":["1.7"],"调用":["1.7"],"直至controller":["1.7"],"到controller之前会先调用pipe判断是否有权限":["1.7"],"request":["2.0","13.1"],"res":["2.0","11.10"],"response":["2.0"],"next":["2.0","13.4"],"function":["2.0","17.0","25.4","26.8","32.2","37.6","38.4"],"console":["2.0","9.0","11.4","27.9","30.10","36.1"],"log":["2.0","9.0","11.4","27.9","30.10"],"中间件触发":["2.0"],"if":["2.1","36.9","38.1"],"true":["2.1","12.3","13.2"],"details":["2.1"],"定义一个authguard守卫类":["2.1"],"实现canactivate接口":["2.1"],"handle":["2.2"],"pipe":["2.2"],"tap":["2.2"],"after":["2.2"],"然后将数据传递给控制器或下一个管道":["2.3"],"管道的主要目的是增强应用的可靠性":["2.3"],"dirname":["3.0"],"const":["3.0","12.2","13.3","14.1","19.3","26.8","34.3","38.1","38.7"],"node":["3.0","37.1","37.5"],"development":["3.0"],"bservice":["3.0"],"快速配置env配置":["4.0"],"配置环境文件":["4.0"],"import":["4.0","11.8","13.0","25.0","26.3"],"registeras":["4.0"],"from":["4.0","11.8","13.0","26.3"],"nestjs":["4.0"],"default":["4.0","35.2","37.6","38.4","41.5"],"ts注解":["5.0"],"或直接传递参数":["5.0"],"iphone":["5.1"],"静态模块":["6.0"],"http请求并返回http响应的类":["6.1"],"controller的作用是将路由映射到处理请求方法上":["6.1"],"在controller中可以使用nestjs提供的装饰器来定义":["6.1"],"路由":["6.1"],"中间件":["6.1"],"控制器管道":["6.2"],"路由管道":["6.2"],"路由参数管道":["6.2"],"需要使用":["6.3"],"装饰器声明该提供者":["6.3"],"注册到容器的提供者":["6.3"],"默认只对当前模块有效":["6.3"],"即作用域为模块":["6.3"],"usefactory":["6.4","12.4","19.4"],"return":["6.4","11.9","13.2","19.2","26.6","30.7","30.10","32.2","36.8","36.9","37.4","41.4","48.5"],"secret":["6.4"],"pipes":["7.1"],"核验请求的数据":["7.1"],"过滤器":["7.1"],"当一个请求到达应用程序时":["8.0"],"nestjs框架会将他封装成一个executioncontext对象":["8.0"],"获取属性的元数据":["9.0"],"propertymetadata":["9.0"],"new":["9.0","12.2","48.5"],"forwardref":["10.0"],"bmodule":["10.0"],"nest":["10.0","11.10","11.11","12.1"],"readonly":["11.1"],"record":["11.1"],"json":["11.3","13.1","14.0","14.5"],"msg":["11.3"],"message":["11.3","28.3"],"controller":["11.3"],"除了":["11.4"],"injectable":["11.5"],"roleguard":["11.5"],"canactivate":["11.5"],"inject":["11.5"],"reflector":["11.5"],"private":["11.5"],"string":["11.6"],"as":["11.8"],"app":["11.8","38.11"],"hostname":["11.10"],"必须手动":["11.10"],"end去响应":["11.10"],"handler2":["11.11"],"不会处理注入":["11.11"],"next的handler返回值":["11.11"],"handler默认返回值是200状态码":["11.11"],"code":["11.12"],"configmodule":["12.0"],"module不行":["12.1"],"warning":["12.1"],"这里的":["12.1"],"方法其实叫啥都行":["12.1"],"但":["12.1"],"options":["12.2"],"token":["12.2"],"build":["12.2"],"tip":["12.2","35.4","36.3"],"使用流程":["12.2"],"setextras":["12.3"],"isglobal":["12.3"],"definition":["12.3"],"extras":["12.3"],"版本":["12.4"],"也就是传入":["12.4"],"等":["12.4","13.4","25.0"],"option":["12.4"],"内部注册异步":["12.4"],"provider":["12.4"],"exception":["13.0"],"filter":["13.0"],"捕获":["13.0"],"getresponse":["13.1"],"getrequest":["13.1"],"status":["13.1"],"bbb":["13.1","17.0"],"getclass":["13.2"],"gethandler":["13.2"],"context":["13.3","38.10"],"boolean":["13.3"],"promise":["13.3"],"获取目标方法的元数据":["13.3"],"更推荐的方式是根据":["13.4"],"gettype":["13.4"],"的结果分别":["13.4"],"switchtohttp":["13.4"],"data":["14.0"],"可以使用":["14.1"],"encodeuricomponent":["14.1"],"的":["14.1","34.1","38.3"],"api":["14.1","14.5","25.0"],"来编码":["14.1"],"unlencoded":["14.2"],"length":["14.2"],"connection":["14.2"],"keep":["14.2"],"alive":["14.2"],"需要指定":["14.3"],"content":["14.3"],"type":["14.3","36.9"],"为":["14.3"],"multipart":["14.3"],"如果只是传输":["14.4"],"数据的话":["14.4"],"person":["14.5"],"personcontroller":["14.5"],"post":["14.5"],"example":["14.5"],"需要指定content":["14.5"],"type为aplication":["14.5"],"内容会以json的形式传输":["14.5"],"光":["14.5"],"verify对密码进行解密":["16.0"],"解密符合":["16.0"],"path":["17.0"],"ccc":["17.1"],"放到一个模块中":["18.0"],"然后":["18.0"],"aservice":["18.1"],"然后监听网络端口":["18.2"],"之后":["18.2"],"应用就正常运行了":["18.2"],"onmoduleinit":["18.2"],"onapplicationbootstrap等":["18.2"],"都是我们可以实现的生命周期方法":["18.2"],"ts":["18.2"],"可以在里面做一些初始化":["18.3"],"销毁的逻辑":["18.3"],"authcontroller":["19.0"],"export":["19.0","35.2","37.6","38.4"],"class":["19.0","25.6"],"usevalue":["19.1"],"authservice":["19.2"],"perison":["19.2"],"createclient":["19.3"],"socket":["19.3"],"还可以usevalue":["19.4"],"useexisting":["19.4"],"然后通过一系列适配器和拦截器集成到nestjs中":["20.0"],"实现动态加载组件":["25.0"],"实现代码分割":["25.0"],"两种":["25.1"],"业务组件做了些什么":["25.2"],"所以正向属性代理":["25.2"],"更适合做一些开源项目的":["25.2"],"目前开源的":["25.2"],"基本都是通过这个模式实现的":["25.2"],"同样适用于类组件和函数组件":["25.2"],"方便获取组件内部状态":["25.3"],"比如":["25.3"],"state":["25.3","38.5","38.9","41.4"],"props":["25.3","25.7","36.9","37.4","38.3","38.5"],"生命周期":["25.3"],"绑定的事件函数等":["25.3"],"②":["25.3"],"es6继承可以良好继承静态属性":["25.3"],"angular":["25.4"],"advance":["25.4"],"组件中":["25.5"],"在":["25.5","36.3"],"生命周期动态加载上述的路由组件component":["25.5"],"如果在切换路由或者没有加载完毕时":["25.5"],"显示的是":["25.5"],"效果":["25.5"],"组件赋能":["25.5"],"对于属性代理虽然不能直接获取组件内的状态":["25.5"],"但是可以通过":["25.5"],"div":["25.6","30.10","32.2","34.4","38.7"],"ref":["25.6"],"index":["25.6","26.8","35.2","36.6","37.6","38.9"],"authorization":["25.7","27.9"],"component":["25.7","38.9"],"home":["25.7","38.4"],"matchpermission":["25.7"],"list":["25.7"],"indexof":["25.7"],"usetransition":["26.1"],"concurrent模式下":["26.1"],"过渡更新任务":["26.1"],"结果是0":["26.3"],"react":["26.3","36.1","36.2","36.6","36.8"],"usestate获取到最新的number":["26.5"],"所以打印的值是最新的number":["26.5"],"人话":["26.5"],"点击button时触发的log和setnumber在第一任务线程":["26.5"],"第一线程执行完毕后执行第一线程引起的一系列任务":["26.5"],"外部在第二任务线程中执行的":["26.5"],"此时setnumber已执行完毕":["26.5"],"点击按钮后执行过程":["26.5"],"线程1":["26.5"],"handleclick":["26.5"],"宏任务log":["26.5"],"微任务setnumber":["26.5"],"触发线程2":["26.5"],"name":["26.6"],"switch":["26.6","41.4"],"case":["26.6","41.4","41.5"],"increment":["26.6"],"count":["26.6"],"demo":["26.8"],"jsx":["26.8","53.0"],"childref":["26.8"],"useref":["26.8"],"null":["26.8","37.5"],"click":["26.8"],"chcildref":["26.8"],"logger":["26.8"],"这在提高用户体验和性能方面很有帮助":["27.1"],"自动缓存失效处理":["27.1"],"当数据过期或需要刷新时":["27.1"],"可以自动处理缓存失效并重新获取数据":["27.1"],"无需手动编写过期和刷新逻辑":["27.1"],"服务器状态更新":["27.1"],"无数据预取":["27.2"],"usequery":["27.9"],"querykey":["27.9"],"owner":["27.9"],"repo":["27.9"],"repos":["27.9"],"issues":["27.9"],"headers":["27.9"],"成功或错误状态":["27.10"],"例如":["27.10","53.0"],"可以是字符串":["27.10"],"loading":["27.10"],"success":["27.10"],"或":["27.10"],"hashrouter":["28.0"],"memoryrouter":["28.0"],"好处":["28.0"],"formishalffilledout":["28.3"],"are":["28.3"],"you":["28.3"],"sure":["28.3"],"可在多个地方使用消费":["29.1","30.1"],"usestore":["29.1","30.1"],"这种双向的数据流动会导致数据的不一致和混乱":["29.3"],"难以调试和维护":["29.3"],"由于数据流动不可控":["29.3"],"它将应用程序分为四个主要部分":["29.4"],"br":["29.4"],"view":["29.4"],"视图":["29.4"],"负责渲染用户界面":["29.4"],"接收用户输入并将其发送给":["29.4"],"dispatcher":["29.4"],"redux":["30.3"],"v6完全基于context":["30.3"],"api而导致性能大幅下降":["30.3"],"v7又回退到之前的内部订阅方案":["30.3"],"context更适合放类似主题这种变化不大的全局数据":["30.3"],"依赖某个atom":["30.5"],"当依赖项发生变化时更新触发atom的第一个参数修改变量":["30.5","30.6"],"deriveatom":["30.5","30.6"],"async":["30.6"],"setvalue":["30.7"],"useatom":["30.7"],"text":["30.8"],"fc":["30.8"],"value":["30.8","32.1","36.9"],"await":["30.9"],"url":["30.9"],"setcount":["30.10"],"组件a渲染":["30.10"],"button":["30.10","38.7"],"onclick":["30.10","38.7"],"如果仅更新操作":["30.11"],"而无需渲染状态的组件":["30.11"],"状态是独立的":["30.12"],"不受外部影响":["30.12"],"同时也不影响外部":["30.12"],"任何组件都可以使用":["30.13"],"但是":["30.13"],"createroot":["30.14"],"document":["30.14"],"getelementbyid":["30.14"],"root":["30.14","38.11"],"render":["30.14","38.11"],"strictmode":["30.14"],"state的根对象":["31.1"],"dispatch":["31.1"],"使":["31.2"],"action":["31.2","41.4"],"可以为":["31.2"],"son":["32.1"],"style":["32.2","53.0"],"hooks":["34.0","38.6"],"里面的":["34.0"],"对于每一个":["34.1"],"effect":["34.1"],"callback":["34.1"],"执行是在浏览器绘制视图之后":["34.2"],"接下来又改":["34.2"],"就可能会导致浏览器再次回流和重绘":["34.2"],"而且由于两次绘制":["34.2"],"样式通过":["34.3"],"标签的形式插入到":["34.3"],"head":["34.3"],"标签里面":["34.3"],"动态生成的":["34.3"],"选择器会有一小段哈希值来保证全局唯一性来避免样式发生冲突":["34.3"],"这种模式下本质上是动态生成":["34.3"],"标签":["34.3"],"title":["34.3"],"组件销毁":["34.4"],"number":["34.4"],"执行过程":["35.4"],"函数调用时":["35.4"],"会返回一个":["35.4"],"对象":["35.4","36.2"],"element":["36.2"],"作用":["36.2"],"可以根据需要控制":["36.2"],"这种情况":["36.3"],"中":["36.3"],"判断是":["36.4"],"elment":["36.4"],"混入":["36.4"],"cloneelement":["36.4","36.8","38.1"],"一般不需要具体指出":["36.5"],"focus":["36.7"],"prop":["36.8"],"displayname":["36.9"],"混入props":["36.9"],"childrenitem":["36.9"],"onchange":["36.9"],"ref模式获取元素或组件":["37.1"],"childspanref":["37.2"],"newfather":["37.2"],"forwardrefindex":["37.3"],"gyqmsg":["37.5"],"setgyqmsg":["37.5"],"settogyqmsg":["37.5"],"传递函数":["37.5"],"调用子组件的方法":["37.5"],"current":["37.5","41.4"],"yq":["37.5"],"vue3":["37.6"],"id":["37.6"],"typeinfo":["37.6"],"controllcomponentrender":["38.1"],"通过此函数判断":["38.1"],"只有":["38.1"],"变化的时候":["38.1"],"重新创建":["38.1"],"的依赖项":["38.2"],"在函数组件下一次执行的时候":["38.2"],"会对比":["38.2"],"依赖项里面的状态":["38.2"],"是否有改变":["38.2"],"本质上":["38.3"],"createelement":["38.3"],"会产生一个新的":["38.3"],"这个":["38.3","38.6"],"将作为对应":["38.3"],"父组件":["38.4"],"numbera":["38.4"],"setnumbera":["38.4"],"usestate":["38.4"],"numberb":["38.4"],"setnumberb":["38.4"],"父组件改变props":["38.4"],"判断是否为纯函数":["38.5"],"如果是则进行浅比较shallowequal":["38.5"],"info":["38.5"],"shallowequal过程":["38.5"],"首先新老props":["38.5"],"states比较":["38.5"],"不相等重新生成element":["38.5"],"判断新老":["38.5"],"或者":["38.5"],"有不是对象或者为":["38.5"],"usememo":["38.6"],"解决这个问题":["38.6"],"首选":["38.6"],"初衷就是为了解决这种情况的":["38.6"],"setstate":["38.7"],"需要被包裹的组件":["38.8"],"this":["38.9"],"test":["38.9"],"第三种情况就是越是靠近":["38.11"],"程序了解到事件名以后去reducer中找到对应的函数执行操作":["41.1"],"当前state":["41.2"],"和触发的事件action":["41.2"],"tasks":["41.4"],"previous":["41.4"],"使用usereducer可以使状态变化变得可预测":["41.6"],"因为它通过一个reducer函数来处理状态变化":["41.6"],"可以更好地理解状态变化的来源":["41.6"],"中间件和副作用":["41.6"],"实际使用":["48.1"],"abstract":["48.1"],"不再强依赖一些属性和方法":["48.2"],"具体的实现方式是di依赖注入":["48.2"],"容器需要有一个解析的方法":["48.4"],"从容器中解析已注册的依赖项并注入":["48.4"],"throw":["48.5"],"split":["53.0"],"这样可得到一个数组":["53.0"],"如果我想把他拆分成一个对象该如何实现":["53.0"],"reg":["53.0"],"w":["53.0"],"s":["53.0"],"replace":["53.0"],"iframe":["53.0"],"height":["53.0"],"team":["54.0"]},{"0":["25.7"],"1":["30.10","34.3","34.4","38.7"],"2":["34.2"],"3":["12.1","29.3","31.1","38.5"],"4":["25.0","25.2"],"5":["26.3"],"6":["7.1","26.5"],"8":["26.5"],"15":["6.2"],"16":["6.2"],"18":["4.0"],"22":["14.2"],"28":["36.6"],"85":["14.2"],"89":["14.2"],"100":["53.0"],"10000":["11.8"],"实现无侵入业务式的编程":["1.0"],"express的中间件的洋葱模型也是一种aop的视线":["1.0"],"因为你可以透明的在外包一层":["1.0"],"加入一些逻辑":["1.0"],"内层感知不到":["1.0"],"而nest实现aop的方式很多":["1.0"],"进一步区分为全局中间件和路由中间件":["1.1"],"包含了响应的所有信息":["1.2"],"是一个函数":["1.2"],"用来执行下一个中间件":["1.2"],"apply":["1.3"],"loggermiddleware":["1.3"],"forroutes":["1.3"],"aaa":["1.3","12.1"],"code":["1.3","1.6"],"appmodule":["1.4","3.0"],"tip":["1.4","12.0","48.4"],"如果您仔细观察全局启用守卫中的代码后会注意两种全局注册的方式":["1.4"],"useglobalguards是手动注册的方式":["1.4"],"所以他并不在ioc容器中":["1.4"],"所以在守卫中无法使用依赖注入":["1.4"],"而app":["1.4"],"ts中的方式是通过依赖注入的方式注册的":["1.4"],"所以守卫中可以使用依赖注入":["1.4"],"可以访问请求上下文":["1.5"],"并对请求或响应进行更细粒度的控制":["1.5"],"它们拥有更大的控制权":["1.5"],"可以决定是否继续执行下一个拦截器或路由处理程序":["1.5"],"甚至可以完全替换方法的返回值":["1.5"],"简洁版":["1.5"],"他们都是到达请求之前的处理函数":["1.5"],"但是权限和作用不同":["1.5"],"interceptor权限更大":["1.5"],"因为他可以获取到请求的上下文":["1.5"],"而middleware只能获取到请求和响应对象":["1.5"],"在":["1.5"],"controller":["1.5","1.7","2.1","11.1","19.0"],"handler":["1.5"],"上加一些":["1.5"],"metadata":["1.5"],"这种就只有":["1.5"],"interceptor或者":["1.5"],"guard":["1.5"],"里可以取出来":["1.5"],"pipe不仅可以对某个参数生效":["1.6"],"也可以对整个controller":["1.6"],"全局生效":["1.6"],"group":["1.6"],"usepipes":["1.6"],"的调用时机很容易想到":["1.7"],"就是在响应之前对异常做一次处理":["1.7"],"image":["1.7"],"总结":["1.7"],"基于":["1.7"],"express":["1.7"],"这种":["1.7"],"平台做了一层封装":["1.7"],"应用了":["1.7"],"mvc":["1.7"],"ioc":["1.7"],"aop":["1.7"],"等架构思想":["1.7"],"mvc中请求先经过":["1.7"],"然后调用":["1.7"],"model":["1.7"],"层的":["1.7"],"service":["1.7"],"repository":["1.7"],"完成业务逻辑":["1.7"],"最后返回对应的":["1.7"],"view":["1.7"],"是指":["1.7"],"会自动扫描带有":["1.7"],"使用":["2.0"],"添加到模块或者控制器中":["2.0"],"module":["2.0","2.2"],"在canactivate":["2.1"],"方法中":["2.1"],"通过参数context获取到请求对象":["2.1"],"调用validaterequest":["2.1"],"函数验证请求是否合法":["2.1"],"如果请求合法就返回true":["2.1"],"要在控制器中使用守卫":["2.1"],"需要将守卫添加到路由上":["2.1"],"useguard":["2.1"],"ms":["2.2"],"写入模块中作为提供者":["2.2"],"imports":["2.2"],"安全性":["2.3"],"appcontroller":["3.0","11.3"],"不使用dotenv扩展包的话需要手动readfile然后根据":["3.0"],"n拆分":["3.0"],"循环放入process":["3.0"],"key":["3.0"],"太麻烦":["3.0"],"工厂函数":["3.0"],"对于复杂要求的provider":["3.0"],"我们就可以使用":["3.0"],"usefactory":["3.0"],"工厂函数进行提供者注册":["3.0"],"name":["4.0","14.1","14.2","25.4","36.6","36.7"],"process":["4.0"],"env":["4.0"],"app":["4.0","6.4"],"age":["4.0","14.2","36.6"],"最终统一导入到config":["4.0"],"index":["4.0","26.5","36.7","37.4"],"再统一导出":["4.0"],"总之控制权不在类中":["5.0"],"而是由外部决定":["5.0"],"play":["5.1"],"student":["5.1"],"动态模块":["6.0"],"全局模块":["6.0"],"pipe":["6.1"],"dto和请求参数等":["6.1"],"service提供一种实现业务逻辑的方式":["6.1"],"他可以访问操作数据":["6.1"],"控制器":["6.2"],"方法处理器":["6.2"],"请求之后":["6.2"],"可以使用":["6.3"],"exports":["6.3","11.2","18.1"],"导出给其他模块使用":["6.3"],"提供者是单例的4":["6.3"],"提供者可以是任何值":["6.3"],"token":["6.4"],"expiresin":["6.4"],"100d":["6.4"],"模块提供者":["6.4"],"filters":["7.1"],"处理请求时的错误":["7.1"],"守卫":["7.1"],"这个对象包含了当前请求的上下文信息":["8.0"],"包括请求头":["8.0"],"请求体":["8.0"],"nest的装饰器基本都是使用reflect":["9.0"],"metadata实现的":["9.0"],"这就是":["9.0"],"nest":["9.0"],"的核心实现原理":["9.0"],"通过装饰器给":["9.0"],"或者对象添加":["9.0"],"并且开启":["9.0"],"会单独创建两个":["10.0"],"之后再把":["10.0"],"string":["11.1","11.7","17.1"],"any":["11.1","11.6"],"inject":["11.3"],"appservice":["11.3"],"private":["11.3"],"readonly":["11.3","11.5"],"get":["11.4","13.3","30.5"],"外":["11.4"],"还可以用":["11.4"],"put":["11.4"],"delete":["11.4"],"context":["11.5","32.1"],"executioncontext":["11.5"],"boolean":["11.5"],"promise":["11.5"],"observable":["11.5"],"record":["11.6"],"console":["11.7","37.3"],"use":["11.8"],"secret":["11.8"],"abc":["11.8"],"cookie":["11.8"],"maxage":["11.8"],"这么设计是为了避免你自己返回的响应和":["11.10"],"返回的响应的冲突":["11.10"],"如果你不会自己返回响应":["11.10"],"可以通过":["11.10"],"passthrough":["11.10"],"参数告诉":["11.10"],"你可以通过":["11.11"],"httpcode修改它":["11.11"],"fff":["11.11"],"httpcode":["11.11"],"return":["11.12","17.0","26.8","30.6","30.8","48.1"],"url":["11.12"],"此时configmodule是静态的":["12.0"],"约定了":["12.1"],"种方法名":["12.1"],"用一次模块传一次配置":["12.1"],"比如这次调用是":["12.1"],"bbbmodule":["12.1"],"创建xxx":["12.2"],"ts文件":["12.2"],"使用configurablemodulebuilder来生成一个动态模块":["12.2"],"继承configurablemoduleclass":["12.2"],"global":["12.3"],"最后再app":["12.3"],"这个过程也可以用":["12.4"],"configurablemodulebuilder":["12.4"],"来生成":["12.4"],"通过":["12.4","38.5"],"setclassmethodname":["12.4"],"设置方法名":["12.4"],"setextras":["12.4"],"异常":["13.0"],"t":["13.0","41.4"],"implements":["13.0","18.2"],"exceptionfilter":["13.0"],"else":["13.1","36.4"],"ws":["13.1"],"rpc":["13.1"],"为异常的实例":["13.1"],"主机参数":["13.1"],"分辨":["13.1"],"这个executioncontext是argumentshost的子类":["13.2"],"扩展了":["13.2"],"requiredroles":["13.3"],"this":["13.3"],"roles":["13.3"],"if":["13.3"],"switchtows":["13.4"],"swtichtorpc":["13.4"],"然后再取对应的":["13.4"],"argument":["13.4"],"而":["13.4"],"encode":["14.0"],"e5":["14.2"],"因为内容是表单搜索":["14.2"],"所以跟query差不多":["14.2"],"都需要urlencoded编译一下":["14.2"],"然后指定":["14.3"],"也就是分割线":["14.3"],"body":["14.3"],"不需要用这两种":["14.4"],"可以直接指定content":["14.4"],"type":["14.4"],"后端代码同样使用":["14.5"],"来接收":["14.5"],"不需要做啥变动":["14.5"],"和":["14.5","38.6"],"都是从":["14.5"],"取值":["14.5"],"内部会根据":["14.5"],"做区分":["14.5"],"使用不同的解析方式":["14.5"],"前端post默认请求头是application":["14.5"],"所以不需要指定content":["14.5"],"json和form":["14.5"],"urlencode不适合大文件传输":["14.5"],"data适合":["14.5"],"根据头信息":["16.0"],"role":["17.0"],"data":["17.1"],"ctx":["17.1"],"这个模块":["18.0"],"acontroller":["18.1"],"ccc":["18.2"],"export":["18.2","34.4","36.9","37.3"],"class":["18.2","37.2"],"ccccontroller":["18.2"],"constructor":["18.2"],"如onapplicationshutown里通过moduleref":["18.3"],"get取出一些provider":["18.3"],"执行关闭连接等销毁逻辑":["18.3"],"auth":["19.0","48.1"],"我是a":["19.1"],"hello":["19.2","25.4","25.6"],"gethello":["19.2"],"host":["19.3"],"localhost":["19.3"],"port":["19.3"],"灵活运用这些":["19.4"],"provider":["19.4"],"类型":["19.4"],"加入":["25.0"],"loading":["25.0","35.2","53.0"],"效果":["25.0"],"两者之间有一些共性和区别":["25.1"],"可以完全隔离业务组件的渲染":["25.2"],"因为属性代理说白了是一个新的组件":["25.2"],"相比反向继承":["25.2"],"可以完全控制业务组件是否渲染":["25.2"],"可以嵌套使用":["25.2"],"多个":["25.2"],"是可以嵌套使用的":["25.2"],"而且一般不会限制包装":["25.2"],"所以无须对静态属性和方法进行额外的处理":["25.3"],"缺点":["25.3"],"函数组件无法使用":["25.3"],"和被包装的组件耦合度高":["25.3"],"需要知道被包装的原始组件的内部状态":["25.3"],"具体做了些什么":["25.3"],"otherprops":["25.4"],"alien":["25.4","36.6"],"替换":["25.4"],"元素节点":["25.4"],"appendelement":["25.4"],"createelement":["25.4"],"world":["25.4"],"my":["25.4"],"ref":["25.5"],"获取组件实例":["25.5"],"获取到组件实例":["25.5"],"就可以获取组件的一些状态":["25.5"],"或是手动触发一些事件":["25.5"],"进一步强化组件":["25.5"],"但是注意的是":["25.5"],"类组件才存在实例":["25.5"],"函数组件不存在实例":["25.5"],"hoc":["25.5"],"react":["25.6","36.3","37.2","38.3"],"render":["25.6","38.9"],"classname":["25.6"],"p":["25.6"],"匹配权限":["25.7"],"consumer":["25.7","32.2"],"permissionlist":["25.7"],"usedeferredvalue":["26.1"],"解决更新状态滞后问题":["26.1"],"const":["26.3","48.5"],"indexref":["26.3"],"function":["26.3","26.5","31.2","37.3"],"线程2":["26.5"],"微任务setnumber触发重新渲染":["26.5"],"这就是为什么handleclick函数内打印不到最新的值":["26.5"],"而handleclick函数外可以大打印到最新的值的原因":["26.5"],"js":["26.5","53.0"],"number":["26.5"],"setnumber":["26.5","34.4"],"decrement":["26.6"],"default":["26.6","34.4","36.9","37.3","53.0"],"throw":["26.6"],"new":["26.6"],"error":["26.6","48.5"],"form":["26.8"],"button":["26.8","30.7","34.4","38.9"],"onclick":["26.8","34.4","38.9"],"myform":["26.8"],"对于需要与服务器状态同步的情况":["27.1"],"可以通过提供的无缝数据同步功能来处理":["27.1"],"确保客户端数据的一致性":["27.1"],"更少的重复代码":["27.1"],"无数据失效处理":["27.2"],"inputowner":["27.9"],"setinputowner":["27.9"],"facebook":["27.9"],"inputrepo":["27.9"],"setinputrepo":["27.9"],"setquerykey":["27.9"],"issuccess":["27.10"],"表示查询是否成功完成":["27.10"],"如果查询成功完成":["27.10"],"页面松耦合":["28.0"],"lazyload":["28.0"],"want":["28.3"],"leave":["28.3"],"redirect":["28.3"],"重定向":["28.3"],"atomic":["29.1","30.1"],"state":["29.1","30.1","34.4"],"原子状态":["29.1","30.1"],"当应用程序发生错误或状态异常时":["29.3"],"很难定位问题的根源并进行调试和修复":["29.3"],"嵌套回调和依赖关系":["29.3"],"调度器":["29.4"],"负责接收来自":["29.4"],"的动作":["29.4"],"并将它们分发给注册的":["29.4"],"而并不适合存放频繁更新的复杂状态集合":["30.3"],"原子化":["30.3"],"组件内状态":["30.3"],"但是api较多":["30.3"],"使用atom":["30.5"],"await":["30.6"],"text":["30.6","30.9","34.3"],"div":["30.7","36.9"],"useatom":["30.8","30.9","30.14"],"addnumber":["30.8"],"fc":["30.9"],"value":["30.9"],"prev":["30.10"],"add":["30.10"],"b":["30.10"],"count":["30.10"],"请使用":["30.11"],"即使大家共用同一个atom状态":["30.12"],"如果不想让这个组件受外部更新影响":["30.12"],"如果某个组件使用了provider包裹":["30.13"],"那么该组件的状态是独立的":["30.13"],"getdefaultstore":["30.14"],"useatomvalue":["30.14"],"num":["30.14"],"num2":["30.14"],"navstore":["30.14"],"更新store中的state":["31.1"],"subscribe":["31.1"],"enhancer":["31.2"],"提供者":["32.0"],"themeconsumer":["32.0"],"作用有两个":["32.1"],"属性传递":["32.1"],"消费者":["32.2"],"订阅者之consumer":["32.2"],"订阅者采取":["32.2"],"props":["32.2","37.2"],"接受最近一层":["32.2"],"中value":["32.2"],"作为":["32.2"],"函数的参数":["32.2"],"可以将参数取出来":["32.2"],"useeffect":["34.0","37.3"],"会向":["34.1"],"settimeout回调函数一样":["34.1"],"放入任务队列":["34.1"],"等到主线程任务完成":["34.1"],"dom":["34.1"],"视图上可能会造成闪现突兀的效果":["34.2"],"callback":["34.2"],"中代码执行会阻塞浏览器绘制":["34.2"],"h1":["34.3"],"font":["34.3"],"size":["34.3"],"5em":["34.3"],"align":["34.3"],"center":["34.3"],"color":["34.3"],"bf4f74":["34.3"],"wrapper":["34.3"],"section":["34.3"],"padding":["34.3"],"states":["34.4"],"改变state":["34.4","38.7"],"isrender":["34.4"],"setrender":["34.4"],"传统模式":["35.2"],"挂载组件":["35.2"],"请求数据":["35.2"],"再渲染组件":["35.2"],"当组件渲染的时候":["35.4"],"返回的":["35.4"],"会被":["35.4"],"捕获":["35.4"],"然后显示":["35.4"],"log":["36.1","37.3"],"props改变":["36.1"],"是否渲染":["36.2"],"可以用":["36.2"],"属性访问到是函数":["36.3"],"并不是":["36.3"],"element":["36.3"],"对象":["36.3"],"针对这种情况":["36.3"],"像下面这种情况下":["36.3"],"typeof":["36.4"],"中某个属性":["36.5"],"而是将":["36.5"],"indexprops":["36.6","36.7"],"children":["36.8"],"mes":["36.8"],"push":["36.9"],"123s":["36.9"],"json":["36.9"],"stringify":["36.9"],"ref是一个对象":["37.1"],"forwardref":["37.2"],"father":["37.2"],"grandref":["37.2"],"父组件":["37.2"],"extends":["37.2"],"home":["37.3"],"useref":["37.3"],"prop":["37.4"],"对yq说":["37.5"],"changetype":["37.6"],"info":["37.6","38.6"],"current":["37.6"],"的改变":["37.6"],"不需要视图变化":["37.6"],"如果有改变重新执行":["38.2"],"得到新的缓存值":["38.2"],"返回值":["38.2"],"pendingprops":["38.3"],"在此":["38.3"],"更新调和阶段":["38.3"],"会对比":["38.3"],"上老":["38.3"],"oldprops":["38.3"],"和新的":["38.3"],"改变numbera":["38.4"],"改变numberb":["38.4"],"对于props":["38.4"],"null":["38.5"],"的":["38.5"],"那么直接返回":["38.5"],"false":["38.5","41.4"],"更新组件":["38.5"],"object":["38.5"],"keys":["38.5"],"将新老":["38.5"],"或者新老":["38.5"],"handercallback":["38.6"],"usecallback接受两个参数":["38.6"],"第一个参数是需要缓存的函数":["38.6"],"第二个参数为deps":["38.6"],"如果deps内依赖项改变返回新的函数":["38.6"],"numa":["38.7"],"比较函数":["38.8"],"用来判断是否需要更新":["38.8"],"setstate":["38.9"],"如果组件依赖于context":["38.10"],"那么当context发生变化时":["38.10"],"根组件越值得注意":["38.11"],"根组件渲染会波及到整个组件树重新":["38.11"],"子组件":["38.11"],"这样的优点就是把操作整合到一起":["41.1"],"只需要知道用户执行了什么操作去reducer中寻找响应的程序而不是直接触发这些程序":["41.1"],"然后返回新的state":["41.2"],"done":["41.4"],"changed":["41.4"],"tasksk":["41.4"],"map":["41.4"],"initstate":["41.5"],"接收接受个初始值":["41.5"],"和状态计算函数":["41.5"],"返回的dispatch来调用状态计算函数":["41.5"],"通过usestate保存状态":["41.5"],"usereducer可以配合副作用和中间件来处理状态变化时的特定逻辑":["41.6"],"使得状态管理更加灵活":["41.6"],"复杂动态表单":["41.6"],"在处理复杂的动态表单或用户输入场景时":["41.6"],"void":["48.1"],"authservice":["48.1"],"控制反转需要一个容器":["48.2"],"配置集中管理":["48.3"],"让所有的依赖项统一管理注册解耦了对象之间的强依赖关系":["48.4"],"依赖":["48.5"],"未被注册到容器":["48.5"],"请先注册到容器再去使用":["48.5"],"注册":["48.5"],"width":["53.0"],"scrolling":["53.0"],"no":["53.0"],"title":["53.0"],"untitled":["53.0"],"src":["53.0"],"https":["53.0"],"codepen":["53.0"],"io":["53.0"],"woskvxzd":["53.0"],"the":["53.0"],"animator":["53.0"],"embed":["53.0"],"qwymdbq":["53.0"],"tab":["53.0"],"2cresult":["53.0"],"frameborder":["53.0"]},{"0":["26.5","26.8"],"1":["26.3","37.3","37.5","38.9"],"2":["12.1","26.1"],"3":["12.2"],"4":["26.3","29.3","38.5"],"5":["31.1"],"7":["7.1"],"17":["6.2"],"18":["6.2"],"20":["14.1"],"28":["36.7"],"222":["11.11"],"6379":["19.3"],"1231231231":["14.5"],"middleware":["1.0","1.7"],"中间件":["1.0"],"gurad":["1.0"],"守卫":["1.0"],"pipe":["1.0"],"管道":["1.0"],"放行请求":["1.2"],"不写的话":["1.2"],"请求就会被挂起":["1.2"],"path":["1.3","28.3"],"inject":["1.4","12.2"],"private":["1.4","2.1","18.2","19.0"],"readonly":["1.4","2.1","18.2","19.0"],"不行":["1.5"],"interceptor支持每个路由单独启用":["1.5"],"只作用于某个handler":["1.5"],"get":["1.5","2.1","11.3","14.2"],"bbb":["1.5"],"useinterceptors":["1.5","14.5"],"string":["1.5"],"也可以在controller级别启动":["1.5"],"作用于下面的全部handler":["1.5"],"appcontroller":["1.5","2.1","2.2"],"main":["1.6"],"js":["1.6","34.1"],"app":["1.6","2.2"],"useglobalpipes":["1.6"],"validatepipes":["1.6"],"module":["1.6","4.0"],"providers":["1.6","2.2","6.4"],"装饰器的类":["1.7"],"创建它们的对象":["1.7"],"并根据依赖关系自动注入它依赖的对象":["1.7"],"免去了手动创建和组装对象的麻烦":["1.7"],"则是把通用逻辑抽离出来":["1.7"],"通过切面的方式添加到某个地方":["1.7"],"可以复用和动态增删切面逻辑":["1.7"],"的":["1.7","19.4","38.4"],"guard":["1.7"],"interceptor":["1.7","2.2"],"思想的实现":["1.7"],"只不过是不同位置的切面":["1.7"],"它们都可以灵活的作用在某个路由或者全部路由":["1.7"],"这就是":["1.7"],"的优势":["1.7"],"我们通过源码来看了它们的调用顺序":["1.7"],"是":["1.7"],"的概念":["1.7"],"constructor":["2.1","5.1","19.0","25.5","34.4","37.2"],"appservice":["2.1","2.2","11.1"],"useguards":["2.1"],"eagonguard":["2.1"],"controllers":["2.2","6.4","19.1","19.2"],"provide":["2.2"],"可维护性":["2.3"],"xjclass":["3.0"],"make":["3.0"],"return":["3.0","13.3","17.1","30.9","30.14","37.6"],"this":["3.0","11.5"],"is":["3.0","25.4"],"method":["3.0","9.0"],"hd":["3.0"],"依赖注入其他提供者":["3.0"],"注册到全局module":["4.0"],"imports":["4.0"],"configmodule":["4.0"],"forroot":["4.0","12.1"],"isglobal":["4.0"],"true":["4.0","11.10","13.3","34.4","53.0"],"load":["4.0"],"controller":["4.0","13.2"],"内部仅仅调用一个抽象的方法":["5.0"],"具体的方法实现由第三方决定":["5.0"],"protected":["5.1"],"env配置相关":["6.0"],"同事还可以与其他服务交互以完成复杂的业务逻辑":["6.1"],"service是处理应用程序逻辑的类":["6.1"],"将业务逻辑从controller中分离出来":["6.1"],"使得controller只需处理http请求和响应":["6.1"],"控制器拦截器":["6.2"],"异常过滤器":["6.2"],"而不仅仅是服务类":["6.3"],"提供者是":["6.3"],"nestjs":["6.3"],"应用程序中的核心概念之一":["6.3"],"它们将代码块标记为可注入的":["6.3"],"authservice":["6.4","48.5"],"jwtstrategy":["6.4"],"控制器":["6.4"],"authcontroller":["6.4","19.1","19.2"],"向外提供接口":["6.4"],"guards":["7.1"],"鉴权认证相关":["7.1"],"拦截器":["7.1"],"查询参数":["8.0"],"响应对象等":["8.0"],"emitdecoratormetadata":["9.0"],"来自动添加类型相关的":["9.0"],"然后运行的时候通过这些元数据来实现依赖的扫描":["9.0"],"对象的创建等等功能":["9.0"],"的装饰器都是依赖":["9.0"],"实现的":["9.0"],"而且还提供了一个":["9.0"],"setmetadata":["9.0"],"的装饰器让我们可以给":["9.0"],"添加一些":["9.0"],"的引用转发过去":["10.0"],"也就是":["10.0"],"的含义":["10.0"],"export":["11.2","18.1","25.6","30.6","37.4"],"class":["11.2","12.4","18.1","25.7"],"usefilter":["11.3"],"gethello":["11.3"],"void":["11.3"],"if":["11.3","37.6","41.4"],"xxx":["11.3"],"throw":["11.3"],"patch":["11.4"],"options":["11.4","12.4"],"head":["11.4"],"装饰器分别接受":["11.4"],"handleroles":["11.5"],"gethandler":["11.5","13.4"],"classroles":["11.5"],"console":["11.6","13.0","26.5","26.8","37.4"],"log":["11.6","11.7","13.0","26.5","37.4"],"会返回":["11.8"],"set":["11.8"],"的响应头":["11.8"],"设置了":["11.8"],"包含":["11.8"],"此时只有host满足xx":["11.9"],"1才能路由到这个controller":["11.9"],"hello":["11.11","34.3"],"修改header":["11.11"],"https":["11.12"],"www":["11.12"],"有时需要configmodule根据传递的参数动态改变里面的方法":["12.0"],"此时就需要动态模块":["12.0"],"下一次就是":["12.1"],"了":["12.1"],"配置一次模块全局用":["12.1"],"比如xxxmodule":["12.1"],"注入":["12.2"],"使用module":["12.2"],"token来注入":["12.2"],"用configurablemodulebuilder来生成一个动态模块":["12.2"],"ts挂载":["12.3"],"第一个参数是给":["12.3"],"扩展":["12.3"],"设置额外的":["12.4"],"处理逻辑":["12.4"],"并且返回的":["12.4"],"都有":["12.4"],"host":["13.0"],"argumentshost":["13.0"],"过滤器异常":["13.0"],"public":["13.0"],"等不同上下文":["13.1"],"argumenthost":["13.1"],"是用于切换":["13.1"],"等上下文类型的":["13.1"],"可以根据上下文类型取到对应的":["13.1"],"argument":["13.1"],"image":["13.1"],"没截到":["13.1"],"参数arg里的就是当前上下文的参数":["13.1"],"next":["13.1"],"getargs":["13.1"],"方法":["13.2","13.4"],"获取当前上下文的类":["13.2"],"获取当前请求上下文的用户信息":["13.3"],"user":["13.3","48.1"],"switchtohttp":["13.3"],"getrequest":["13.3"],"如果用户角色包含目标方法的元数据":["13.3"],"就放行":["13.3"],"还提供":["13.4"],"getclass":["13.4"],"将":["14.0"],"编译":["14.0"],"光":["14.1"],"age":["14.1"],"e5":["14.1"],"是把数据拼成":["14.2"],"query":["14.2"],"字符串放在":["14.2"],"url":["14.2"],"后面":["14.2"],"于是表单的":["14.2"],"提交方式的时候就直接用相同的方式把数据放在了":["14.2"],"body":["14.2"],"里面就是用":["14.3"],"分隔符分割的内容":["14.3"],"很明显":["14.3"],"这种方式适合传输文件":["14.3"],"为":["14.4"],"application":["14.4"],"data是用":["14.5"],"作为分割传输":["14.5"],"multipart":["14.5"],"boundary":["14.5"],"nest解析":["14.5"],"formdata":["14.5"],"使用":["14.5","32.1","48.5"],"filesinterceptor拦截器":["14.5"],"用":["14.5","35.4"],"useinterceptors装饰器启用":["14.5"],"让后通过":["14.5"],"upload":["14.5"],"edfiles取":["14.5"],"同样是":["14.5"],"body获取":["14.5"],"file":["14.5"],"anyfilesinterceptor":["14.5"],"dest":["14.5"],"uploads":["14.5"],"body2":["14.5"],"载荷":["16.0"],"签名规则":["16.0"],"aaa":["17.0"],"也可以直接把这个模块设置为全局模块":["18.0"],"这样就不需要":["18.0"],"cccservice":["18.2"],"生命周期":["18.2"],"作用":["18.2"],"初始化":["18.2"],"全局模块":["18.3"],"声明周期":["18.3"],"或者":["19.0"],"这个":["19.2"],"await":["19.3"],"connect":["19.3"],"就可以利用":["19.4"],"nest":["19.4"],"ref":["25.0","25.2"],"来获取原始组件实例":["25.0"],"操作实例下的属性和方法":["25.0"],"接下来分别介绍一下两种模式下的高阶组件":["25.1"],"的先后顺序":["25.2"],"缺点":["25.2"],"一般无法直接获取原始组件的状态":["25.2"],"如果想要获取":["25.2"],"需要":["25.2"],"获取组件实例":["25.2"],"③":["25.3"],"如果多个反向继承":["25.3"],"嵌套在一起":["25.3"],"当前状态会覆盖上一个状态":["25.3"],"这样带来的隐患是非常大的":["25.3"],"比如说有多个":["25.3"],"componentdidmount":["25.3","35.2"],"newchild":["25.4"],"children":["25.4"],"map":["25.4","37.6"],"child":["25.4"],"wrapcomponent":["25.5"],"super":["25.5","37.2"],"node":["25.5","37.4"],"获取实例":["25.5"],"world":["25.6","34.3"],"button":["25.6","30.8","30.9"],"组件内部点击":["25.6"],"default":["25.6","37.4"],"writedoc":["25.7"],"绑定文档录入页面":["25.7"],"extends":["25.7"],"writetag":["25.7"],"执行副作用":["26.1"],"b1":["26.1"],"这是分类b下的项目b1":["26.1"],"current":["26.3"],"每个回调函数捕获正确的值":["26.3"],"造成此结果的原因是当循环时":["26.3"],"每次循环执行的settimeout都会在一秒钟后执行":["26.3"],"当一秒钟后执行时当前的i已经是10了":["26.3"],"重新渲染":["26.5"],"reducertest":["26.6"],"number":["26.6","36.1"],"dispatchnumber":["26.6"],"initialstate":["26.6"],"count":["26.8","30.14"],"setcount":["26.8","30.14"],"usestate":["26.8","38.1","41.5"],"你可以通过一些简单的":["27.1"],"hooks":["27.1"],"和配置来处理数据获取和管理":["27.1"],"减少了编写重复代码的工作量":["27.1"],"总之":["27.1","41.6"],"尽管可以使用普通的数据获取库来处理数据请求":["27.1"],"但":["27.1"],"无服务器状态更新等问题":["27.2"],"issuequery":["27.9"],"span":["27.9"],"仓库":["27.9"],"input":["27.9"],"name":["27.9"],"value":["27.9","30.5","30.6"],"onchange":["27.9"],"e":["27.9"],"target":["27.9"],"isfetching":["27.10"],"表示是否正在获取数据":["27.10"],"无论是从远程服务器还是从缓存中":["27.10"],"如果正在获取数据":["27.10"],"之类的可以基于路由实现":["28.0"],"重构":["28.0"],"维护":["28.0"],"例如登录判断":["28.3"],"router":["28.3"],"render":["28.3","34.3","37.2"],"logged":["28.3"],"与创建对象形式的存储不同":["29.1","30.1"],"针对每一个变量可以是响应式的":["29.1","30.1"],"通过原子派生的方式来适应复杂的开发场景":["29.1","30.1"],"在复杂的应用程序中":["29.3"],"数据流动可能涉及多个嵌套的回调函数和依赖关系":["29.3"],"这会导致代码的可读性和可维护性下降":["29.3"],"数据存储":["29.4"],"负责管理应用程序的状态和逻辑":["29.4"],"接收来自":["29.4"],"的动作并更新自身的状态":["29.4"],"它通过将原子状态进行派生":["30.3"],"组合成新的状态":["30.3"],"类似vue的computed":["30.3"],"所谓组件内状态":["30.3"],"其实就是内部使用了usestate":["30.3"],"text":["30.5"],"div":["30.6","30.8","30.9","30.14","37.2","37.6"],"onclick":["30.7","30.8","30.9"],"addnumber":["30.9"],"组件b渲染":["30.10"],"p":["30.10"],"组件b":["30.10"],"这么做的目的":["30.11"],"防止无意义的渲染":["30.11"],"这样就不会触发更新了":["30.12"],"不受外部影响":["30.13"],"同时也不影响外部":["30.13"],"status":["30.14"],"style":["30.14"],"background":["30.14","34.3"],"pink":["30.14"],"black":["30.14"],"订阅":["31.1"],"监听store中的state变化":["31.1"],"增强器":["31.2"],"动作":["31.2"],"供给":["32.1"],"consumer":["32.1"],"属性改变":["32.1"],"混入":["32.2"],"组件":["32.2","36.6"],"说白了就是":["32.2"],"变成了":["32.2"],"themeconsumer":["32.2"],"订阅消费者":["32.2"],"和":["34.0"],"uselayouteffect":["34.0"],"更新":["34.1"],"执行完成":["34.1"],"视图绘制完毕":["34.1"],"才执行":["34.1"],"一句话概括如何选择":["34.2"],"修改":["34.2"],"4em":["34.3"],"papayawhip":["34.3"],"这个是时候":["34.3"],"的作用就出现了":["34.3"],"的执行在":["34.3"],"改变props":["34.4"],"br":["34.4"],"false":["34.4"],"卸载组件":["34.4"],"做数据初始化":["34.4"],"将滑动处理函数":["34.4"],"异步模式":["35.2"],"渲染组件":["35.2"],"异步组件的好处":["35.2"],"不再需要":["35.2"],"或":["35.2"],"useeffect":["35.2","37.4","38.11"],"指定的组件":["35.4"],"等待":["35.4"],"加载组件完成后":["35.4"],"再渲染真正的组件":["35.4"],"动态引入":["35.4"],"cloneelement":["36.2"],"强化":["36.2"],"混入新的":["36.2"],"是不能直接渲染的":["36.3"],"直接渲染会报错":["36.3"],"details":["36.3"],"view":["36.3"],"the":["36.3"],"code":["36.3"],"null":["36.4","37.4"],"index":["36.4"],"直接传入或者是抽离到子组件中":["36.5"],"组件一方面直接将":["36.6"],"alien":["36.7"],"mes":["36.7"],"let":["36.7"],"us":["36.7"],"区别":["36.8","38.6"],"显示注入在dom":["36.8"],"view内可以直接看到":["36.8"],"隐式注入再函数内使用cloneelemnt":["36.8"],"item":["36.9","37.6"],"createref":["37.1"],"component":["37.2"],"son":["37.2","37.5"],"如上代码所示":["37.3"],"流程主要分为几个方面":["37.3"],"通过":["37.3"],"创建一个":["37.3"],"对象":["37.3"],"将当前":["37.3"],"对象传递给子组件":["37.3"],"hocindex":["37.4"],"useref":["37.4"],"函数没有实例":["37.5"],"所以使用useimperativehandle":["37.5"],"里面传递参数模拟类组件实例":["37.5"],"forwawrdref使函数组件可以被ref获取实例":["37.5"],"这样的话其实跟类组件的性质是一样的":["37.5"],"sonmes":["37.5"],"setsonmes":["37.5"],"useimperativehandle创建实例方法":["37.5"],"第一个参数是要传递的ref对象":["37.5"],"第二个参数是一个函数":["37.5"],"第三个参数是一个数组":["37.5"],"数组中的值发生变化时":["37.5"],"才会重新执行第二个参数的函数":["37.5"],"sonrtate":["37.5"],"添加依赖项":["37.6"],"使用react提供的usememo优化":["38.1"],"setnumbera":["38.1"],"setnumberb":["38.1"],"usememo":["38.1"],"执行":["38.2"],"的返回值":["38.2"],"如果":["38.2"],"中有依赖项改变":["38.2"],"newprop":["38.3"],"是否相等":["38.3"],"如果相等函数组件就会放弃子组件的调和更新":["38.3"],"从而子组件不会重新渲染":["38.3"],"如果上述把":["38.3"],"对象缓存起来":["38.3"],"上面":["38.3"],"会浅比较":["38.4"],"如果相等则不会重新渲染":["38.4"],"否则重新渲染":["38.4"],"对于state":["38.4"],"浅比较只会比较基础数据类型":["38.4"],"对于引用类型":["38.4"],"比如":["38.4"],"demo":["38.4"],"中":["38.4"],"单纯的改变":["38.4"],"的属性名":["38.5"],"key":["38.5"],"变成数组":["38.5"],"判断数组的长度是否相等":["38.5"],"证明有属性增加或者减少":["38.5"],"那么更新组件":["38.5"],"遍历老":["38.5"],"或者老":["38.5"],"判断对应的新":["38.5"],"usecallback返回的是一个记忆化的回调函数":["38.6"],"只有当依赖项发生变化时":["38.6"],"回调函数才会改变":["38.6"],"这可以防止不必要的组件重新渲染":["38.6"],"例如":["38.6"],"如果你有一个经常重新渲染的父组件":["38.6"],"其中有一个子组件接收一个函数属性":["38.6"],"那么usecallback就非常有用":["38.6"],"因为它可以确保只有当函数的依赖项改变时":["38.6"],"函数才会被重新创建":["38.6"],"相反":["38.6"],"usememo返回的是一个记忆化的值":["38.6"],"这个值是运行函数的结果":["38.6"],"只有当依赖项改变时":["38.6"],"numb":["38.7"],"可以通过新老props":["38.7"],"state比较":["38.7"],"判断是否渲染":["38.7"],"但是如果是引用类型":["38.7"],"比如对象":["38.7"],"返回true则不更新":["38.8"],"返回false则更新":["38.8"],"组件会重新渲染":["38.10"],"不会走shouldcomponentupdate":["38.10"],"一是浪费性能":["38.11"],"二是可能执行":["38.11"],"更加符合常理":["41.1"],"这样action行为会随着时间的推移积累到状态中":["41.2"],"task":["41.4"],"else":["41.4"],"setstate":["41.5"],"function":["41.5"],"usereducer可以帮助更好地处理不同字段的状态变化":["41.6"],"usereducer适用于需要更精细控制状态逻辑":["41.6"],"处理复杂状态变化":["41.6"],"instance":["48.1"],"constroller":["48.1"],"这个容器接手类的控制权":["48.2"],"注册的时候不需要一个一个new生成多个实例了":["48.4"],"而是直接调用实例方法进行注册":["48.4"],"lazy":["53.0"],"allowtransparency":["53.0"],"allowfullscreen":["53.0"],"see":["53.0"],"pen":["53.0"],"a":["53.0"],"href":["53.0"],"by":["53.0"],"耿延":["53.0"]},{"0":["27.9"],"1":["26.8","27.9","30.14"],"2":["26.3","37.3"],"3":["36.9"],"5":["25.0"],"19":["6.2"],"85":["14.1"],"89":["14.1"],"123":["30.14"],"3000":["1.2"],"interceptor":["1.0","1.6"],"拦截器":["1.0"],"exceptionfilter":["1.0"],"异常过滤器":["1.0"],"listen":["1.2"],"method":["1.3"],"requestmethod":["1.3"],"get":["1.3"],"this":["1.4"],"gethello":["1.4","2.1","11.11"],"所以":["1.4","34.1"],"当需要注入别的":["1.4"],"provider":["1.4","10.0","19.2"],"的时候":["1.4"],"就要用第二种全局":["1.4"],"的声明方式":["1.4"],"也可以作用于全局":["1.5"],"main":["1.5"],"app":["1.5"],"useglobalinterceptors":["1.5"],"new":["1.5","11.3"],"module":["1.5"],"imports":["1.5"],"controllers":["1.5"],"providers":["1.5"],"appservice":["1.5"],"provide":["1.5","1.6"],"useclass":["1.5","1.6","2.2"],"第二种方式跟guard作用相同":["1.5"],"不管是":["1.6"],"guard":["1.6"],"还是最终调用的":["1.6"],"过程中都可以抛出一些异常":["1.6"],"如何对某种异常做出某种响应呢":["1.6"],"在最外层":["1.7"],"到了某个路由之后":["1.7"],"会先调用":["1.7"],"用于判断路由有没有权限访问":["1.7"],"然后会调用":["1.7"],"对":["1.7"],"contoller":["1.7"],"前后扩展一些逻辑":["1.7"],"在到达目标":["1.7"],"之前":["1.7"],"还会调用":["1.7"],"来对参数做检验和转换":["1.7"],"所有的":["1.7"],"的异常都会被":["1.7"],"处理":["1.7"],"返回不同的响应":["1.7"],"就是通过这种":["1.7"],"的架构方式":["1.7"],"实现了松耦合":["1.7"],"易于维护和扩展的架构":["1.7"],"在上面的代码中":["2.0"],"我们将loggermiddleware中间件添加到了appmodule模块中":["2.0"],"并使用forroutes":["2.0"],"方法指定了该中间件适用于所有路由":["2.0"],"这样":["2.0"],"每次请求到达控制器之前":["2.0"],"都会先执行loggermiddleware中间件中的代码":["2.0"],"string":["2.1","13.0"],"将authguard守卫添加到路由上":["2.1"],"并使用":["2.1"],"装饰器指定守卫":["2.1"],"这样每次请求到达控制器之前都会先执行authguard守卫中的代码":["2.1"],"以确保请求的合法性":["2.1"],"appmodule":["2.2","11.2"],"管道的应用场景":["2.3"],"将做为参数传递给":["3.0"],"方法":["3.0","13.1"],"authcontroller":["3.0"],"authmodule":["3.0","6.4"],"constroctor":["4.0"],"直接注入":["4.0"],"传递泛型类型":["4.0"],"configtype会提供类型":["4.0"],"而不需要处理业务逻辑":["6.1"],"在service中":["6.1"],"可以编写业务逻辑和调用其他服务":["6.1"],"路由":["6.2"],"之后是控制器":["6.2"],"之后是全局":["6.2"],"服务器响应":["6.2"],"并提供与其它代码块之间的依赖关系":["6.3"],"当需要在组件或控制器中使用一个实例时":["6.3"],"会自动处理依赖关系并将实例提供给需要的组件或控制器":["6.3"],"exports":["6.4"],"export":["6.4","25.4","26.5","26.8","30.10","41.5"],"class":["6.4"],"interceptors":["7.1"],"处理http请求前后所执行的逻辑":["7.1"],"executioncontext只在当前请求有效":["8.0"],"不可以和其他请求共享":["8.0"],"todo":["9.0"],"https":["9.0"],"juejin":["9.0"],"cn":["9.0"],"book":["9.0"],"7226988578700525605":["9.0"],"section":["9.0"],"7235075295521275965":["9.0"],"enter":["9.0"],"from":["9.0"],"course":["9.0"],"center":["9.0"],"utm":["9.0"],"source":["9.0"],"之间也会形成循环依赖":["10.0"],"解决方案同上":["10.0"],"xxxx":["11.3"],"httpstatus":["11.3"],"bad":["11.3"],"request":["11.3"],"请求":["11.4"],"getclass":["11.5"],"return":["11.5","19.3","26.5","30.5","36.3"],"true":["11.5"],"sid":["11.8"],"也就是":["11.8"],"sesssionid":["11.8"],"之后每次请求都会自动带上这个":["11.8"],"里的参数就可以通过":["11.9"],"取出来":["11.9"],"end":["11.10"],"ddd":["11.10"],"注入request后可以手动取任何参数":["11.10"],"ggg":["11.11"],"header":["11.11"],"aaa":["11.11"],"bbb":["11.11"],"一次":["12.1"],"之后一直用这个module":["12.1"],"一般在appmodule里import":["12.1"],"forfeature":["12.1"],"用forroot固定整体模块":["12.1"],"用于局部的时候可能需要再传递一些配置":["12.1"],"比如用forroot指定数据库链接信息":["12.1"],"再用forfeature指定某个模块访问哪个数据库和表":["12.1"],"生成具有register":["12.2"],"forroot":["12.2"],"forfeature方法的类":["12.2"],"生成一个token":["12.2"],"用于注入":["12.2"],"上边的代码仔细观察只能使用register方法":["12.2"],"属性":["12.3"],"第二个参数是收到":["12.3"],"属性之后如何修改模块定义":["12.3"],"的版本":["12.4"],"这就是动态模块的定义方式":["12.4"],"后面用到":["12.4"],"typeorm":["12.4"],"mongoose":["12.4"],"等模块会大量见到这种模块":["12.4"],"a":["13.0"],"b":["13.0"],"触发了aaaexception异常":["13.0"],"自定义异常":["13.0"],"方法就是取出当前上下文的":["13.1"],"reqeust":["13.1"],"如果是":["13.1"],"基于":["13.1"],"tcp":["13.1"],"的微服务等上下文":["13.1"],"就分别调用":["13.1"],"swtichtows":["13.1"],"switchtorpc":["13.1"],"获取当前上下文的方法":["13.2"],"controller下的方法":["13.2"],"image":["13.2"],"some":["13.3"],"includes":["13.3"],"可以结合":["13.4"],"reflector":["13.4"],"来取出其中的":["13.4"],"metadata":["13.4"],"里":["14.2"],"tip":["14.2","26.3"],"通过":["14.2","36.4"],"分割的数据需要encoded编译一下":["14.2"],"如果大量的数据那么都需要去编译":["14.2"],"太耗费资源和时间":["14.2"],"所以需要更好的方式来传递大量数据form":["14.2"],"data":["14.2","27.9"],"而且可以传输多个文件":["14.3"],"但是毕竟多了一些只是用来分隔的":["14.3"],"所以请求体会增大":["14.3"],"就行":["14.4"],"uploadedfiles":["14.5"],"files":["14.5"],"array":["14.5"],"express":["14.5"],"multer":["14.5"],"报错cannot":["14.5"],"convert":["14.5"],"to":["14.5"],"primitive":["14.5"],"value的原因是":["14.5"],"是一个对象":["14.5"],"而不是一个字符串":["14.5"],"所以不能直接返回":["14.5"],"需要转换成字符串":["14.5"],"返回token":["16.0"],"aaaguard":["17.0"],"了":["18.0"],"amodule":["18.1"],"onmoduledestroy":["18.2"],"销毁":["18.2"],"beforeapplicationshutdown":["18.2"],"销毁前":["18.2"],"onapplicationshutdown":["18.2"],"moduleref都是nest常用功能":["18.3"],"inject":["19.0"],"支持通过参数注入别的":["19.2"],"ioc":["19.4"],"容器中注入任何对象":["19.4"],"可以对原始组件做一些事件监听":["25.0"],"错误监控等":["25.0"],"无法直接继承静态属性":["25.2"],"如果需要继承需要手动处理":["25.2"],"或者引入第三方库":["25.2"],"因为本质上是产生了一个新组件":["25.2"],"所以需要配合":["25.2"],"forwardref":["25.2"],"来转发":["25.2"],"当前":["25.3"],"会覆盖上一个":["25.3"],"这样副作用串联起来":["25.3"],"影响很大":["25.3"],"cloneelement":["25.4"],"default":["25.4","26.5","26.8","30.6","30.10"],"可以做一些其他的操作":["25.5"],"box":["25.6"],"组件外部点击":["25.6"],"绑定标签录入页面":["25.7"],"绑定标签列表页面":["25.7"],"绑定文档列表页面":["25.7"],"项目b2":["26.1"],"这是分类b下的项目b2":["26.1"],"alt":["26.1"],"text":["26.1","36.9"],"let会在每次循环的时候保存当前作用域的变量":["26.3"],"所以每次循环的时候都会保存当前的i":["26.3"],"所以打印出来的结果是0":["26.3"],"不会产生新的作用域":["26.3"],"所以每次循环的时候都是共享一个作用域":["26.3"],"所以每次循环的时候都会覆盖上一次的i":["26.3"],"所以最后打印出来的结果都是10":["26.3"],"button":["26.5","26.6","30.14","37.6"],"onclick":["26.5","26.6","30.14","37.6"],"点击":["26.5"],"div":["26.6","26.8","30.5","37.4"],"add":["26.6","30.7","30.8","30.9","30.14"],"log":["26.8","37.5"],"提供了一整套功能":["27.1"],"可以更好地管理数据获取":["27.1"],"缓存":["27.1"],"状态以及用户体验等方面的问题":["27.1"],"从而减少了开发工作量并提供了更好的性能和用户体验":["27.1"],"查看最新issue信息":["27.9"],"最新一条issue信息":["27.9"],"stringify":["27.9"],"dataupdatedat":["27.10"],"表示数据上次更新的时间戳":["27.10"],"refetch":["27.10"],"用于手动重新获取数据的函数":["27.10"],"扩展更容易":["28.0"],"dashboard":["28.3"],"publichome":["28.3"],"atom":["29.1","30.1"],"组件通信困难":["29.3"],"当应用程序中的组件需要共享和同步状态时":["29.3"],"传统的mvc模式无法提供一个清晰的机制来处理组件之间的通信和状态共享":["29.3"],"action":["29.4"],"动作":["29.4"],"定义用户在":["29.4"],"中执行的操作":["29.4"],"它们会被发送给":["29.4"],"state变化":["30.3"],"触发更新渲染罢了":["30.3"],"有兴趣可以阅读手动实现recoil原理":["30.3"],"danger":["30.6"],"这样会阻塞渲染线程":["30.6"],"不建议这样做":["30.6"],"异步请求应该放在组件内部":["30.6"],"或者使用异步更新atom":["30.6"],"www":["30.9"],"abc":["30.9"],"com":["30.9"],"asynctest":["30.10"],"不会触发订阅事件":["30.12"],"即使大家共用同一个atom状态":["30.13"],"p":["30.14"],"x":["30.14"],"combinereducer":["31.1"],"将多个reducers合并成一个rootreducer":["31.1"],"reducer":["31.2"],"纯函数":["31.2"],"订阅消费者":["32.0"],"会让消费":["32.1"],"的组件重新渲染":["32.1"],"son":["32.2"],"将":["32.2"],"内容转化成":["32.2"],"回调函数不会阻塞浏览器绘制视图":["34.1"],"改变布局就用":["34.2"],"其他情况就用":["34.2"],"dom":["34.3"],"更新前":["34.3"],"所以此时使用":["34.3"],"避免了浏览器出现再次重回和重排的可能":["34.3"],"解决了性能上的问题":["34.3"],"如果使用uselayouteffect的话":["34.3"],"它的执行时机在dom更新完成":["34.3"],"浏览器只需绘制即可":["34.3"],"此时插入style便可引起浏览器的重绘":["34.3"],"因为样式发生了变化":["34.3"],"做防抖处理":["34.4"],"getderivedstatefromprops":["34.4"],"props获取后":["34.4"],"得到两个参数":["34.4"],"上一个props":["34.4"],"更新或的props":["34.4"],"组件挂载后":["34.4"],"shouldcomponentupdate":["34.4"],"性能优化":["34.4"],"只有":["34.4"],"list":["34.4"],"改变":["34.4","35.2","38.1"],"渲染视图":["34.4"],"render":["34.4"],"渲染":["34.4"],"item":["34.4"],"getsnapshotbeforeupdate":["34.4"],"保存更新前的快照数据":["34.4"],"组件即将更新":["34.4"],"组件即将卸载":["34.4"],"配合做数据交互":["35.2"],"也不会因为数据交互后":["35.2"],"state":["35.2"],"而产生的二次更新作用":["35.2"],"代码逻辑更简单":["35.2"],"清晰":["35.2"],"里面的组件":["35.4"],"配合":["35.4"],"实现动态加载组件效果":["35.4"],"这样很利于代码分割":["35.4"],"不会让初始化的时候加载大量的文件":["35.4"],"或者修改":["36.2"],"的子元素":["36.2"],"这种情况需要先遍历":["36.4"],"判断":["36.4"],"元素类型":["36.4"],"针对":["36.4"],"element":["36.4"],"节点":["36.4"],"针对函数":["36.4"],"直接传递参数":["36.4"],"执行函数":["36.4"],"抽象传递给":["36.6"],"一方面混入":["36.6"],"learn":["36.7"],"react":["36.7"],"api":["36.8"],"注入":["36.8"],"myinput":["36.9"],"e":["36.9"],"target":["36.9"],"ref对象模式获取元素或组件":["37.1"],"向":["37.3"],"组件传递的":["37.3"],"对象上":["37.3"],"绑定":["37.3"],"孙组件实例":["37.3"],"子组件实例":["37.3"],"和":["37.3"],"current":["37.4"],"组件实例":["37.4"],"转发引用":["37.5"],"使函数组件可以接受ref":["37.5"],"这样就可以获取到实例":["37.5"],"forwardson":["37.5"],"parent":["37.5"],"instance":["37.5"],"console":["37.5"],"key":["37.6"],"bind":["37.6"],"null":["37.6"],"用":["38.1"],"可以达到同样的效果":["38.1"],"需要更新的值":["38.1"],"放在":["38.1"],"deps":["38.1"],"中":["38.1"],"重新形成element对象":["38.1"],"否则通过":["38.1"],"拿到上次的缓存值":["38.1"],"达到如上同样效果":["38.1"],"比起类组件":["38.1"],"我更推荐函数组件用":["38.1"],"这种方式":["38.1"],"返回的重新执行":["38.2"],"产生的值":["38.2"],"否则取上一次缓存值":["38.2"],"也就和":["38.3"],"上":["38.3"],"指向相同的内存空间":["38.3"],"也就是相等":["38.3"],"从而跳过了本次更新":["38.3"],"下属性是不会促使组件更新的":["38.4"],"因为浅比较两次":["38.4"],"还是指向同一个内存空间":["38.4"],"想要解决这个问题也容易":["38.4"],"浅拷贝就可以解决":["38.4"],"或新":["38.5"],"有没有与之对应并且相等的":["38.5"],"这个相等是浅比较":["38.5"],"如果有一个不对应或者不相等":["38.5"],"到此为止":["38.5"],"浅比较流程结束":["38.5"],"purecomponent":["38.5"],"就是这么做渲染节流优化的":["38.5"],"这个值才会重新计算":["38.6"],"这对于避免重复进行昂贵的计算或数据转换非常有用":["38.6"],"如果你有一个组件":["38.6"],"它执行一个可能非常昂贵的操作":["38.6"],"如计算一个数的阶乘":["38.6"],"那么usememo就可以用来记忆化这个计算的结果":["38.6"],"从而只有当输入的数改变时":["38.6"],"才会重新运行这个计算":["38.6"],"总的来说":["38.6"],"usecallback和usememo的主要区别在于":["38.6"],"usecallback返回的是一个记忆化的函数":["38.6"],"而usememo返回的是一个记忆化的值":["38.6"],"数组":["38.7"],"那么浅比较就会失效":["38.7"],"因为新老props":["38.7"],"state指向的是同一个内存空间":["38.7"],"所以我们需要深比较":["38.7"],"这个时候就需要用到lodash的深比较函数isequal":["38.7"],"immutable":["38.7"],"js":["38.7"],"也可以实现深比较":["38.7"],"componentwillreceiveprops":["38.11"],"等钩子":["38.11"],"造成意想不到的情况发生":["38.11"],"filter":["41.4"],"throw":["41.4"],"error":["41.4"],"未知":["41.4"],"使用中间件或副作用等情况下":["41.6"],"可以优于简单使用usestate来管理组件状态":["41.6"],"此时我们的constroller与service解耦":["48.1"],"具体调用的方法完全取决于外部依赖注入进来的方法":["48.1"],"可扩展性":["48.1"],"解耦":["48.1"],"可测试性":["48.1"],"controller":["48.5"],"on":["53.0"]}]'},t={"0.0":{t:"<resume/>",p:"",l:"Resume/index.html",a:"resume"},"1.0":{t:"# AOP",p:`后端架构一般都是MVC架构，MVC是Model View Controller的简写，请求一般会先发送到Controller 然后由它调用Model层的service来完成业务逻辑，最后返回View
 ...`,l:"articles/BackEnd/NestJs/AOP/index.html",a:"aop"},"1.1":{t:"中间件",p:`
中间件是Express的概念，Nest底层是Express/fastify(可选)，所以Nest也有中间件的概念,进一步区分为全局中间件和路由中间件

`,l:"articles/BackEnd/NestJs/AOP/index.html#中间件",a:"中间件"},"1.2":{t:"全局中间件 Middleware",p:`// main.ts
async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.use ...`,l:"articles/BackEnd/NestJs/AOP/index.html#全局中间件-middleware",a:"全局中间件-middleware"},"1.3":{t:"路由中间件",p:`
路由中间件首先要创建一个中间件类，然后在路由上使用

创建中间件类 nest generate middleware logger --no-spec --flat  no-spec 不生成测试文件 ...`,l:"articles/BackEnd/NestJs/AOP/index.html#路由中间件",a:"路由中间件"},"1.4":{t:"路由守卫 Guard",p:`
Guard是路由守卫的意思，可以用于在调用某个Controller之前判断权限，返回True或False来决定是否放行
n g gu auth/guards/role --no-spec

!ima ...`,l:"articles/BackEnd/NestJs/AOP/index.html#路由守卫-guard",a:"路由守卫-guard"},"1.5":{t:"拦截器 Interceptor",p:`
拦截器是在Controller之前之后执行的一段代码，可以用来做一些通用的逻辑，比如日志、异常处理等等
nest g interceptor logger --no-spec

import {
  ...`,l:"articles/BackEnd/NestJs/AOP/index.html#拦截器-interceptor",a:"拦截器-interceptor"},"1.6":{t:"Pipe",p:`

Pipe是管道的意思 ，用来对参数做校验和转换
除了路由的权限控制、目标 Controller 之前之后的处理这些都是通用逻辑外，对参数的处理也是一个通用的逻辑，所以 Nest 也抽出了对应的切面 ...`,l:"articles/BackEnd/NestJs/AOP/index.html#pipe",a:"pipe"},"1.7":{t:"ExceptionFilter",p:`
ExceptionFilter 可以对抛出的异常做处理，返回对应的响应：


创建一个filter n g filter test --no-spec --flat
::: code-group

 ...`,l:"articles/BackEnd/NestJs/AOP/index.html#exceptionfilter",a:"exceptionfilter"},"2.0":{t:"中间件",p:`::: info 存在意义
处理HTTP请求的函数，他可以在请求到达控制器之前/之后执行一些操作 他可以是全局的也可以是局部的
场景：身份验证，日志记录，错误处理
:::
::: details
中间 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html",a:"中间件"},"2.1":{t:"守卫",p:`Guard 是一种用于保护路由的机制，他可以在请求到达控制器之前或者之后执行一些操作。守卫可以用于实现身份验证，权限控制，缓存等功能。在NestJs中收尾可以是全局的也可以是局部的。守卫路由
[[Ex ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#守卫",a:"守卫"},"2.2":{t:"拦截器",p:`处理HTTP请求和响应的函数，在请求到达控制器之前之后执行一些操作。拦截器可以实现日志记录，错误处理，数据转换。在Nestjs中拦截器可以是全局的也可局部
@Injectable()
export c ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#拦截器",a:"拦截器"},"2.3":{t:"管道",p:`管道是数据流入controller前进行的一波数据处理
其中数据处理包含了对数据的转换,验证。他可以在控制器之前或之后对数据进行预处理。然后将数据传递给控制器或下一个管道。
$$管道的主要目的是增强应 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#管道",a:"管道"},"3.0":{t:">注入基本数据",p:`因为普通数据服务不是Class，所以要使用@Inject来注入

@Module({
	providers:[
		{
			provide:'APP_NAME',
			useValue:'使用普通 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Provider.html",a:"注入基本数据"},"4.0":{t:"> 案例，第三方发送短信服务。 根据不同配置使用不同的第三方运营商",p:`sms.serivce.ts
@Injectable()
export class AppController(){
	constructor(){
		private ali:aliService, ...`,l:"articles/BackEnd/NestJs/Basic/Code/env配置相关.html",a:"案例-第三方发送短信服务。-根据不同配置使用不同的第三方运营商"},"5.0":{t:"控制反转 IOC",p:`面向对象中的设计原则，用来减少计算机代码之前的耦合度。其根本思想是：”借助于第三方“ 实现具有依赖关系的对象之间的解耦

$$ 第三方举例：TS注解，或直接传递参数。总之控制权不在类中，而是由外部决定 ...`,l:"articles/BackEnd/NestJs/Basic/Code/设计模式模式.html",a:"控制反转-ioc"},"5.1":{t:"依赖注入 DI",p:`IOC 的具体实现，在类以外的地方提供服务。类内部调用的是该具体服务的抽象

	abstrct class Phone {
		playGame(name:string):string
	}
	cla ...`,l:"articles/BackEnd/NestJs/Basic/Code/设计模式模式.html#依赖注入-di",a:"依赖注入-di"},"6.0":{t:"- Nest 请求声明周期",p:`

[[Provider]]

动态Provider
asynProvider



Module

静态模块
动态模块
全局模块



[[env配置相关]]


`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html",a:"nest-请求声明周期"},"6.1":{t:"Module Controller Service的关系",p:`
Module 提供了一个模块化的方式来组织和管理您的应用程序的代码，同时还允许您使用依赖注入和模块之间的依赖关系来构建更加可扩展的应用程序。
$$ Module是Nestjs应用程序的基本构建块，每 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#module-controller-service的关系",a:"module-controller-service的关系"},"6.2":{t:"Nest 请求生命周期",p:`!img

1.  收到请求
2.  全局绑定的中间件
3.  模块绑定的中间件
4.  全局守卫
5.  控制层守卫
6.  路由守卫
7.  全局拦截器（控制器之前）
8.  控制器层拦截器 （控 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#nest-请求生命周期",a:"nest-请求生命周期"},"6.3":{t:"[[Provider]]",p:`提供服务,用于表示应用程序中可注入的任何东西。除了服务，Provider 还可以提供其他类型的对象，例如 Factory 工厂、配置对象、连接对象等。


提供者使用 @Injectable() 装饰 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#provider",a:"provider"},"6.4":{t:"Module",p:`模块是一个子程序，用于定义控制器，提供者或向其他模块开放提供者（开放模块的API）


默认情况下控制器，提供者在当前模块可用，即模块作用域
若果向其他模块提供服务可以将提供者定义在export属性中 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#module",a:"module"},"6.5":{t:"	",p:"",l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#",a:""},"6.6":{t:"动态Module",p:"",l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#动态module",a:"动态module"},"7.0":{t:"hi  我是Eagon,今天给大家分享Nest基础系列-Nestjs核心基础概念。 愿我们共同进步",p:"",l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html",a:"hi-我是eagon-今天给大家分享nest基础系列-nestjs核心基础概念。-愿我们共同进步"},"7.1":{t:"核心概念概览",p:`
模块 Modules 组合所有逻辑的地方,我理解为DI的Container
控制器 Controller处理请求
服务 Service 操作数据库以及处理所有逻辑的地方
管道 Pipes 核验请求的 ...`,l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html#核心概念概览",a:"核心概念概览"},"7.2":{t:" 重点1: NestJs 处理Https时的生命周期",p:"",l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html#重点1-nestjs-处理https时的生命周期",a:"重点1-nestjs-处理https时的生命周期"},"8.0":{t:">他代表了一个HTTP请求的执行上下文，提供了许多属性和方法，可用于在请求的生命周期内访问",p:`
ExecutionContext是在每个请求到达控制器之前被Nestjs封装产生的，他的请求是将请求的上下文，传递给控制器，拦截器，管道，守卫等各个部分。以便他们可以对请求进行处理和转换
当一个请求 ...`,l:"articles/BackEnd/NestJs/Basic/link/Execution Context 执行上下文.html",a:"他代表了一个http请求的执行上下文-提供了许多属性和方法-可用于在请求的生命周期内访问"},"9.0":{t:"# Reflect.defineMetadata",p:`::: tip
Nest中使用的是Reflect.defineMetadata来实现@Module,@Controller,@Injectable,@Get等装饰器的功能
它的作用是在类上定义元数据
 ...`,l:"articles/BackEnd/NestJs/ReflectMetaData/index.html",a:"reflect-definemetadata"},"10.0":{t:"# circular dependency如何解决",p:`为什么会出现circulr dependency?
有两个模块A和B，A依赖B，B依赖A，这样就形成了循环依赖。
因为Nest解析是从上到下的，所以当解析到A时，A依赖B，但是B还没有解析，所以会报错 ...`,l:"articles/BackEnd/NestJs/circularDep/index.html",a:"circular-dependency如何解决"},"11.0":{t:"# 装饰器总结",p:"",l:"articles/BackEnd/NestJs/decorator/index.html",a:"装饰器总结"},"11.1":{t:"@Optional()",p:`使Provider为可选


当Controller需要注入一个Provider,如果这个provider不存在的话，那么会报错，把它设置为可选的会避免这个问题


export class AppC ...`,l:"articles/BackEnd/NestJs/decorator/index.html#optional",a:"optional"},"11.2":{t:"@Global()",p:`使Provider全局可用,当一个Module被设置为@Global时，Export属性全局可用
@Global() // [!code ++]
@Module({
    imports:[],
  ...`,l:"articles/BackEnd/NestJs/decorator/index.html#global",a:"global"},"11.3":{t:"@Catch()",p:`
ExceptionFilter 是处理抛出的未捕获异常的，通过 @Catch 来指定处理的异常：
::: code-group

@Catch(HttpException)
export class ...`,l:"articles/BackEnd/NestJs/decorator/index.html#catch",a:"catch"},"11.4":{t:"@Post()",p:`

如果是POST请求，可以使用@Body获取到请求体.我们一般用 dto 的 class 来接受请求体里的参数


// dto
export class AaaDto{
    a:number, ...`,l:"articles/BackEnd/NestJs/decorator/index.html#post",a:"post"},"11.5":{t:"@SetMetaData()",p:`handle 和 class 可以通过@SetMetaData()制定元信息数据,提供给守卫，拦截器等使用
然后在 guard 或者 interceptor 里取出来：
::: code-group
 ...`,l:"articles/BackEnd/NestJs/decorator/index.html#setmetadata",a:"setmetadata"},"11.6":{t:"@Headers()",p:`
通过 @Headers 装饰器取某个请求头 或者全部请求头

@Get('/abc')
header(@Headers('Accept') accept:string,@Headers() head ...`,l:"articles/BackEnd/NestJs/decorator/index.html#headers",a:"headers"},"11.7":{t:"@Ip()",p:`
通过@Ip 拿到请求的ip

@Get('/ip')
ip(@Ip() ip:string){
    console.log(ip)
}

`,l:"articles/BackEnd/NestJs/decorator/index.html#ip",a:"ip"},"11.8":{t:"@Session() TODO",p:`::: details

通过@Session拿到session

@Get('/session')
session(@Session() session){
    console.log(sess ...`,l:"articles/BackEnd/NestJs/decorator/index.html#session-todo",a:"session-todo"},"11.9":{t:"@HostParam 用于取域名部分的参数",p:`
Controller 除了可以制定具体path生效外，还可以指定host

@Controller({host:':host.0.0.1',path:'aaa'})
export class Aaa ...`,l:"articles/BackEnd/NestJs/decorator/index.html#hostparam-用于取域名部分的参数",a:"hostparam-用于取域名部分的参数"},"11.10":{t:"@Req() @Response 直接注入Request/Response属性",p:`
前面取的是request属性，当然也可以注入request对象
::: code-group

@Controller({host:':host.0.0.1',path:'aaa'})
export ...`,l:"articles/BackEnd/NestJs/decorator/index.html#req-response-直接注入request-response属性",a:"req-response-直接注入request-response属性"},"11.11":{t:"@Next()",p:`
除了注入@Res不会返回响应外，注入@Next也不会
@Next() 当你有两个handler来处理同一个路由的时候，可以再第一个handler里注入next,调用它来吧请求转发到第二个handle ...`,l:"articles/BackEnd/NestJs/decorator/index.html#next",a:"next"},"11.12":{t:"@Redirect() 重定向",p:`@Get('abc')
@Redirect('http://baidu.com')
RedirectBaidu(){
}

@Get('abc')
@Redirect('http://baidu.co ...`,l:"articles/BackEnd/NestJs/decorator/index.html#redirect-重定向",a:"redirect-重定向"},"12.0":{t:"# 动态模块",p:`Provider 是可以通过 useFactory 动态产生的，Module同样也可以
@Module({
    imports:[ConfigModule],
})

:::tip
此时Confi ...`,l:"articles/BackEnd/NestJs/dynamicModule/index.html",a:"动态模块"},"12.1":{t:"定义 1",p:`第一种方法是在Module中写一个静态的注册方法注册
// config.module.ts
@Module({})
export class ConfigModule{
    static reg ...`,l:"articles/BackEnd/NestJs/dynamicModule/index.html#定义-1",a:"定义-1"},"12.2":{t:"定义 2",p:`:::code-group
@Module({
    imports:[ConfigurableModuleClass.register({aaa:1,bbb:'bbb'})],
})

@Modu ...`,l:"articles/BackEnd/NestJs/dynamicModule/index.html#定义-2",a:"定义-2"},"12.3":{t:"forRoot 和 forFeature",p:`
export  const {ConfigurableModuleClass,MODULE_OPTIONS_TOKEN} = 
    new ConfigurableModuleBuilder&l ...`,l:"articles/BackEnd/NestJs/dynamicModule/index.html#forroot-和-forfeature",a:"forroot-和-forfeature"},"12.4":{t:"总结",p:`Module可以传入 options根据配置生成对应的Module,还可以吧传入的options作为provider注入到别的对象里
建议的动态产生 Module 的方法名有 register、for ...`,l:"articles/BackEnd/NestJs/dynamicModule/index.html#总结",a:"总结"},"13.0":{t:"# Exception切换不同上下文",p:`
NestJS支持 HTTP服务 WebSocket服务 TCP通信服务
不同类型的服务在Guard/interceptor 等取到的功能不同,导致无法复用
ArgumentHost 和 Execut ...`,l:"articles/BackEnd/NestJs/exception/index.html",a:"exception切换不同上下文"},"13.1":{t:"exceptionFilter 参数 exceptions argumentsHost 切换不同上下文",p:"&lt;!-- ```ts\nimport { AaaException } from './aaa.exception';\n@Catch(AaaException)\nexport class Myex ...",l:"articles/BackEnd/NestJs/exception/index.html#exceptionfilter-参数-exceptions-argumentshost-切换不同上下文",a:"exceptionfilter-参数-exceptions-argumentshost-切换不同上下文"},"13.2":{t:"Guard等切换上下文",p:`@Injectable()
export class GuardExceptionGuard implements CanActivate {
  canActivate(
    context:  ...`,l:"articles/BackEnd/NestJs/exception/index.html#guard等切换上下文",a:"guard等切换上下文"},"13.3":{t:"为啥要多俩方法 getClass getHandler",p:`比如守卫验证权限使，需要获取目标方法的元数据，就可以通过 getHandler 方法获取到目标方法的元数据。
然后比对决定是否放行
import { CanActivate, ExecutionCon ...`,l:"articles/BackEnd/NestJs/exception/index.html#为啥要多俩方法-getclass-gethandler",a:"为啥要多俩方法-getclass-gethandler"},"13.4":{t:"总结",p:`
为了让Filter Guard Exception 支持http ws rpc等场景下复用,Nest 设计了ArgumentHost 和 ExecutionContext 类


ArgumentH ...`,l:"articles/BackEnd/NestJs/exception/index.html#总结",a:"总结"},"14.0":{t:"# HTTP数据传输方式",p:`
url param
query
form-urlencoded
form-data
json
encode: 将...编译

`,l:"articles/BackEnd/NestJs/http/index.html",a:"http数据传输方式"},"14.1":{t:"urlParam/Query",p:`都属于GET路径传参
params：/router1/:id ，    //router1/123，/router1/789 ,这里的id叫做params
--------------------
q ...`,l:"articles/BackEnd/NestJs/http/index.html#urlparam-query",a:"urlparam-query"},"14.2":{t:"form-urlencoded",p:`直接用表单提交数据，提交的就是这种
他和query的区别就是把查询的query放在了body里,然后指定下 content-type 是 application/x-www-form-urlencod ...`,l:"articles/BackEnd/NestJs/http/index.html#form-urlencoded",a:"form-urlencoded"},"14.3":{t:"form-data",p:`form data 不再是通过 &amp; 分隔数据，而是用 --------- + 一串数字做为 boundary(分隔符)。因为不是 url 的方式了，自然也不用再做 url encode。
&l ...`,l:"articles/BackEnd/NestJs/http/index.html#form-data",a:"form-data"},"14.4":{t:"Json",p:`form-urlencoded 需要对内容做 url encode，而 form data 则需要加很长的 boundary，两种方式都有一些缺点。如果只是传输 json 数据的话，不需要用这两种。
 ...`,l:"articles/BackEnd/NestJs/http/index.html#json",a:"json"},"14.5":{t:"Nest实现基本的http请求",p:`::: code-group
// [http.controller.ts]
// query: /router1?id=123 
// param : /router/1

在 Nest 里，通过  ...`,l:"articles/BackEnd/NestJs/http/index.html#nest实现基本的http请求",a:"nest实现基本的http请求"},"15.0":{t:"# NestJs",p:"",l:"articles/BackEnd/NestJs/index.html",a:"nestjs"},"16.0":{t:"- register 接收账号密码argon2 hash 加密插入数据库",p:`
login   登录接收账号密码，argon2 verify对密码进行解密
解密符合，根据头信息，载荷, 签名规则 返回token

`,l:"articles/BackEnd/NestJs/jwt/流程.html",a:"register-接收账号密码argon2-hash-加密插入数据库"},"17.0":{t:"# 合并装饰器",p:`
装饰器太多了，有时候我们需要合并装饰器，这样就可以减少代码量，提高代码可读性。

import { applyDecorators, Get, UseGuards } from '@nestjs/c ...`,l:"articles/BackEnd/NestJs/makeDecorator/index.html",a:"合并装饰器"},"17.1":{t:"自定义装饰器",p:`import { createParamDecorator, ExecutionContext } from '@nestjs/common';

export const Ccc = createP ...`,l:"articles/BackEnd/NestJs/makeDecorator/index.html#自定义装饰器",a:"自定义装饰器"},"18.0":{t:"# 全局Module和生命周期",p:`
模块导出 provider，另一个模块需要 imports 它才能用这些 provider。
多个模块需要用到同一个 provider 时，可以把这个 provider 放到一个模块中，然后 imp ...`,l:"articles/BackEnd/NestJs/module/index.html",a:"全局module和生命周期"},"18.1":{t:"全局模块",p:`注意:全局模块不推荐经常使用，注入太多的provider不清楚来源，可维护性差
@Global()
@Module({
    imports: [PrismaModule],
    provide ...`,l:"articles/BackEnd/NestJs/module/index.html#全局模块",a:"全局模块"},"18.2":{t:"生命周期Lifecycle",p:`Nest 在启动的时候，会递归解析 Module 依赖，扫描其中的 provider、controller，注入它的依赖。
全部解析完后，会监听网络端口，开始处理请求。
这个过程中，Nest 暴露了一 ...`,l:"articles/BackEnd/NestJs/module/index.html#生命周期lifecycle",a:"生命周期lifecycle"},"18.3":{t:"总结",p:`::: tip
模块可以@Global声明为全局，这样它export的provider就可以在各处使用了，不需要imports
provider,controller,module都支持启动和销毁函数 ...`,l:"articles/BackEnd/NestJs/module/index.html#总结",a:"总结"},"19.0":{t:"# 多种provider",p:`Nest 实现了IoC 从main文件臊面，分析Module引用及依赖中的关系，自动把provider注入到目标对象
::: code-group
@Module({
  imports: [Pris ...`,l:"articles/BackEnd/NestJs/provider/index.html",a:"多种provider"},"19.1":{t:"注册Value值",p:`@Module({
  imports: [PrismaModule],
  providers: [{
      provide:'a',
      useValue:'我是A'
    }]
 ...`,l:"articles/BackEnd/NestJs/provider/index.html#注册value值",a:"注册value值"},"19.2":{t:"动态注册服务",p:`@Module({
  imports: [PrismaModule],
  providers: [{
      provide:'providerTest',
      inject: ['p ...`,l:"articles/BackEnd/NestJs/provider/index.html#动态注册服务",a:"动态注册服务"},"19.3":{t:"异步动态注册服务",p:`当需要异步获取provider时，可以使用useFactory的async版本
例如: 链接redis当redis链接成功后再注册provider
@Module({
  imports: [Pris ...`,l:"articles/BackEnd/NestJs/provider/index.html#异步动态注册服务",a:"异步动态注册服务"},"19.4":{t:"总结",p:`::: tip

一般情况Provider通过@Injectable声明,然后再@Module的providers数组里注册的class
默认provier的token就是class,这样不用使用@I ...`,l:"articles/BackEnd/NestJs/provider/index.html#总结",a:"总结"},"20.0":{t:"# 文件上传",p:`::: tip
NestJS 实现文件上传是基于Express Multer实现的,然后通过一系列适配器和拦截器集成到NestJS中
:::
`,l:"articles/BackEnd/NestJs/upload/index.html",a:"文件上传"},"22.0":{t:"语法",p:"",l:"articles/English/grammar/index.html",a:"语法"},"23.0":{t:"js",p:"",l:"articles/FontEnd/js/index.html",a:"js"},"24.0":{t:"# 项目列表",p:"",l:"articles/FontEnd/react/Basic/index.html",a:"项目列表"},"24.1":{t:"高阶组件HOC",p:"",l:"articles/FontEnd/react/Basic/index.html#高阶组件hoc",a:"高阶组件hoc"},"25.0":{t:"# 高阶组件HOC",p:`总结

强化 props ，可以通过 HOC ，向原始组件混入一些状态。
渲染劫持，可以利用 HOC ，动态挂载原始组件，还可以先获取原始组件的渲染树，进行可控性修改。
可以配合 import 等 a ...`,l:"articles/FontEnd/react/HOC/index.html",a:"高阶组件hoc"},"25.1":{t:"两种不同的高阶组件",p:`常用的高阶组件有属性代理和反向继承两种，两者之间有一些共性和区别。接下来分别介绍一下两种模式下的高阶组件。
`,l:"articles/FontEnd/react/HOC/index.html#两种不同的高阶组件",a:"两种不同的高阶组件"},"25.2":{t:"属性代理",p:`属性代理，就是用组件包裹一层代理组件，在代理组件上，可以做一些，对源组件的强化操作。这里注意属性代理返回的是一个新组件，被包裹的原始组件，将在新的组件里被挂载。
function HOC(WrapCo ...`,l:"articles/FontEnd/react/HOC/index.html#属性代理",a:"属性代理"},"25.3":{t:"反向继承",p:`反向继承
反向继承和属性代理有一定的区别，在于包装后的组件继承了原始组件本身，所以此时无须再去挂载业务组件。
class Index extends React.Component{
  render ...`,l:"articles/FontEnd/react/HOC/index.html#反向继承",a:"反向继承"},"25.4":{t:"编写HOC 什么时候使用HOC",p:`

强化Props
强化 props 就是在原始组件的 props 基础上，加入一些其他的 props ，强化原始组件功能


控制渲染
HOC 反向继承模式，可以通过 super.render()  ...`,l:"articles/FontEnd/react/HOC/index.html#编写hoc-什么时候使用hoc",a:"编写hoc-什么时候使用hoc"},"25.5":{t:"动态加载Loading",p:`export default function dynamicHoc(loadRouter) {
  return class Content extends React.Component {
   ...`,l:"articles/FontEnd/react/HOC/index.html#动态加载loading",a:"动态加载loading"},"25.6":{t:"事件监控",p:`HOC 不一定非要对组件本身做些什么？也可以单纯增加一些事件监听，错误监控。
以下代码HOC ，只对组件内的点击事件做一个监听效果。
function ClickHoc (Component){
   ...`,l:"articles/FontEnd/react/HOC/index.html#事件监控",a:"事件监控"},"25.7":{t:"权限拦截",p:`::: code-group

export const Permission = React.createContext([]) 
export default function Index(){
 ...`,l:"articles/FontEnd/react/HOC/index.html#权限拦截",a:"权限拦截"},"26.0":{t:"# Hooks",p:"",l:"articles/FontEnd/react/Hooks/index.html",a:"hooks"},"26.1":{t:"API分类",p:`
关键词： concurrent
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;使用范围&lt;/th&gt;
&lt;th&gt;Hooks&lt;/th&gt;
&lt;t ...`,l:"articles/FontEnd/react/Hooks/index.html#api分类",a:"api分类"},"26.2":{t:"Hooks",p:"",l:"articles/FontEnd/react/Hooks/index.html#hooks",a:"hooks"},"26.3":{t:"useRef",p:`&lt;details&gt;
场景：稳定引用，获取dom节点，获取上一次的值

闭包 异步访问到旧变量的问题

::: code-group
 // 典型的闭包循环案例，每次循环调用setTimeo ...`,l:"articles/FontEnd/react/Hooks/index.html#useref",a:"useref"},"26.4":{t:"数据更新驱动类",p:"",l:"articles/FontEnd/react/Hooks/index.html#数据更新驱动类",a:"数据更新驱动类"},"26.5":{t:"useState",p:`&lt;details&gt;
const [state, setState] = useState(initialState);
参数接收一个初始值，返回一个数组，数组的第一个元素是当前的state ...`,l:"articles/FontEnd/react/Hooks/index.html#usestate",a:"usestate"},"26.6":{t:"useReducer",p:`对于拥有许多状态更新逻辑的组件来说，过于分散的事件处理程序可能会令人不知所措。对于这种情况，你可以将组件的所有状态更新(增删改查)逻辑整合到一个外部函数中，这个函数叫作 reducer。
reduce ...`,l:"articles/FontEnd/react/Hooks/index.html#usereducer",a:"usereducer"},"26.7":{t:"useContext",p:`作用: 传递数据，避免props层层传递，导致代码冗余
`,l:"articles/FontEnd/react/Hooks/index.html#usecontext",a:"usecontext"},"26.8":{t:"useImperativeHandle",p:`::: info 解决了什么问题?
子组件通过ref抛出方法供父组件调用
React函数 组件，父组件需要直接访问子组件的实例方法或属性的问题。
在 React 中，父组件通常通过 props 向子组 ...`,l:"articles/FontEnd/react/Hooks/index.html#useimperativehandle",a:"useimperativehandle"},"27.0":{t:"# React Query",p:"",l:"articles/FontEnd/react/ReactQuery/index.html",a:"react-query"},"27.1":{t:"出现背景/解决问题",p:"**灵魂拷问Q： 为什么用axios不可以 为什么需要出现React QueryA:尽管可以使用普通的 Axios 或其他数据获取库来处理数据请求，但在某些情况下，使用 React Query 可以带 ...",l:"articles/FontEnd/react/ReactQuery/index.html#出现背景-解决问题",a:"出现背景-解决问题"},"27.2":{t:"核心概念",p:`解决普通请求代码重复，后期维护困难。无数据缓存，无数据同步，无数据预取，无数据失效处理，无服务器状态更新等问题。
`,l:"articles/FontEnd/react/ReactQuery/index.html#核心概念",a:"核心概念"},"27.3":{t:"使用教程",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#使用教程",a:"使用教程"},"27.4":{t:"自动缓存和数据同步",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#自动缓存和数据同步",a:"自动缓存和数据同步"},"27.5":{t:"加载状态管理",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#加载状态管理",a:"加载状态管理"},"27.6":{t:"数据同步和预取",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#数据同步和预取",a:"数据同步和预取"},"27.7":{t:"自动缓存失效处理",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#自动缓存失效处理",a:"自动缓存失效处理"},"27.8":{t:"服务器状态更新",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#服务器状态更新",a:"服务器状态更新"},"27.9":{t:"更少的重复代码",p:`::: code-group
import as React from 'react';
​
export default function App() {
  // 存储 后端返回数据
  cons ...`,l:"articles/FontEnd/react/ReactQuery/index.html#更少的重复代码",a:"更少的重复代码"},"27.10":{t:"API",p:`


APIname
Are




data：
查询返回的数据


isLoading：
表示查询是否正在加载中。如果数据正在加载，该属性为 true；否则为 false。


isError：
表 ...`,l:"articles/FontEnd/react/ReactQuery/index.html#api",a:"api"},"27.11":{t:"总结",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#总结",a:"总结"},"28.0":{t:"# React Router",p:`后端概念：发送url请求到服务器端，server会通过不同的地址返回不同的页面
为什么需要路由：

单页应用需要路由切换
通过url可以定位到页面
更有语义的组织资源

三种路由的实现方式：

Bro ...`,l:"articles/FontEnd/react/ReactRouter/index.html",a:"react-router"},"28.1":{t:"快速上手",p:"",l:"articles/FontEnd/react/ReactRouter/index.html#快速上手",a:"快速上手"},"28.2":{t:"原理分析",p:"",l:"articles/FontEnd/react/ReactRouter/index.html#原理分析",a:"原理分析"},"28.3":{t:"核心API",p:`


name
effect
demo




Link
普通链接，不会触发刷新
&lt;Link to=&quot;&quot;/&gt;


NavLink
类似Link
但是会添加当前选中状态& ...`,l:"articles/FontEnd/react/ReactRouter/index.html#核心api",a:"核心api"},"29.0":{t:"# React 全局存储/状态管理",p:"",l:"articles/FontEnd/react/Storage/index.html",a:"react-全局存储-状态管理"},"29.1":{t:"常见的状态管理模式",p:`
global：  全局式，也被称作单一数据源，将所有的数据放到一个大对象中，关键词：combineReducers();
multiple stores：  多数据源模式，将状态存放到多个数据源中， ...`,l:"articles/FontEnd/react/Storage/index.html#常见的状态管理模式",a:"常见的状态管理模式"},"29.2":{t:"Flex 架构",p:"",l:"articles/FontEnd/react/Storage/index.html#flex-架构",a:"flex-架构"},"29.3":{t:"出现背景 & 解决痛点",p:"Flux架构解决前端应用程序中状态管理和数据流动的复杂性问题。在传统的MVC（Model-View-Controller）模式中，应用程序的状态分散在多个视图和控制器之间，导致数据流动难以追踪和管理。 ...",l:"articles/FontEnd/react/Storage/index.html#出现背景-解决痛点",a:"出现背景-解决痛点"},"29.4":{t:"架构特点 & 详细介绍",p:`Flux架构通过引入单向数据流的概念，将数据的流动变得可控和可预测。它明确了数据流动的路径，并将状态的修改限制在特定的流程中。这样做的好处包括：


易于追踪和调试：由于数据流是单向的，数据的变化路径 ...`,l:"articles/FontEnd/react/Storage/index.html#架构特点-详细介绍",a:"架构特点-详细介绍"},"30.0":{t:"# Jotai",p:`引用来源：Ryun
`,l:"articles/FontEnd/react/Storage/jotai/index.html",a:"jotai"},"30.1":{t:"常见的状态管理模式",p:`
global：  全局式，也被称作单一数据源，将所有的数据放到一个大对象中，关键词：combineReducers();
multiple stores：  多数据源模式，将状态存放到多个数据源中， ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#常见的状态管理模式",a:"常见的状态管理模式"},"30.2":{t:"Jotai  原子状态管理",p:"",l:"articles/FontEnd/react/Storage/jotai/index.html#jotai-原子状态管理",a:"jotai-原子状态管理"},"30.3":{t:"原子式解决了什么问题",p:`reactHook 使State的拆分和逻辑共享变得更容易
但useState 和 useContext对于多个store仍需要维护多个Context Provider 因为当Context改变，所有 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#原子式解决了什么问题",a:"原子式解决了什么问题"},"30.4":{t:"使用教程",p:"",l:"articles/FontEnd/react/Storage/jotai/index.html#使用教程",a:"使用教程"},"30.5":{t:"1. 创建 atom  派生atom  使用 useAtom",p:`::: details View The Code
import { atom, useAtom } from &quot;jotai&quot;;
import { FC } from &quot; ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_1-创建-atom-派生atom-使用-useatom",a:"_1-创建-atom-派生atom-使用-useatom"},"30.6":{t:"2. 异步派生",p:`::: details View The Code
import { atom, useAtom } from &quot;jotai&quot;;
import { FC } from &quot; ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_2-异步派生",a:"_2-异步派生"},"30.7":{t:"3. 函数组件内更新方式",p:`::: details View The Code
  const ValueAtom = atom(1)
  const Text = ()=&gt;{
    const [value,setVa ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_3-函数组件内更新方式",a:"_3-函数组件内更新方式"},"30.8":{t:"4. atom内更新方式",p:`::: details View The Code
  const ValueAtom = atom(1)
  const AddNumberAtom = atom(ge=&gt;ge(ValueAt ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_4-atom内更新方式",a:"_4-atom内更新方式"},"30.9":{t:"5. 异步更新atom 区别于第二条异步获取，异步更新不会阻塞线程",p:`::: details View The Code
  const MockData = new Promise&lt;string&gt;((r) =&gt; {
    setTimeout(() ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_5-异步更新atom-区别于第二条异步获取-异步更新不会阻塞线程",a:"_5-异步更新atom-区别于第二条异步获取-异步更新不会阻塞线程"},"30.10":{t:"6. 渲染问题",p:`:::   details View The Code

当我们点击add时，发现A和B都重新渲染了，但是问题来了，A为什么要重新渲染呀，A只是触发了更新操作，并不需要重新渲染呀？？？


这是因为， ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_6-渲染问题",a:"_6-渲染问题"},"30.11":{t:"7. 解决渲染问题 useAtomValue、useSetAtom",p:`
如果有的组件只需要监听状态的变化值，而没有更新操作 请使用useAtomValue
如果仅更新操作，而无需渲染状态的组件，请使用 useSetAtom
这么做的目的：防止无意义的渲染

`,l:"articles/FontEnd/react/Storage/jotai/index.html#_7-解决渲染问题-useatomvalue、usesetatom",a:"_7-解决渲染问题-useatomvalue、usesetatom"},"30.12":{t:"8. Provider",p:`
正常情况下，无需用Provider包裹组件
但如果需要控制某些组件的状态不发生更新，可以用Provider包裹
或者说，用Provider包裹的组件，状态是独立的，不受外部影响，同时也不影响外部，即 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_8-provider",a:"_8-provider"},"30.13":{t:"9.store",p:`
createStore,export出去,使用Jotai的Provider提供给App


其中，store中的状态，是全局的，任何组件都可以使用，但是，如果某个组件使用了Provider包裹，那么 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_9-store",a:"_9-store"},"30.14":{t:"实际使用",p:`::: code-group
import { createStore, atom } from &quot;jotai&quot;;

const myStore = createStore();
 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#实际使用",a:"实际使用"},"31.0":{t:"# Redux",p:"",l:"articles/FontEnd/react/Storage/redux/index.html",a:"redux"},"31.1":{t:"API介绍",p:`
reducer 纯函数，接收两个参数，一个是state，一个是action，返回一个新的state
createStore 创建一个 root 存放 state的根对象
dispatch 更新sto ...`,l:"articles/FontEnd/react/Storage/redux/index.html#api介绍",a:"api介绍"},"31.2":{t:"摘要",p:`
middleware 中间件,中间件用于增强 dispatch 功能，返回一个增强后的 dispatch（比如 redux-thunk 使 action 可以为 function）
enhancer ...`,l:"articles/FontEnd/react/Storage/redux/index.html#摘要",a:"摘要"},"32.0":{t:"# Context Provider Consumer",p:`
const ThemeContext = React.createContext(null)
const ThemeProvider = ThemeContext.Provider  //提供者
c ...`,l:"articles/FontEnd/react/context/index.html",a:"context-provider-consumer"},"32.1":{t:"提供者Provider用法",p:`const ThemeProvider = ThemeContext.Provider  //提供者
export default function ProviderDemo(){
    const ...`,l:"articles/FontEnd/react/context/index.html#提供者provider用法",a:"提供者provider用法"},"32.2":{t:"消费者Consumer用法",p:`对于新版本想要获取 context 的消费者，React 提供了3种形式
::: code-group
React v16.6 提供了 contextType 静态属性，用来获取上面 Provider ...`,l:"articles/FontEnd/react/context/index.html#消费者consumer用法",a:"消费者consumer用法"},"33.0":{t:"!react",p:"",l:"articles/FontEnd/react/index.html",a:"react"},"34.0":{t:"# 生命周期",p:`React hooks也提供了 api ，用于弥补函数组件没有生命周期的缺陷。其原理主要是运用了 hooks 里面的 useEffect 和 useLayoutEffect
`,l:"articles/FontEnd/react/lifeCycle/index.html",a:"生命周期"},"34.1":{t:"useEffect",p:`useEffect(()=&gt;{
    return destory
},dep)


第一个参数callback 返回销毁函数 下次执行useEffect会首先执行这个销毁函数。 销毁定时器, ...`,l:"articles/FontEnd/react/lifeCycle/index.html#useeffect",a:"useeffect"},"34.2":{t:"useLayoutEffect",p:`useLayoutEffect 和 useEffect 不同的地方是采用了同步执行


首先 useLayoutEffect 是在 DOM 更新之后，浏览器绘制之前，这样可以方便修改 DOM，获取 D ...`,l:"articles/FontEnd/react/lifeCycle/index.html#uselayouteffect",a:"uselayouteffect"},"34.3":{t:"useInsertionEffect",p:`在介绍 useInsertionEffect 用途之前，先看一下 useInsertionEffect 的执行时机。
React.useEffect(()=&gt;{
    console.log( ...`,l:"articles/FontEnd/react/lifeCycle/index.html#useinsertioneffect",a:"useinsertioneffect"},"34.4":{t:"类组件生命周期在函数组件内使用Effect替代方案",p:`::: code-group
// componentDidMount
React.useEffect(()=&gt;{
    /* 请求数据 ， 事件监听 ， 操纵dom */
},[])  /* ...`,l:"articles/FontEnd/react/lifeCycle/index.html#类组件生命周期在函数组件内使用effect替代方案",a:"类组件生命周期在函数组件内使用effect替代方案"},"35.0":{t:"# 渲染调优",p:"",l:"articles/FontEnd/react/optimizeRender/index.html",a:"渲染调优"},"35.1":{t:"懒加载和异步渲染",p:"",l:"articles/FontEnd/react/optimizeRender/index.html#懒加载和异步渲染",a:"懒加载和异步渲染"},"35.2":{t:"异步渲染 Suspense(悬念)",p:`::: info
Suspense 是 React 提出的一种同步的代码来实现异步操作的方案
Suspense可以让组件 await等待异步操作，直到异步操作完成，才会渲染组件。
:::
用法
//  ...`,l:"articles/FontEnd/react/optimizeRender/index.html#异步渲染-suspense-悬念",a:"异步渲染-suspense-悬念"},"35.3":{t:"懒加载(动态加载)",p:"",l:"articles/FontEnd/react/optimizeRender/index.html#懒加载-动态加载",a:"懒加载-动态加载"},"35.4":{t:"React.lazy",p:`React.lazy 接受一个函数，这个函数需要动态调用 import()
它必须返回一个 Promise ，该 Promise 需要 resolve 一个 default export 的 Reac ...`,l:"articles/FontEnd/react/optimizeRender/index.html#react-lazy",a:"react-lazy"},"35.5":{t:"React.lazy和Suspense实现动态加载原理",p:"",l:"articles/FontEnd/react/optimizeRender/index.html#react-lazy和suspense实现动态加载原理",a:"react-lazy和suspense实现动态加载原理"},"36.0":{t:"# props",p:"",l:"articles/FontEnd/react/props/index.html",a:"props"},"36.1":{t:"监听props改变",p:`函数组件中可以用 useEffect 来作为 props 改变后的监听函数。(不过有一点值得注意, useEffect 初始化会默认执行一次)
  React.useEffect(()=&gt;{
  ...`,l:"articles/FontEnd/react/props/index.html#监听props改变",a:"监听props改变"},"36.2":{t:"Render Children 模式",p:`① props 插槽组件

&lt;Container&gt;
    &lt;Children&gt;
&lt;/Container&gt;


上述可以在 Container 组件中，通过 pro ...`,l:"articles/FontEnd/react/props/index.html#render-children-模式",a:"render-children-模式"},"36.3":{t:"Render Props 模式",p:`&lt;Container&gt;
   { (ContainerProps)=&gt; &lt;Children {...ContainerProps}  /&gt; }
&lt;/Containe ...`,l:"articles/FontEnd/react/props/index.html#render-props-模式",a:"render-props-模式"},"36.4":{t:"组合模式",p:`如果 Container 的 Children 既有函数也有组件，这种情况应该怎么处理呢？
&lt;Container&gt;
    &lt;Children /&gt;
    { (Contai ...`,l:"articles/FontEnd/react/props/index.html#组合模式",a:"组合模式"},"36.5":{t:"操作Props 抽象Props",p:`::: tip
抽象 props 一般用于跨层级传递 props ，一般不需要具体指出 props 中某个属性，而是将 props 直接传入或者是抽离到子组件中。
:::
`,l:"articles/FontEnd/react/props/index.html#操作props-抽象props",a:"操作props-抽象props"},"36.6":{t:"混入 props",p:`::: details View The Code
function Son(props){
    console.log(props)
    return &lt;div&gt; hello,w ...`,l:"articles/FontEnd/react/props/index.html#混入-props",a:"混入-props"},"36.7":{t:"抽离Props",p:`::: details View The Code
function Son(props){
    console.log(props)
    return &lt;div&gt; hello,w ...`,l:"articles/FontEnd/react/props/index.html#抽离props",a:"抽离props"},"36.8":{t:"props 的显式注入和隐式注入",p:`显式注入
&lt;Father&gt;
    &lt;Son data='{data}' name='123'&gt;
&lt;/Father&gt;

隐式注入
function Father(p ...`,l:"articles/FontEnd/react/props/index.html#props-的显式注入和隐式注入",a:"props-的显式注入和隐式注入"},"36.9":{t:"demo",p:`::: code-group

用于表单状态管理的&lt;Form&gt; 和 &lt;FormItem&gt; 组件

&lt;Form&gt;用于管理表单状态；
&lt;FormItem&gt;用 ...`,l:"articles/FontEnd/react/props/index.html#demo",a:"demo"},"37.0":{t:"# Ref",p:"",l:"articles/FontEnd/react/ref/index.html",a:"ref"},"37.1":{t:"获取Ref的三种方式",p:`
ref是一个字符串
::: details View The Code

/* 类组件 */
class Children extends Component{  
    render=()=&g ...`,l:"articles/FontEnd/react/ref/index.html#获取ref的三种方式",a:"获取ref的三种方式"},"37.2":{t:"转发Ref(跨层级获取Ref)",p:`如果我想在父组件 获取 孙/子 组件的实例

通过回调函数将子组件的Ref作为参数
::: details View The Code

function ParentComponent(){
  c ...`,l:"articles/FontEnd/react/ref/index.html#转发ref-跨层级获取ref",a:"转发ref-跨层级获取ref"},"37.3":{t:"组合转发Ref",p:`::: details View The Code
// 表单组件
class Form extends React.Component{
    render(){
       return &l ...`,l:"articles/FontEnd/react/ref/index.html#组合转发ref",a:"组合转发ref"},"37.4":{t:"高阶组件转发",p:"如果通过高阶组件包裹一个原始类组件，就会产生一个问题，如果高阶组件 HOC 没有处理 ref ，那么由于高阶组件本身会返回一个新组件，所以当使用 HOC 包装后组件的时候，标记的 ref 会指向 HO ...",l:"articles/FontEnd/react/ref/index.html#高阶组件转发",a:"高阶组件转发"},"37.5":{t:"组件通信",p:`
类组件通信: 因为类组件有实例，所以我们可以直接获取实例然后调用实例方法来操作
函数组件通信: 对于函数组件，本身是没有实例的，所以我们要借用forwardRef(使函数组件可以接收Ref) + u ...`,l:"articles/FontEnd/react/ref/index.html#组件通信",a:"组件通信"},"37.6":{t:"函数组件数据缓存",p:`函数组件每一次 render ，函数上下文会重新执行，那么有一种情况就是
在执行一些事件方法改变数据或者保存新数据的时候，有没有必要更新视图，有没有必要把数据放到 state 中。如果视图层更新不依赖 ...`,l:"articles/FontEnd/react/ref/index.html#函数组件数据缓存",a:"函数组件数据缓存"},"38.0":{t:"# 渲染控制",p:"",l:"articles/FontEnd/react/render/index.html",a:"渲染控制"},"38.1":{t:"React 几种控制 render 方法",p:`
第一种就是从父组件直接隔断子组件的渲染，经典的就是 memo，缓存 element 对象。
父组件 render ，子组件有没有必要跟着父组件一起 render ，如果没有必要，则就需要阻断更新
: ...`,l:"articles/FontEnd/react/render/index.html#react-几种控制-render-方法",a:"react-几种控制-render-方法"},"38.2":{t:"useMemo用法",p:`::: details
const cacheSomething = useMemo(create,deps)


create：第一个参数为一个函数，函数的返回值作为缓存值，如上 demo 中把 C ...`,l:"articles/FontEnd/react/render/index.html#usememo用法",a:"usememo用法"},"38.3":{t:"useMemo原理",p:"useMemo 会记录上一次执行 create 的返回值，并把它绑定在函数组件对应的 fiber 对象上，只要组件不销毁，缓存值就一直存在，但是 deps 中如果有一项改变，就会重新执行 create ...",l:"articles/FontEnd/react/render/index.html#usememo原理",a:"usememo原理"},"38.4":{t:"pureComponent",p:`纯组件是一种发自组件本身的渲染优化策略，当开发类组件选择了继承 PureComponent ，就意味这要遵循其渲染规则。规则就是浅比较 state 和 props 是否相等。
基本使用
::: det ...`,l:"articles/FontEnd/react/render/index.html#purecomponent",a:"purecomponent"},"38.5":{t:"pureComponent原理",p:`

pureComponentPrototype有一个prototype属性，isPureReactComponent，这个属性是一个布尔值，用来标识当前组件是否是纯组件，如果是纯组件，那么在更新时， ...`,l:"articles/FontEnd/react/render/index.html#purecomponent原理",a:"purecomponent原理"},"38.6":{t:"pureComponent注意事项",p:`PureComponent可以让组件自发的做一层性能上的调优，但是父组件给是PureComponent的子组件绑定事件要小心，避免两种情况

避免使用箭头函数，不要给是PureComponent子组件 ...`,l:"articles/FontEnd/react/render/index.html#purecomponent注意事项",a:"purecomponent注意事项"},"38.7":{t:"shouldComponentUpdate",p:`有的时候把控制渲染交给React组件本身处理靠不住，那么我们便可以自定义渲染方案决定组建是否更新

使用

class Index extends React.Component {
  state  ...`,l:"articles/FontEnd/react/render/index.html#shouldcomponentupdate",a:"shouldcomponentupdate"},"38.8":{t:"React.Memo",p:`React.memo(Component,compare)
Component: 需要被包裹的组件
compare: 比较函数，用来判断是否需要更新，返回true则不更新，返回false则更新

`,l:"articles/FontEnd/react/render/index.html#react-memo",a:"react-memo"},"38.9":{t:"React.Memo的特点",p:`

memo 当二个参数 compare 不存在时，会用浅比较原则处理 props ，相当于仅比较 props 版本的 pureComponent 。


memo 同样适合类组件和函数组件。


D ...`,l:"articles/FontEnd/react/render/index.html#react-memo的特点",a:"react-memo的特点"},"38.10":{t:"打破渲染限制的方法使Memo和PureComponent失效",p:`
forceUpdate 如果更新状态使用的forceUpdate 而不是 setState 会跳过shouldComponentUpdate的判断，直接更新组件
Context 如果组件依赖于con ...`,l:"articles/FontEnd/react/render/index.html#打破渲染限制的方法使memo和purecomponent失效",a:"打破渲染限制的方法使memo和purecomponent失效"},"38.11":{t:"控制渲染的场景",p:`
大屏展示组件数据量大，渲染耗时长，可以使用React.memo局部更新
表单，React 一般会采用受控组件的模式去管理表单数据层，表单数据层完全托管于 props 或是 state ，而用户操作表 ...`,l:"articles/FontEnd/react/render/index.html#控制渲染的场景",a:"控制渲染的场景"},"40.0":{t:"context",p:"",l:"articles/FontEnd/relevance/context.html",a:"context"},"41.0":{t:"# reducer",p:`
action + state  = new state

`,l:"articles/FontEnd/relevance/reducer.html",a:"reducer"},"41.1":{t:"与state的区别",p:`state是用户触发函数来执行具体的一步一步操作，reducer是把操作整合到一起，用户触发事件名进而执行相应的处理函数
例如：用户触发添加程序, 程序了解到事件名以后去reducer中找到对应的函数 ...`,l:"articles/FontEnd/relevance/reducer.html#与state的区别",a:"与state的区别"},"41.2":{t:"命名原因",p:`reducer是根据reduce命名 ,它接收目前的结果和当前的值，然后返回下一个结果.
React中的reducer也是这样的他们都接受 当前state 和触发的事件action ,然后返回新的st ...`,l:"articles/FontEnd/relevance/reducer.html#命名原因",a:"命名原因"},"41.3":{t:" ",p:"",l:"articles/FontEnd/relevance/reducer.html#",a:""},"41.4":{t:"reduce实现reducer",p:`::: code-group
import tasksReducer from './tasksReducer.js';

let actions = [
  {type: 'added', id:  ...`,l:"articles/FontEnd/relevance/reducer.html#reduce实现reducer",a:"reduce实现reducer"},"41.5":{t:"实现useReducer",p:`通过useState保存当前状态＋action = new state
::: code-group
const App = ()=&gt;{
  const [state,dispatch] = u ...`,l:"articles/FontEnd/relevance/reducer.html#实现usereducer",a:"实现usereducer"},"41.6":{t:"实际用途",p:`useReducer是React提供的一个Hook，用于管理组件的状态（state）。它的实际用途包括：


状态复杂逻辑：当组件的状态逻辑较为复杂，涉及多个状态变化时，可以使用useReducer来 ...`,l:"articles/FontEnd/relevance/reducer.html#实际用途",a:"实际用途"},"42.0":{t:"useRef",p:"",l:"articles/FontEnd/relevance/useRef.html",a:"useref"},"43.0":{t:"base",p:"",l:"articles/FontEnd/vue/base/index.html",a:"base"},"44.0":{t:"# vue",p:"",l:"articles/FontEnd/vue/index.html",a:"vue"},"46.0":{t:"前置",p:"",l:"articles/algorithm/base/index.html",a:"前置"},"47.0":{t:"时间复杂度",p:"",l:"articles/algorithm/base/time.html",a:"时间复杂度"},"48.0":{t:"# Nest主要设计模式",p:"",l:"articles/designModel/IOCDI/index.html",a:"nest主要设计模式"},"48.1":{t:"Dependency Injection 依赖注入",p:`class UserService {
  getList(id) {
    // 获取用户的逻辑 
  }
}

class AdminService{
  getList(id){
    // ...`,l:"articles/designModel/IOCDI/index.html#dependency-injection-依赖注入",a:"dependency-injection-依赖注入"},"48.2":{t:"Inversion of Control  控制反转",p:`控制反转的本质就是降低耦合度，不再强依赖一些属性和方法。具体的实现方式是DI依赖注入
控制反转需要一个容器，这个容器接手类的控制权
`,l:"articles/designModel/IOCDI/index.html#inversion-of-control-控制反转",a:"inversion-of-control-控制反转"},"48.3":{t:"好处",p:`
解耦和模块化
更方便的依赖注入
配置集中管理

`,l:"articles/designModel/IOCDI/index.html#好处",a:"好处"},"48.4":{t:"如何控制反转",p:`控制反转需要的条件如下

需要一个管理容器  Container
容器需要拥有register方法用来管理容器的注册
容器需要有一个解析的方法 （从容器中解析已注册的依赖项并注入)
让所有的依赖项统一 ...`,l:"articles/designModel/IOCDI/index.html#如何控制反转",a:"如何控制反转"},"48.5":{t:"案例",p:`  abstract class Service {
    getList: () =&gt; void;
    putList: () =&gt; void;
  }

  class Cont ...`,l:"articles/designModel/IOCDI/index.html#案例",a:"案例"},"49.0":{t:"设计模式",p:"",l:"articles/designModel/index.html",a:"设计模式"},"50.0":{t:"<myIndex/>",p:"",l:"index.html",a:"myindex"},"51.0":{t:"# 记录和楠楠的日常生活",p:"",l:"nannan/index.html",a:"记录和楠楠的日常生活"},"52.0":{t:"# 我们的故事",p:"",l:"nannan/story/index.html",a:"我们的故事"},"53.0":{t:"# 根据空格拆分字符串",p:` const str = \`remote_addr：192.168.3.69:48512
status_code：200
content_type：
method：GET
proto：HTTP/1.1 ...`,l:"otherArticles/index.html",a:"根据空格拆分字符串"},"54.0":{t:"<!-- ---",p:`layout :  false
layout: page
&lt;team/&gt; --&gt;
`,l:"team/index.html",a:""}},n={previewLength:100,buttonLabel:"搜索",placeholder:"情输入关键词",allow:[],ignore:[]},r={INDEX_DATA:e,PREVIEW_LOOKUP:t,Options:n};export{r as default};
