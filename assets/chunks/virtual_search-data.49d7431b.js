const e={map:'[{"resume":["0.0"],"中间件":["1.0"],"守卫":["1.1"],"拦截器":["1.2"],"管道":["1.3"],"注入基本数据":["2.0"],"案例":["3.0","27.5"],"控制反转":["4.0"],"依赖注入":["4.1"],"nest":["5.0","5.2"],"module":["5.1","5.4"],"provider":["5.3"],"动态module":["5.6"],"hi":["6.0"],"核心概念概览":["6.1"],"重点1":["6.2"],"他代表了一个http请求的执行上下文":["7.0"],"nestjs":["8.0"],"register":["9.0"],"js":["11.0"],"react":["12.0","13.0","14.0","15.0","18.0"],"hooks":["12.1"],"useref":["12.2","22.0"],"api分类":["12.3"],"数据更新驱动类":["12.4"],"usestate":["12.5"],"usereducer":["12.6"],"usecontext":["12.7"],"高阶组件hoc":["12.8"],"出现背景":["13.1","15.3"],"核心概念":["13.2"],"使用教程":["13.3","16.4"],"自动缓存和数据同步":["13.4"],"加载状态管理":["13.5"],"数据同步和预取":["13.6"],"自动缓存失效处理":["13.7"],"服务器状态更新":["13.8"],"更少的重复代码":["13.9"],"api":["13.10"],"总结":["13.11"],"快速上手":["14.1"],"原理分析":["14.2"],"核心api":["14.3"],"常见的状态管理模式":["15.1","16.1"],"flex":["15.2"],"架构特点":["15.4"],"jotai":["16.0","16.2"],"原子式解决了什么问题":["16.3"],"实际使用":["16.14"],"redux":["17.0"],"api介绍":["17.1"],"摘要":["17.2"],"context":["20.0"],"reducer":["21.0"],"与state的区别":["21.1"],"命名原因":["21.2"],"reduce实现reducer":["21.4"],"实现usereducer":["21.5"],"实际用途":["21.6"],"vue":["23.0"],"前置":["25.0"],"时间复杂度":["26.0"],"nest主要设计模式":["27.0"],"dependency":["27.1"],"inversion":["27.2"],"好处":["27.3"],"如何控制反转":["27.4"],"设计模式":["28.0"],"myindex":["29.0"],"记录和楠楠的日常生活":["30.0"],"我们的故事":["31.0"]},{"0":["16.14","17.1"],"1":["5.2","6.1","12.5","15.1","16.1","16.5","27.3"],"2":["5.2","16.6"],"3":["16.7"],"4":["16.8"],"5":["16.9"],"6":["16.10"],"7":["16.11"],"8":["16.12"],"9":["16.13"],"info":["1.0"],"存在意义":["1.0"],"处理http请求的函数":["1.0"],"他可以在请求到达控制器之前":["1.0"],"之后执行一些操作":["1.0"],"他可以是全局的也可以是局部的":["1.0"],"场景":["1.0","12.2"],"身份验证":["1.0"],"日志记录":["1.0"],"guard":["1.1"],"是一种用于保护路由的机制":["1.1"],"他可以在请求到达控制器之前或者之后执行一些操作":["1.1"],"守卫可以用于实现身份验证":["1.1"],"权限控制":["1.1"],"缓存等功能":["1.1"],"在nestjs中收尾可以是全局的也可以是局部的":["1.1"],"守卫路由":["1.1"],"execution":["1.1"],"context":["1.1"],"处理http请求和响应的函数":["1.2"],"在请求到达控制器之前之后执行一些操作":["1.2"],"拦截器可以实现日志记录":["1.2"],"错误处理":["1.2"],"数据转换":["1.2"],"在nestjs中拦截器可以是全局的也可局部":["1.2"],"管道是数据流入controller前进行的一波数据处理":["1.3"],"因为普通数据服务不是class":["2.0"],"所以要使用":["2.0"],"inject来注入":["2.0"],"typescript":["2.0","3.0","16.6","27.1","27.5"],"module":["2.0"],"providers":["2.0"],"provide":["2.0"],"app":["2.0","13.9","21.5"],"name":["2.0","14.3"],"usevalue":["2.0"],"使用普通值":["2.0"],"injectable":["2.0","3.0"],"export":["2.0","3.0","13.9","16.14"],"class":["2.0","3.0","27.1","27.5"],"authservice":["2.0"],"第三方发送短信服务":["3.0"],"根据不同配置使用不同的第三方运营商":["3.0"],"sms":["3.0"],"serivce":["3.0"],"ts":["3.0","12.2","12.5","16.14","21.4"],"appcontroller":["3.0"],"constructor":["3.0","27.1"],"private":["3.0"],"ali":["3.0"],"aliservice":["3.0"],"tencent":["3.0"],"ioc":["4.0","4.1"],"di":["4.1"],"的具体实现":["4.1"],"请求声明周期":["5.0"],"controller":["5.1","27.1"],"service的关系":["5.1"],"提供了一个模块化的方式来组织和管理您的应用程序的代码":["5.1"],"请求生命周期":["5.2"],"img":["5.2"],"java":["5.2"],"收到请求":["5.2"],"提供服务":["5.3"],"用于表示应用程序中可注入的任何东西":["5.3"],"除了服务":["5.3"],"还可以提供其他类型的对象":["5.3"],"模块是一个子程序":["5.4"],"用于定义控制器":["5.4"],"提供者或向其他模块开放提供者":["5.4"],"开放模块的api":["5.4"],"默认情况下控制器":["5.4"],"提供者在当前模块可用":["5.4"],"我是eagon":["6.0"],"模块":["6.1"],"modules":["6.1"],"nestjs":["6.2"],"提供了许多属性和方法":["7.0"],"可用于在请求的生命周期内访问":["7.0"],"接收账号密码argon2":["9.0"],"速通":["12.0"],"稳定引用":["12.2"],"获取dom节点":["12.2"],"获取上一次的值":["12.2"],"闭包":["12.2"],"异步访问到旧变量的问题":["12.2"],"code":["12.2","13.9","16.6","16.8","16.9","16.10","16.14","21.4","21.5"],"group":["12.2","13.9","16.14","21.4","21.5"],"典型的闭包循环案例":["12.2"],"每次循环调用settimeout的时候都会保存当前的作用域":["12.2"],"因为var不会新建作用域":["12.2"],"关键词":["12.3"],"concurrent":["12.3"],"table":["12.3"],"tr":["12.3"],"th":["12.3"],"使用范围":["12.3"],"hooks":["12.3"],"const":["12.5","13.9","16.14","21.5"],"state":["12.5","21.5","21.6"],"setstate":["12.5"],"initialstate":["12.5"],"参数接收一个初始值":["12.5"],"返回一个数组":["12.5"],"数组的第一个元素是当前的state":["12.5"],"第二个元素是更新state的函数":["12.5"],"注意事项":["12.5"],"在函数组件":["12.5"],"对于拥有许多状态更新逻辑的组件来说":["12.6"],"过于分散的事件处理程序可能会令人不知所措":["12.6"],"对于这种情况":["12.6"],"你可以将组件的所有状态更新":["12.6"],"增删改查":["12.6"],"逻辑整合到一个外部函数中":["12.6"],"这个函数叫作":["12.6"],"reducer":["12.6","17.1"],"reducer是弥补usestate在逻辑复杂情况下的缺陷":["12.6"],"它分为三个步骤":["12.6"],"作用":["12.7"],"query":["13.0"],"解决问题":["13.1"],"灵魂拷问q":["13.1"],"为什么用axios不可以":["13.1"],"为什么需要出现react":["13.1"],"querya":["13.1"],"尽管可以使用普通的":["13.1"],"axios":["13.1"],"解决普通请求代码重复":["13.2"],"tsx":["13.9"],"befor":["13.9"],"import":["13.9","16.6","16.14","21.4"],"as":["13.9"],"react":["13.9"],"from":["13.9","16.14","21.4"],"default":["13.9"],"function":["13.9"],"存储":["13.9"],"后端返回数据":["13.9"],"zen":["13.9"],"setzen":["13.9"],"usestate":["13.9"],"加载状态":["13.9"],"isloading":["13.9","13.10"],"setisloading":["13.9"],"false":["13.9"],"是否请求成功":["13.9"],"iserror":["13.9"],"setiserror":["13.9"],"apiname":["13.10"],"are":["13.10"],"data":["13.10"],"查询返回的数据":["13.10"],"表示查询是否正在加载中":["13.10"],"router":["14.0"],"后端概念":["14.0"],"effect":["14.3"],"demo":["14.3"],"link":["14.3"],"普通链接":["14.3"],"全局存储":["15.0"],"global":["15.1","16.1"],"全局式":["15.1","16.1"],"架构":["15.2"],"解决痛点":["15.3"],"flux架构解决前端应用程序中状态管理和数据流动的复杂性问题":["15.3"],"在传统的mvc":["15.3"],"详细介绍":["15.4"],"flux架构通过引入单向数据流的概念":["15.4"],"将数据的流动变得可控和可预测":["15.4"],"它明确了数据流动的路径":["15.4"],"引用来源":["16.0"],"原子状态管理":["16.2"],"reacthook":["16.3"],"使state的":["16.3"],"拆分":["16.3"],"和":["16.3"],"创建":["16.5"],"atom":["16.5","16.14"],"派生atom":["16.5"],"使用":["16.5"],"useatom":["16.5"],"异步派生":["16.6"],"details":["16.6","16.7","16.8","16.9","16.10"],"view":["16.6","16.8","16.9","16.10"],"the":["16.6","16.8","16.9","16.10"],"函数组件内更新方式":["16.7"],"atom内更新方式":["16.8"],"异步更新atom":["16.9"],"区别于第二条异步获取":["16.9"],"异步更新不会阻塞线程":["16.9"],"渲染问题":["16.10"],"当我们点击add时":["16.10"],"发现a和b都重新渲染了":["16.10"],"但是问题来了":["16.10"],"a为什么要重新渲染呀":["16.10"],"a只是触发了更新操作":["16.10"],"provider":["16.12"],"store":["16.13","16.14"],"createstore":["16.14"],"jotai":["16.14"],"mystore":["16.14"],"countatom":["16.14"],"纯函数":["17.1"],"middleware":["17.2"],"中间件":["17.2"],"sdas":["18.0"],"action":["21.0","21.5"],"state是用户触发函数来执行具体的一步一步操作":["21.1"],"reducer是根据reduce命名":["21.2"],"index":["21.4"],"js":["21.4","21.5"],"tasksreducer":["21.4"],"let":["21.4"],"actions":["21.4"],"type":["21.4"],"added":["21.4"],"通过usestate保存当前状态":["21.5"],"new":["21.5"],"usereducer是react提供的一个hook":["21.6"],"用于管理组件的状态":["21.6"],"injection":["27.1"],"依赖注入":["27.1"],"userservice":["27.1"],"getlist":["27.1","27.5"],"id":["27.1"],"获取用户的逻辑":["27.1"],"this":["27.1"],"of":["27.2"],"控制反转需要的条件如下":["27.4"],"abstract":["27.5"],"service":["27.5"],"void":["27.5"],"putlist":["27.5"],"layout":["32.0"]},{"0":["12.2"],"1":["12.6","15.4","16.8","21.4","27.4"],"2":["6.1","12.5","12.6","21.4"],"3":["5.2","12.6"],"4":["5.2"],"5":["5.2","12.3"],"10":["12.2"],"200":["13.9"],"错误处理":["1.0"],"details":["1.0","16.5"],"中间件可以执行以下任务":["1.0"],"执行任何代码操作":["1.0"],"对请求对象进行更改":["1.0"],"结束当前请求生命周期":["1.0"],"调用下一个中间件函数":["1.0"],"如果当前中间件没有":["1.0"],"手动结束生命周期":["1.0"],"执行上下文":["1.1"],"typescript":["1.1","1.2","4.1","16.5","16.7","16.8","16.9"],"n":["1.1"],"g":["1.1"],"gu":["1.1"],"xxx":["1.1"],"no":["1.1"],"spec":["1.1"],"injectable":["1.1","1.2"],"export":["1.1","1.2"],"class":["1.2"],"logginginterceptor":["1.2"],"implements":["1.2"],"nestinterceptor":["1.2"],"其中数据处理包含了对数据的转换":["1.3"],"constractor":["2.0"],"inject":["2.0","3.0"],"private":["2.0","27.5"],"appname":["2.0"],"注册类":["2.0"],"使用类将提供者注册到服务是最常用的方式":["2.0"],"autherservice":["2.0"],"以上是简写形式":["2.0"],"完整写法应该如下":["2.0"],"tencentservices":["3.0"],"smsservice":["3.0"],"base":["3.0"],"key":["3.0","27.5"],"baseconfig":["3.0"],"configtype":["3.0"],"typeof":["3.0"],"getsmsservice":["3.0"],"type":["3.0"],"string":["3.0","16.9","27.5"],"const":["3.0","16.6","16.8","16.9","27.1"],"面向对象中的设计原则":["4.0"],"用来减少计算机代码之前的耦合度":["4.0"],"在类以外的地方提供服务":["4.1"],"类内部调用的是该具体服务的抽象":["4.1"],"provider":["5.0"],"同时还允许您使用依赖注入和模块之间的依赖关系来构建更加可扩展的应用程序":["5.1"],"module是nestjs应用程序的基本构建块":["5.1"],"每个模块都有一个独立的作用域":["5.1"],"其中包含一组相关的controller":["5.1"],"全局绑定的中间件":["5.2"],"模块绑定的中间件":["5.2"],"全局守卫":["5.2"],"控制层守卫":["5.2"],"例如":["5.3"],"factory":["5.3"],"工厂":["5.3"],"配置对象":["5.3"],"连接对象等":["5.3"],"提供者使用":["5.3"],"即模块作用域":["5.4"],"若果向其他模块提供服务可以将提供者定义在export属性中":["5.4"],"其他模块需要再imports属性中引入当前模块":["5.4"],"模块是":["5.4"],"设计模式模式":["5.4"],"的":["5.4"],"多个模块共享当前模块实例":["5.4"],"今天给大家分享nest基础系列":["6.0"],"组合所有逻辑的地方":["6.1"],"我理解为di的container":["6.1"],"控制器":["6.1"],"处理https时的生命周期":["6.2"],"executioncontext是在每个请求到达控制器之前被nestjs封装产生的":["7.0"],"他的请求是将请求的上下文":["7.0"],"hash":["9.0"],"加密插入数据库":["9.0"],"所以所有的settimeout都是共享一个作用域":["12.2"],"当for循环同步任务执行完毕后开始执行settimeout此时因为循环完成i的值已经为10":["12.2"],"并且所有的settimout共享一个作用域":["12.2"],"所以打印出来的结果都是10":["12.2"],"for":["12.2"],"var":["12.2"],"i":["12.2"],"focus":["12.2"],"具体功能":["12.3"],"td":["12.3"],"rowspan":["12.3"],"数据更新驱动":["12.3"],"一次执行上下文中":["12.5"],"的值是":["12.5"],"固定不变的":["12.5"],"如果两次":["12.5"],"dispatchaction":["12.5"],"传入":["12.5"],"相同的":["12.5"],"值":["12.5"],"那么组件就":["12.5"],"不会更新":["12.5"],"将设置状态的逻辑":["12.6"],"修改成dispatch":["12.6"],"的一个":["12.6"],"action":["12.6"],"编写":["12.6"],"一个":["12.6"],"函数":["12.6"],"传递数据":["12.7"],"或其他数据获取库来处理数据请求":["13.1"],"但在某些情况下":["13.1"],"使用":["13.1"],"react":["13.1","16.6"],"query":["13.1"],"可以带来更多的好处和便利性":["13.1"],"自动缓存和数据同步":["13.1"],"后期维护困难":["13.2"],"后端返回的错误数据":["13.9"],"errormessage":["13.9"],"seterrormessage":["13.9"],"fetchdata":["13.9"],"开始获取数据":["13.9"],"将isloading置为true":["13.9"],"true":["13.9","13.10"],"fetch":["13.9"],"https":["13.9"],"api":["13.9"],"github":["13.9"],"com":["13.9"],"then":["13.9"],"async":["13.9"],"response":["13.9"],"如果请求返回status不为200":["13.9"],"则抛出后端错误":["13.9"],"if":["13.9"],"status":["13.9"],"message":["13.9"],"await":["13.9"],"如果数据正在加载":["13.10"],"该属性为":["13.10"],"否则为":["13.10"],"false":["13.10","16.14","32.0"],"iserror":["13.10"],"表示查询是否遇到了错误":["13.10"],"发送url请求到服务器端":["14.0"],"server会通过不同的地址返回不同的页面":["14.0"],"为什么需要路由":["14.0"],"不会触发刷新":["14.3"],"to":["14.3","16.14"],"navlink":["14.3"],"类似link":["14.3"],"状态管理":["15.0"],"也被称作单一数据源":["15.1","16.1"],"将所有的数据放到一个大对象中":["15.1","16.1"],"关键词":["15.1","16.1"],"model":["15.3"],"view":["15.3","16.5","16.7"],"controller":["15.3"],"模式中":["15.3"],"并将状态的修改限制在特定的流程中":["15.4"],"这样做的好处包括":["15.4"],"易于追踪和调试":["15.4"],"由于数据流是单向的":["15.4"],"ryun":["16.0"],"逻辑共享":["16.3"],"变得更容易":["16.3"],"但usestate":["16.3"],"the":["16.5","16.7"],"code":["16.5","16.7"],"import":["16.5"],"atom":["16.6","16.8"],"useatom":["16.6"],"from":["16.6"],"jotai":["16.6"],"fc":["16.6"],"valueatom":["16.8"],"mockdata":["16.9"],"new":["16.9","27.1"],"promise":["16.9"],"r":["16.9"],"settimeout":["16.9"],"并不需要重新渲染呀":["16.10"],"这是因为":["16.10"],"如果使用useatom":["16.10"],"即使你不引入它的value值":["16.10"],"但它由useatomvalue包裹":["16.10"],"当更新时":["16.10"],"useatomvalue会触发订阅事件":["16.10"],"从而触发渲染":["16.10"],"如果不理解可以阅读":["16.10"],"recoil原理":["16.10"],"理解":["16.10"],"解决渲染问题":["16.11"],"useatomvalue":["16.11"],"正常情况下":["16.12"],"无需用provider包裹组件":["16.12"],"createstore":["16.13"],"export出去":["16.13"],"statusatom":["16.14"],"监听发生变化":["16.14"],"sub":["16.14"],"console":["16.14"],"log":["16.14"],"value":["16.14"],"is":["16.14"],"changed":["16.14"],"get":["16.14"],"set":["16.14"],"接收两个参数":["17.1"],"一个是state":["17.1"],"一个是action":["17.1"],"中间件用于增强":["17.2"],"dispatch":["17.2","21.5"],"功能":["17.2"],"abc":["18.0"],"state":["21.0"],"reducer是把操作整合到一起":["21.1"],"它接收目前的结果和当前的值":["21.2"],"id":["21.4"],"text":["21.4"],"参观卡夫卡博物馆":["21.4"],"看木偶戏":["21.4"],"deleted":["21.4"],"usereducer":["21.5"],"reducer":["21.5"],"initialstate":["21.5"],"return":["21.5"],"div":["21.5"],"button":["21.5"],"onclick":["21.5"],"它的实际用途包括":["21.6"],"状态复杂逻辑":["21.6"],"当组件的状态逻辑较为复杂":["21.6"],"涉及多个状态变化时":["21.6"],"service":["27.1"],"read":["27.1"],"处理用户数据的逻辑":["27.1"],"result":["27.1"],"control":["27.2"],"解耦和模块化":["27.3"],"container":["27.5"],"创建一个变量存贮依赖项":["27.5"],"dependencies":["27.5"]},{"1":["1.0","15.3","16.7","16.9","17.1"],"2":["15.1","15.4","16.1","16.14","27.3"],"3":["6.1","12.5","21.4"],"6":["5.2"],"7":["5.2"],"8":["5.2"],"1000":["12.2"],"3000":["16.9"],"必须使用next":["1.0"],"方法将控制权传递给下一个中间件函数":["1.0"],"否则请求将被挂起":["1.0"],"定义中间件":["1.0"],"code":["1.0","12.6","27.1"],"group":["1.0","12.6"],"typescript":["1.0","5.4","16.10"],"index":["1.0"],"ts":["1.0","2.0","12.6"],"class":["1.1","4.1"],"authgurad":["1.1"],"implements":["1.1"],"canactive":["1.1"],"canactivate":["1.1"],"contenxt":["1.1"],"executioncontext":["1.1","1.2"],"boolean":["1.1"],"promise":["1.1","16.6"],"observable":["1.1"],"intercept":["1.2"],"context":["1.2"],"next":["1.2"],"callhandler":["1.2"],"console":["1.2","12.2"],"log":["1.2","12.2"],"验证":["1.3"],"provider":["2.0","5.1","16.3"],"useclass":["2.0"],"动态注册":["2.0"],"下面实现根据不同的环境创建不同的服务":["2.0"],"首先安装":["2.0"],"dotenv":["2.0"],"扩展包":["2.0"],"用来读取":["2.0"],"env环境变量":["2.0"],"然后创建两个服务":["2.0"],"service":["2.0","3.0","6.1"],"与":["2.0"],"b":["2.0"],"tencnetservice":["3.0"],"if":["3.0"],"return":["3.0","13.9","27.1"],"privider":["3.0"],"curenv":["3.0"],"this":["3.0","27.5"],"config":["3.0"],"get":["3.0","16.8"],"其根本思想是":["4.0"],"借助于第三方":["4.0"],"abstrct":["4.1"],"phone":["4.1"],"playgame":["4.1"],"动态provider":["5.0"],"asynprovider":["5.0"],"service和其他提供者":["5.1"],"module的作用是将应用程序拆分为更小的可重用部分":["5.1"],"以便更好的组织代码和管理依赖关系":["5.1"],"路由守卫":["5.2"],"全局拦截器":["5.2"],"控制器之前":["5.2"],"injectable":["5.3"],"装饰器定义":["5.3"],"这样系统会分析":["5.3"],"constructor":["5.3"],"进行依赖注入":["5.3"],"模块提供者也是单例":["5.4"],"所以模块被多个其他模块使用":["5.4"],"那该模块的provider也是共享的":["5.4"],"导入其他模块":["5.4"],"nestjs核心基础概念":["6.0"],"controller处理请求":["6.1"],"服务":["6.1"],"传递给控制器":["7.0"],"拦截器":["7.0"],"管道":["7.0"],"login":["9.0"],"settimeout":["12.2","16.6"],"结果都是10":["12.2"],"let":["12.2"],"在每次循环的时候都会新建一个作用域":["12.2"],"所以当每次循环的时候settimout被分配到异步队列时都会保存当前的作用域i的值":["12.2"],"而不是所有的settimeout共享一个作用域":["12.2"],"usestate":["12.3"],"数据驱动更新":["12.3"],"usereducer":["12.3"],"当触发":["12.5"],"在":["12.5"],"当前执行上下文中获取不到最新的state":["12.5"],"只有再下一次组件":["12.5"],"rerender":["12.5"],"中才能获取到":["12.5"],"案例":["12.5"],"此时点击按钮":["12.5"],"log打印出来的值并不是更改过后的number":["12.5"],"而是更改前的值":["12.5"],"在你的组件中":["12.6"],"使用":["12.6"],"参数":["12.6"],"const":["12.6","16.7","21.4"],"state":["12.6"],"dispatch":["12.6"],"避免props层层传递":["12.7"],"自带数据缓存和自动刷新功能":["13.1"],"它会自动缓存数据并定期刷新以保持数据的最新状态":["13.1"],"这减少了手动管理缓存的复杂性":["13.1"],"加载状态管理":["13.1"],"query内置状态管理":["13.1"],"你可以不用再写isloading":["13.1"],"无数据缓存":["13.2"],"json":["13.9"],"throw":["13.9"],"new":["13.9","16.6","21.0"],"error":["13.9","13.10"],"text":["13.9"],"string":["13.9","16.6"],"请求完成将isloading置为false":["13.9"],"接口请求成功":["13.9"],"将iserror置为false":["13.9"],"存储后端返回的数据":["13.9"],"catch":["13.9"],"接口请求错误":["13.9"],"将iserror置为true":["13.9"],"存储后端返回的错误数据":["13.9"],"如果查询出现错误":["13.10"],"单页应用需要路由切换":["14.0"],"通过url可以定位到页面":["14.0"],"但是会添加当前选中状态":["14.3"],"home":["14.3"],"activeclassname":["14.3"],"combinereducers":["15.1","16.1"],"multiple":["15.1","16.1"],"应用程序的状态分散在多个视图和控制器之间":["15.3"],"导致数据流动难以追踪和管理":["15.3"],"这样的架构往往会导致以下问题":["15.3"],"数据的变化路径清晰可见":["15.4"],"可以更轻松地追踪数据的流动和变化过程":["15.4"],"更好的组件通信":["15.4"],"usecontext对于多个store仍需要维护多个context":["16.3"],"因为当context改变":["16.3"],"所有消费该context的组件都会重新渲染即使是组件仅用到了":["16.3"],"context的一部分":["16.3"],"from":["16.5","16.10"],"jotai":["16.5"],"fc":["16.5","16.10"],"mockdata":["16.6"],"r":["16.6"],"mock":["16.6","16.9"],"data":["16.6","16.9","27.1"],"valueatom":["16.7","16.9"],"atom":["16.7","16.9","16.10"],"addnumberatom":["16.8"],"ge":["16.8"],"a组件使用即订阅":["16.10"],"atom原子更新触发订阅事件从而更新":["16.10"],"解决办法":["16.10"],"参考7":["16.10"],"import":["16.10"],"react":["16.10","16.14"],"usesetatom":["16.11"],"如果有的组件只需要监听状态的变化值":["16.11"],"但如果需要控制某些组件的状态不发生更新":["16.12"],"可以用provider包裹":["16.12"],"使用jotai的provider提供给app":["16.13"],"其中":["16.13"],"default":["16.14","27.1"],"main":["16.14"],"reactdom":["16.14"],"返回一个新的state":["17.1"],"createstore":["17.1"],"返回一个增强后的":["17.2"],"asdasdas":["18.0"],"用户触发事件名进而执行相应的处理函数":["21.1"],"例如":["21.1"],"然后返回下一个结果":["21.2"],"打卡列侬墙":["21.4"],"finalstate":["21.4"],"reduce":["21.4"],"output":["21.4"],"document":["21.4"],"getelementbyid":["21.4"],"type":["21.5"],"add":["21.5"],"message":["21.5"],"添加":["21.5"],"可以使用usereducer来更好地组织和管理状态的变化逻辑":["21.6"],"替代usestate":["21.6"],"在一些情况下":["21.6"],"使用usereducer可以替代多个独立的usestate":["21.6"],"js":["27.1"],"export":["27.1"],"msg":["27.1"],"focused":["27.1"],"focus":["27.1"],"此时controller":["27.1"],"和":["27.1"],"存在了强耦合的关联":["27.1"],"控制反转":["27.2"],"需要一个管理容器":["27.4"],"container":["27.4"],"any":["27.5"],"注册方法":["27.5"],"register":["27.5"],"dependency":["27.5"]},{"0":["16.10"],"1":["16.6"],"2":["27.4"],"3":["15.4"],"4":["6.1"],"9":["5.2"],"10":["5.2"],"3000":["16.6"],"中间件实例代码":["1.0"],"injectable":["1.0"],"export":["1.0","21.4"],"class":["1.0"],"loggermiddleware":["1.0"],"implements":["1.0"],"nestmiddleware":["1.0"],"use":["1.0"],"req":["1.0"],"const":["1.1","1.2","16.5","16.10"],"request":["1.1"],"switchtohttp":["1.1"],"getrequest":["1.1"],"return":["1.1","1.2"],"validaterequest":["1.1"],"function":["1.1","21.4"],"before":["1.2"],"now":["1.2"],"date":["1.2"],"他可以在控制器之前或之后对数据进行预处理":["1.3"],"import":["2.0"],"config":["2.0"],"from":["2.0"],"读取":["2.0"],"env":["2.0"],"到":["2.0"],"process":["2.0"],"环境变量中":["2.0"],"path":["2.0"],"join":["2.0"],"system":["3.0"],"provider":["3.0","16.14"],"send":["3.0"],"getsmsprovider":["3.0"],"使用":["3.0"],"nest":["3.0"],"实现具有依赖关系的对象之间的解耦":["4.0"],"第三方举例":["4.0"],"name":["4.1"],"string":["4.1"],"module":["5.0"],"controller提供一个路由处理器":["5.1"],"他可以将http请求映射到响应的处理器方法上":["5.1"],"并将处理器方法的结果作为http响应返回给client":["5.1"],"controller是处理":["5.1"],"控制器层拦截器":["5.2"],"路由拦截器":["5.2"],"全局管道":["5.2"],"提供者在模块的":["5.3"],"providers":["5.3"],"属性中定义":["5.3"],"用于注册到服务容器中":["5.3"],"用于被其他类依赖注入":["5.3"],"提供者可以在自身的constructor构造函数中依赖注入其他服务提供者":["5.3"],"imports":["5.4"],"jwtmodule":["5.4"],"registerasync":["5.4"],"configmodule":["5.4"],"inject":["5.4"],"configservice":["5.4"],"愿我们共同进步":["6.0"],"操作数据库以及处理所有逻辑的地方":["6.1"],"管道":["6.1"],"守卫等各个部分":["7.0"],"以便他们可以对请求进行处理和转换":["7.0"],"登录接收账号密码":["9.0"],"argon2":["9.0"],"订阅状态":["12.3"],"创建reducer":["12.3"],"更新试图":["12.3"],"usesyncexternalstore":["12.3"],"订阅外部数据源触发更新":["12.3"],"这意味着log时更改未发生":["12.5"],"br":["12.5"],"原因":["12.5"],"setnumber是异步的":["12.5"],"触发handleclick时":["12.5"],"任务线程会先执行同步再执行异步":["12.5"],"所以log打印的是更改前的值":["12.5"],"外部log可以获取到最新的值的原因是":["12.5"],"在执行完同步的log后执行异步setnumber":["12.5"],"异步setnumber触发重新渲染":["12.5"],"重新执行index函数":["12.5"],"usestate获取到最新的number":["12.5"],"initstate":["12.6"],"实际使用":["12.6"],"type":["12.6"],"导致代码冗余":["12.7"],"isfetching等状态了":["13.1"],"它会自动管理数据加载状态":["13.1"],"数据同步和预取":["13.1"],"支持数据预取和自动同步":["13.1"],"提前获取数据并在后台刷新":["13.1"],"以保持数据最新":["13.1"],"无数据同步":["13.2"],"useeffect":["13.9"],"初始化请求数据":["13.9"],"div":["13.9"],"h1":["13.9"],"p":["13.9"],"加载中":["13.9"],"button":["13.9"],"onclick":["13.9"],"重试":["13.9"],"刷新":["13.9"],"after":["13.9"],"该属性将包含错误信息":["13.10"],"通常是一个错误对象":["13.10"],"包含有关查询错误的详细信息":["13.10"],"status":["13.10"],"表示查询的状态":["13.10"],"用于指示加载中":["13.10"],"更有语义的组织资源":["14.0"],"三种路由的实现方式":["14.0"],"browserrouter":["14.0"],"selected":["14.3"],"prompt":["14.3"],"满足条件时提示用户是否离开页面":["14.3"],"when":["14.3"],"stores":["15.1","16.1"],"多数据源模式":["15.1","16.1"],"将状态存放到多个数据源中":["15.1","16.1"],"数据流动不可控":["15.3"],"在mvc模式中":["15.3"],"视图可以直接修改模型的状态":["15.3"],"模型可以直接更新视图":["15.3"],"flux架构提供了明确的机制来处理组件之间的通信和状态共享":["15.4"],"使得组件间的交互更加可控和灵活":["15.4"],"状态的集中管理":["15.4"],"flux将应用程序的状态集中存储在存储器":["15.4"],"容易导致不必要的":["16.3"],"无用渲染":["16.3"],"造成性能损失":["16.3"],"比如react":["16.3"],"react":["16.5"],"创建atom":["16.5","16.6"],"valueatom":["16.5","16.6"],"派生atom":["16.6"],"依赖某个atom":["16.6"],"text":["16.7"],"value":["16.7"],"set":["16.8","16.9"],"arg":["16.8","16.9"],"addnumberatom":["16.9"],"null":["16.9","21.4"],"async":["16.9"],"get":["16.9"],"result":["16.9"],"useatom":["16.10"],"useatomvalue":["16.10"],"usesetatom":["16.10"],"jotai":["16.10"],"countatom":["16.10"],"a":["16.10"],"而没有更新操作":["16.11"],"请使用useatomvalue":["16.11"],"或者说":["16.12"],"用provider包裹的组件":["16.12"],"store中的状态":["16.13"],"是全局的":["16.13"],"dom":["16.14"],"client":["16.14"],"app":["16.14"],"tsx":["16.14"],"index":["16.14"],"css":["16.14"],"创建一个":["17.1"],"root":["17.1"],"存放":["17.1"],"比如":["17.2"],"redux":["17.2"],"thunk":["17.2"],"asdasdasdasdasdas":["18.0"],"用户触发添加程序":["21.1"],"react中的reducer也是这样的他们都接受":["21.2"],"textcontent":["21.4"],"json":["21.4"],"stringify":["21.4"],"reducer":["21.4"],"default":["21.4"],"newstate":["21.5"],"接收状态事件":["21.5"],"计算新的状态":["21.5"],"switch":["21.5"],"从而将相关状态集中管理":["21.6"],"减少状态逻辑的分散":["21.6"],"可预测性":["21.6"],"无法复用":["27.1"],"若我们想用authservice时必须新注册一个类来实现":["27.1"],"并且需要改动getuser里面的代码":["27.1"],"那我们此时就需要解决这个问题":["27.1"],"使用di":["27.1"],"依赖是service":["27.1"],"依赖的标准需要拥有一个getlist方法":["27.1"],"并且接收一个id":["27.1"],"控制反转的本质就是降低耦合度":["27.2"],"更方便的依赖注入":["27.3"],"解析方法":["27.5"],"resolve":["27.5"],"if":["27.5"],"page":["32.0"]},{"2":["15.3","17.1"],"3":["15.1","16.1","27.3","27.4"],"4":["15.4"],"5":["6.1"],"9":["12.2"],"11":["5.2"],"12":["5.2"],"13":["5.2"],"14":["5.2"],"213123":["18.0"],"request":["1.0"],"res":["1.0"],"response":["1.0"],"next":["1.0"],"function":["1.0"],"console":["1.0","13.9","16.10"],"log":["1.0","13.9","16.10"],"中间件触发":["1.0"],"if":["1.1"],"true":["1.1"],"details":["1.1"],"定义一个authguard守卫类":["1.1"],"实现canactivate接口":["1.1"],"handle":["1.2"],"pipe":["1.2"],"tap":["1.2"],"after":["1.2"],"然后将数据传递给控制器或下一个管道":["1.3"],"管道的主要目的是增强应用的可靠性":["1.3"],"dirname":["2.0"],"const":["2.0"],"appservice":["2.0"],"node":["2.0"],"development":["2.0"],"bservice":["2.0"],"imports":["2.0"],"controllers":["2.0"],"快速配置env配置":["3.0"],"配置环境文件":["3.0"],"a":["3.0"],"import":["3.0","12.2"],"registeras":["3.0"],"from":["3.0","12.2"],"nestjs":["3.0"],"default":["3.0","21.5"],"ts注解":["4.0"],"或直接传递参数":["4.0"],"iphone":["4.1"],"extends":["4.1"],"静态模块":["5.0"],"http请求并返回http响应的类":["5.1"],"controller的作用是将路由映射到处理请求方法上":["5.1"],"在controller中可以使用nestjs提供的装饰器来定义":["5.1"],"路由":["5.1"],"中间件":["5.1"],"控制器管道":["5.2"],"路由管道":["5.2"],"路由参数管道":["5.2"],"需要使用":["5.3"],"装饰器声明该提供者":["5.3"],"注册到容器的提供者":["5.3"],"默认只对当前模块有效":["5.3"],"即作用域为模块":["5.3"],"usefactory":["5.4"],"return":["5.4","12.6","16.7","16.10","21.4","27.5"],"secret":["5.4"],"get":["5.4","16.6"],"pipes":["6.1"],"核验请求的数据":["6.1"],"过滤器":["6.1"],"当一个请求到达应用程序时":["7.0"],"nestjs框架会将他封装成一个executioncontext对象":["7.0"],"verify对密码进行解密":["9.0"],"解密符合":["9.0"],"结果是0":["12.2"],"react":["12.2"],"usetransition":["12.3"],"concurrent模式下":["12.3"],"过渡更新任务":["12.3"],"所以打印的值是最新的number":["12.5"],"人话":["12.5"],"点击button时触发的log和setnumber在第一任务线程":["12.5"],"第一线程执行完毕后执行第一线程引起的一系列任务":["12.5"],"外部在第二任务线程中执行的":["12.5"],"此时setnumber已执行完毕":["12.5"],"点击按钮后执行过程":["12.5"],"线程1":["12.5"],"handleclick":["12.5"],"宏任务log":["12.5"],"微任务setnumber":["12.5"],"触发线程2":["12.5"],"线程2":["12.5"],"name":["12.6"],"switch":["12.6","21.4"],"case":["12.6","21.4","21.5"],"increment":["12.6"],"count":["12.6"],"项目列表":["12.7"],"这在提高用户体验和性能方面很有帮助":["13.1"],"自动缓存失效处理":["13.1"],"当数据过期或需要刷新时":["13.1"],"可以自动处理缓存失效并重新获取数据":["13.1"],"无需手动编写过期和刷新逻辑":["13.1"],"服务器状态更新":["13.1"],"无数据预取":["13.2"],"usequery":["13.9"],"query":["13.9"],"querykey":["13.9"],"owner":["13.9"],"repo":["13.9"],"repos":["13.9"],"issues":["13.9"],"headers":["13.9"],"authorization":["13.9"],"成功或错误状态":["13.10"],"例如":["13.10"],"可以是字符串":["13.10"],"loading":["13.10"],"success":["13.10"],"或":["13.10"],"hashrouter":["14.0"],"memoryrouter":["14.0"],"好处":["14.0"],"formishalffilledout":["14.3"],"message":["14.3"],"are":["14.3"],"you":["14.3"],"sure":["14.3"],"可在多个地方使用消费":["15.1","16.1"],"usestore":["15.1","16.1"],"这种双向的数据流动会导致数据的不一致和混乱":["15.3"],"难以调试和维护":["15.3"],"由于数据流动不可控":["15.3"],"store":["15.4"],"中":["15.4"],"使得状态的修改和管理更加一致和可控":["15.4"],"提升应用程序的可维护性和可扩展性":["15.4"],"redux":["16.3"],"v6完全基于context":["16.3"],"api而导致性能大幅下降":["16.3"],"v7又回退到之前的内部订阅方案":["16.3"],"context更适合放类似主题这种变化不大的全局数据":["16.3"],"依赖某个atom":["16.5"],"当依赖项发生变化时更新触发atom的第一个参数修改变量":["16.5","16.6"],"deriveatom":["16.5","16.6"],"async":["16.6"],"setvalue":["16.7"],"useatom":["16.7"],"text":["16.8"],"fc":["16.8"],"value":["16.8"],"await":["16.9"],"url":["16.9"],"setcount":["16.10"],"组件a渲染":["16.10"],"div":["16.10"],"button":["16.10"],"onclick":["16.10"],"如果仅更新操作":["16.11"],"而无需渲染状态的组件":["16.11"],"状态是独立的":["16.12"],"不受外部影响":["16.12"],"同时也不影响外部":["16.12"],"任何组件都可以使用":["16.13"],"但是":["16.13"],"createroot":["16.14"],"document":["16.14"],"getelementbyid":["16.14"],"root":["16.14"],"render":["16.14"],"strictmode":["16.14"],"state的根对象":["17.1"],"dispatch":["17.1"],"使":["17.2"],"action":["17.2","21.4"],"可以为":["17.2"],"程序了解到事件名以后去reducer中找到对应的函数执行操作":["21.1"],"当前state":["21.2"],"和触发的事件action":["21.2"],"tasks":["21.4"],"previous":["21.4"],"state":["21.4"],"current":["21.4"],"使用usereducer可以使状态变化变得可预测":["21.6"],"因为它通过一个reducer函数来处理状态变化":["21.6"],"可以更好地理解状态变化的来源":["21.6"],"中间件和副作用":["21.6"],"不再强依赖一些属性和方法":["27.2"],"具体的实现方式是di依赖注入":["27.2"],"容器需要拥有register方法用来管理容器的注册":["27.4"],"throw":["27.5"],"team":["32.0"]},{"1":["16.10"],"3":["15.3","17.1"],"5":["12.2"],"6":["6.1","12.5"],"8":["12.5"],"15":["5.2"],"16":["5.2"],"18":["3.0"],"使用":["1.0"],"添加到模块或者控制器中":["1.0"],"module":["1.0","1.2"],"在canactivate":["1.1"],"方法中":["1.1"],"通过参数context获取到请求对象":["1.1"],"调用validaterequest":["1.1"],"函数验证请求是否合法":["1.1"],"如果请求合法就返回true":["1.1"],"要在控制器中使用守卫":["1.1"],"需要将守卫添加到路由上":["1.1"],"useguard":["1.1"],"controller":["1.1"],"ms":["1.2"],"写入模块中作为提供者":["1.2"],"imports":["1.2"],"安全性":["1.3"],"appcontroller":["2.0"],"appmodule":["2.0"],"不使用dotenv扩展包的话需要手动readfile然后根据":["2.0"],"n拆分":["2.0"],"循环放入process":["2.0"],"key":["2.0"],"太麻烦":["2.0"],"工厂函数":["2.0"],"对于复杂要求的provider":["2.0"],"我们就可以使用":["2.0"],"usefactory":["2.0"],"工厂函数进行提供者注册":["2.0"],"name":["3.0"],"process":["3.0"],"env":["3.0"],"app":["3.0","5.4"],"age":["3.0"],"最终统一导入到config":["3.0"],"index":["3.0","12.5"],"再统一导出":["3.0"],"总之控制权不在类中":["4.0"],"而是由外部决定":["4.0"],"play":["4.1"],"student":["4.1"],"动态模块":["5.0"],"全局模块":["5.0"],"pipe":["5.1"],"dto和请求参数等":["5.1"],"service提供一种实现业务逻辑的方式":["5.1"],"他可以访问操作数据":["5.1"],"控制器":["5.2"],"方法处理器":["5.2"],"请求之后":["5.2"],"可以使用":["5.3"],"exports":["5.3"],"导出给其他模块使用":["5.3"],"提供者是单例的4":["5.3"],"提供者可以是任何值":["5.3"],"token":["5.4"],"expiresin":["5.4"],"100d":["5.4"],"模块提供者":["5.4"],"filters":["6.1"],"处理请求时的错误":["6.1"],"守卫":["6.1"],"这个对象包含了当前请求的上下文信息":["7.0"],"包括请求头":["7.0"],"请求体":["7.0"],"根据头信息":["9.0"],"const":["12.2","27.5"],"indexref":["12.2"],"function":["12.2","12.5","17.2"],"usedeferredvalue":["12.3"],"解决更新状态滞后问题":["12.3"],"微任务setnumber触发重新渲染":["12.5"],"这就是为什么handleclick函数内打印不到最新的值":["12.5"],"而handleclick函数外可以大打印到最新的值的原因":["12.5"],"js":["12.5"],"number":["12.5"],"setnumber":["12.5"],"decrement":["12.6"],"default":["12.6"],"throw":["12.6"],"new":["12.6","27.5"],"error":["12.6","27.5"],"对于需要与服务器状态同步的情况":["13.1"],"可以通过提供的无缝数据同步功能来处理":["13.1"],"确保客户端数据的一致性":["13.1"],"更少的重复代码":["13.1"],"无数据失效处理":["13.2"],"inputowner":["13.9"],"setinputowner":["13.9"],"facebook":["13.9"],"inputrepo":["13.9"],"setinputrepo":["13.9"],"setquerykey":["13.9"],"issuccess":["13.10"],"表示查询是否成功完成":["13.10"],"如果查询成功完成":["13.10"],"页面松耦合":["14.0"],"lazyload":["14.0"],"want":["14.3"],"leave":["14.3"],"redirect":["14.3"],"重定向":["14.3"],"atomic":["15.1","16.1"],"state":["15.1","16.1"],"原子状态":["15.1","16.1"],"当应用程序发生错误或状态异常时":["15.3"],"很难定位问题的根源并进行调试和修复":["15.3"],"嵌套回调和依赖关系":["15.3"],"flux架构的职责分离和分层结构使得应用程序的各个模块解耦":["15.4"],"提高了代码的可复用性和可测试性":["15.4"],"便于应用程序的扩展和维护":["15.4"],"人话":["15.4"],"而并不适合存放频繁更新的复杂状态集合":["16.3"],"原子化":["16.3"],"组件内状态":["16.3"],"但是api较多":["16.3"],"get":["16.5","27.1"],"使用atom":["16.5"],"return":["16.6","16.8"],"await":["16.6"],"text":["16.6","16.9"],"div":["16.7"],"button":["16.7"],"useatom":["16.8","16.9","16.14"],"addnumber":["16.8"],"fc":["16.9"],"value":["16.9"],"prev":["16.10"],"add":["16.10"],"b":["16.10"],"count":["16.10"],"请使用":["16.11"],"即使大家共用同一个atom状态":["16.12"],"如果不想让这个组件受外部更新影响":["16.12"],"如果某个组件使用了provider包裹":["16.13"],"那么该组件的状态是独立的":["16.13"],"getdefaultstore":["16.14"],"useatomvalue":["16.14"],"num":["16.14"],"num2":["16.14"],"navstore":["16.14"],"更新store中的state":["17.1"],"subscribe":["17.1"],"enhancer":["17.2"],"asdas":["18.0"],"这样的优点就是把操作整合到一起":["21.1"],"只需要知道用户执行了什么操作去reducer中寻找响应的程序而不是直接触发这些程序":["21.1"],"然后返回新的state":["21.2"],"done":["21.4"],"false":["21.4"],"changed":["21.4"],"tasksk":["21.4"],"map":["21.4"],"t":["21.4"],"initstate":["21.5"],"接收接受个初始值":["21.5"],"和状态计算函数":["21.5"],"返回的dispatch来调用状态计算函数":["21.5"],"通过usestate保存状态":["21.5"],"usereducer可以配合副作用和中间件来处理状态变化时的特定逻辑":["21.6"],"使得状态管理更加灵活":["21.6"],"复杂动态表单":["21.6"],"在处理复杂的动态表单或用户输入场景时":["21.6"],"实际使用":["27.1"],"abstract":["27.1"],"authservice":["27.1"],"xxx":["27.1"],"控制反转需要一个容器":["27.2"],"配置集中管理":["27.3"],"容器需要有一个解析的方法":["27.4"],"依赖":["27.5"],"未被注册到容器":["27.5"],"请先注册到容器再去使用":["27.5"]},{"0":["12.5"],"1":["12.2"],"2":["12.3"],"4":["12.2","15.3"],"5":["17.1"],"7":["6.1"],"17":["5.2"],"18":["5.2"],"appcontroller":["1.1","1.2"],"constructor":["1.1","4.1"],"private":["1.1"],"readonly":["1.1"],"appservice":["1.1","1.2"],"get":["1.1"],"useguards":["1.1"],"eagonguard":["1.1"],"controllers":["1.2","5.4"],"providers":["1.2","5.4"],"provide":["1.2"],"app":["1.2"],"interceptor":["1.2"],"可维护性":["1.3"],"xjclass":["2.0"],"make":["2.0"],"return":["2.0","16.9","16.14"],"this":["2.0"],"is":["2.0"],"method":["2.0"],"hd":["2.0"],"依赖注入其他提供者":["2.0"],"注册到全局module":["3.0"],"module":["3.0"],"imports":["3.0"],"configmodule":["3.0"],"forroot":["3.0"],"isglobal":["3.0"],"true":["3.0"],"load":["3.0"],"controller":["3.0"],"内部仅仅调用一个抽象的方法":["4.0"],"具体的方法实现由第三方决定":["4.0"],"protected":["4.1"],"env配置相关":["5.0"],"同事还可以与其他服务交互以完成复杂的业务逻辑":["5.1"],"service是处理应用程序逻辑的类":["5.1"],"将业务逻辑从controller中分离出来":["5.1"],"使得controller只需处理http请求和响应":["5.1"],"控制器拦截器":["5.2"],"异常过滤器":["5.2"],"而不仅仅是服务类":["5.3"],"提供者是":["5.3"],"nestjs":["5.3"],"应用程序中的核心概念之一":["5.3"],"它们将代码块标记为可注入的":["5.3"],"authservice":["5.4","27.5"],"jwtstrategy":["5.4"],"控制器":["5.4"],"authcontroller":["5.4"],"向外提供接口":["5.4"],"guards":["6.1"],"鉴权认证相关":["6.1"],"拦截器":["6.1"],"查询参数":["7.0"],"响应对象等":["7.0"],"载荷":["9.0"],"签名规则":["9.0"],"current":["12.2"],"每个回调函数捕获正确的值":["12.2"],"造成此结果的原因是当循环时":["12.2"],"每次循环执行的settimeout都会在一秒钟后执行":["12.2"],"当一秒钟后执行时当前的i已经是10了":["12.2"],"执行副作用":["12.3"],"b1":["12.3"],"这是分类b下的项目b1":["12.3"],"console":["12.5"],"log":["12.5"],"重新渲染":["12.5"],"reducertest":["12.6"],"number":["12.6"],"dispatchnumber":["12.6"],"initialstate":["12.6"],"你可以通过一些简单的":["13.1"],"hooks":["13.1"],"和配置来处理数据获取和管理":["13.1"],"减少了编写重复代码的工作量":["13.1"],"总之":["13.1","21.6"],"尽管可以使用普通的数据获取库来处理数据请求":["13.1"],"但":["13.1"],"无服务器状态更新等问题":["13.2"],"issuequery":["13.9"],"span":["13.9"],"仓库":["13.9"],"input":["13.9"],"name":["13.9"],"value":["13.9","16.5","16.6"],"onchange":["13.9"],"e":["13.9"],"target":["13.9"],"isfetching":["13.10"],"表示是否正在获取数据":["13.10"],"无论是从远程服务器还是从缓存中":["13.10"],"如果正在获取数据":["13.10"],"之类的可以基于路由实现":["14.0"],"重构":["14.0"],"维护":["14.0"],"例如登录判断":["14.3"],"router":["14.3"],"path":["14.3"],"render":["14.3"],"logged":["14.3"],"与创建对象形式的存储不同":["15.1","16.1"],"针对每一个变量可以是响应式的":["15.1","16.1"],"通过原子派生的方式来适应复杂的开发场景":["15.1","16.1"],"在复杂的应用程序中":["15.3"],"数据流动可能涉及多个嵌套的回调函数和依赖关系":["15.3"],"这会导致代码的可读性和可维护性下降":["15.3"],"数据单向易于追踪更改来源":["15.4"],"统一状态管理":["15.4"],"它通过将原子状态进行派生":["16.3"],"组合成新的状态":["16.3"],"类似vue的computed":["16.3"],"所谓组件内状态":["16.3"],"其实就是内部使用了usestate":["16.3"],"text":["16.5"],"div":["16.6","16.8","16.9","16.14"],"export":["16.6"],"onclick":["16.7","16.8","16.9"],"button":["16.8","16.9"],"addnumber":["16.9"],"组件b渲染":["16.10"],"p":["16.10"],"组件b":["16.10"],"这么做的目的":["16.11"],"防止无意义的渲染":["16.11"],"这样就不会触发更新了":["16.12"],"不受外部影响":["16.13"],"同时也不影响外部":["16.13"],"count":["16.14"],"setcount":["16.14"],"status":["16.14"],"style":["16.14"],"background":["16.14"],"pink":["16.14"],"black":["16.14"],"订阅":["17.1"],"监听store中的state变化":["17.1"],"增强器":["17.2"],"动作":["17.2"],"adsas":["18.0"],"更加符合常理":["21.1"],"这样action行为会随着时间的推移积累到状态中":["21.2"],"if":["21.4"],"task":["21.4"],"else":["21.4"],"setstate":["21.5"],"usestate":["21.5"],"function":["21.5"],"usereducer可以帮助更好地处理不同字段的状态变化":["21.6"],"usereducer适用于需要更精细控制状态逻辑":["21.6"],"处理复杂状态变化":["21.6"],"instance":["27.1"],"constroller":["27.1"],"这个容器接手类的控制权":["27.2"],"从容器中解析已注册的依赖项并注入":["27.4"],"让所有的依赖项统一管理注册解耦了对象之间的强依赖关系":["27.4"]},{"0":["13.9"],"1":["13.9","16.14"],"2":["12.2"],"19":["5.2"],"123":["16.14"],"在上面的代码中":["1.0"],"我们将loggermiddleware中间件添加到了appmodule模块中":["1.0"],"并使用forroutes":["1.0"],"方法指定了该中间件适用于所有路由":["1.0"],"这样":["1.0"],"每次请求到达控制器之前":["1.0"],"都会先执行loggermiddleware中间件中的代码":["1.0"],"gethello":["1.1"],"string":["1.1"],"将authguard守卫添加到路由上":["1.1"],"并使用":["1.1"],"装饰器指定守卫":["1.1"],"这样每次请求到达控制器之前都会先执行authguard守卫中的代码":["1.1"],"以确保请求的合法性":["1.1"],"useclass":["1.2"],"appmodule":["1.2"],"管道的应用场景":["1.3"],"将做为参数传递给":["2.0"],"方法":["2.0"],"authcontroller":["2.0"],"authmodule":["2.0","5.4"],"constroctor":["3.0"],"直接注入":["3.0"],"传递泛型类型":["3.0"],"configtype会提供类型":["3.0"],"而不需要处理业务逻辑":["5.1"],"在service中":["5.1"],"可以编写业务逻辑和调用其他服务":["5.1"],"路由":["5.2"],"之后是控制器":["5.2"],"之后是全局":["5.2"],"服务器响应":["5.2"],"并提供与其它代码块之间的依赖关系":["5.3"],"当需要在组件或控制器中使用一个实例时":["5.3"],"会自动处理依赖关系并将实例提供给需要的组件或控制器":["5.3"],"exports":["5.4"],"export":["5.4","12.5","16.10","21.5"],"class":["5.4"],"interceptors":["6.1"],"处理http请求前后所执行的逻辑":["6.1"],"executioncontext只在当前请求有效":["7.0"],"不可以和其他请求共享":["7.0"],"返回token":["9.0"],"let会在每次循环的时候保存当前作用域的变量":["12.2"],"所以每次循环的时候都会保存当前的i":["12.2"],"所以打印出来的结果是0":["12.2"],"tip":["12.2"],"不会产生新的作用域":["12.2"],"所以每次循环的时候都是共享一个作用域":["12.2"],"所以每次循环的时候都会覆盖上一次的i":["12.2"],"所以最后打印出来的结果都是10":["12.2"],"项目b2":["12.3"],"这是分类b下的项目b2":["12.3"],"alt":["12.3"],"text":["12.3"],"return":["12.5","16.5"],"button":["12.5","12.6","16.14"],"onclick":["12.5","12.6","16.14"],"点击":["12.5"],"default":["12.5","16.6","16.10"],"div":["12.6","16.5"],"add":["12.6","16.7","16.8","16.9","16.14"],"提供了一整套功能":["13.1"],"可以更好地管理数据获取":["13.1"],"缓存":["13.1"],"状态以及用户体验等方面的问题":["13.1"],"从而减少了开发工作量并提供了更好的性能和用户体验":["13.1"],"查看最新issue信息":["13.9"],"最新一条issue信息":["13.9"],"stringify":["13.9"],"data":["13.9"],"dataupdatedat":["13.10"],"表示数据上次更新的时间戳":["13.10"],"refetch":["13.10"],"用于手动重新获取数据的函数":["13.10"],"扩展更容易":["14.0"],"dashboard":["14.3"],"publichome":["14.3"],"atom":["15.1","16.1"],"组件通信困难":["15.3"],"当应用程序中的组件需要共享和同步状态时":["15.3"],"传统的mvc模式无法提供一个清晰的机制来处理组件之间的通信和状态共享":["15.3"],"数据可预测性":["15.4"],"新状态":["15.4"],"旧状态":["15.4"],"事件":["15.4"],"state变化":["16.3"],"触发更新渲染罢了":["16.3"],"有兴趣可以阅读手动实现recoil原理":["16.3"],"danger":["16.6"],"这样会阻塞渲染线程":["16.6"],"不建议这样做":["16.6"],"异步请求应该放在组件内部":["16.6"],"或者使用异步更新atom":["16.6"],"www":["16.9"],"abc":["16.9"],"com":["16.9"],"asynctest":["16.10"],"不会触发订阅事件":["16.12"],"即使大家共用同一个atom状态":["16.13"],"p":["16.14"],"x":["16.14"],"combinereducer":["17.1"],"将多个reducers合并成一个rootreducer":["17.1"],"reducer":["17.2"],"纯函数":["17.2"],"zzz":["18.0"],"filter":["21.4"],"throw":["21.4"],"error":["21.4"],"未知":["21.4"],"使用中间件或副作用等情况下":["21.6"],"可以优于简单使用usestate来管理组件状态":["21.6"],"此时我们的constroller与service解耦":["27.1"],"具体调用的方法完全取决于外部依赖注入进来的方法":["27.1"],"可扩展性":["27.1"],"解耦":["27.1"],"可测试性":["27.1"],"controller":["27.5"]}]'},t={"0.0":{t:"<resume/>",p:"",l:"Resume/index.html",a:"resume"},"1.0":{t:"中间件",p:`::: info 存在意义
处理HTTP请求的函数，他可以在请求到达控制器之前/之后执行一些操作 他可以是全局的也可以是局部的
场景：身份验证，日志记录，错误处理
:::
::: details
中间 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html",a:"中间件"},"1.1":{t:"守卫",p:`Guard 是一种用于保护路由的机制，他可以在请求到达控制器之前或者之后执行一些操作。守卫可以用于实现身份验证，权限控制，缓存等功能。在NestJs中收尾可以是全局的也可以是局部的。守卫路由
[[Ex ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#守卫",a:"守卫"},"1.2":{t:"拦截器",p:`处理HTTP请求和响应的函数，在请求到达控制器之前之后执行一些操作。拦截器可以实现日志记录，错误处理，数据转换。在Nestjs中拦截器可以是全局的也可局部
@Injectable()
export c ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#拦截器",a:"拦截器"},"1.3":{t:"管道",p:`管道是数据流入controller前进行的一波数据处理
其中数据处理包含了对数据的转换,验证。他可以在控制器之前或之后对数据进行预处理。然后将数据传递给控制器或下一个管道。
$$管道的主要目的是增强应 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Concept.html#管道",a:"管道"},"2.0":{t:">注入基本数据",p:`因为普通数据服务不是Class，所以要使用@Inject来注入

@Module({
	providers:[
		{
			provide:'APP_NAME',
			useValue:'使用普通 ...`,l:"articles/BackEnd/NestJs/Basic/Code/Provider.html",a:"注入基本数据"},"3.0":{t:"> 案例，第三方发送短信服务。 根据不同配置使用不同的第三方运营商",p:`sms.serivce.ts
@Injectable()
export class AppController(){
	constructor(){
		private ali:aliService, ...`,l:"articles/BackEnd/NestJs/Basic/Code/env配置相关.html",a:"案例-第三方发送短信服务。-根据不同配置使用不同的第三方运营商"},"4.0":{t:"控制反转 IOC",p:`面向对象中的设计原则，用来减少计算机代码之前的耦合度。其根本思想是：”借助于第三方“ 实现具有依赖关系的对象之间的解耦

$$ 第三方举例：TS注解，或直接传递参数。总之控制权不在类中，而是由外部决定 ...`,l:"articles/BackEnd/NestJs/Basic/Code/设计模式模式.html",a:"控制反转-ioc"},"4.1":{t:"依赖注入 DI",p:`IOC 的具体实现，在类以外的地方提供服务。类内部调用的是该具体服务的抽象

	abstrct class Phone {
		playGame(name:string):string
	}
	cla ...`,l:"articles/BackEnd/NestJs/Basic/Code/设计模式模式.html#依赖注入-di",a:"依赖注入-di"},"5.0":{t:"- Nest 请求声明周期",p:`

[[Provider]]

动态Provider
asynProvider



Module

静态模块
动态模块
全局模块



[[env配置相关]]


`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html",a:"nest-请求声明周期"},"5.1":{t:"Module Controller Service的关系",p:`
Module 提供了一个模块化的方式来组织和管理您的应用程序的代码，同时还允许您使用依赖注入和模块之间的依赖关系来构建更加可扩展的应用程序。
$$ Module是Nestjs应用程序的基本构建块，每 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#module-controller-service的关系",a:"module-controller-service的关系"},"5.2":{t:"Nest 请求生命周期",p:`!img

1.  收到请求
2.  全局绑定的中间件
3.  模块绑定的中间件
4.  全局守卫
5.  控制层守卫
6.  路由守卫
7.  全局拦截器（控制器之前）
8.  控制器层拦截器 （控 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#nest-请求生命周期",a:"nest-请求生命周期"},"5.3":{t:"[[Provider]]",p:`提供服务,用于表示应用程序中可注入的任何东西。除了服务，Provider 还可以提供其他类型的对象，例如 Factory 工厂、配置对象、连接对象等。


提供者使用 @Injectable() 装饰 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#provider",a:"provider"},"5.4":{t:"Module",p:`模块是一个子程序，用于定义控制器，提供者或向其他模块开放提供者（开放模块的API）


默认情况下控制器，提供者在当前模块可用，即模块作用域
若果向其他模块提供服务可以将提供者定义在export属性中 ...`,l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#module",a:"module"},"5.5":{t:"	",p:"",l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#",a:""},"5.6":{t:"动态Module",p:"",l:"articles/BackEnd/NestJs/Basic/Module Contorller Service.html#动态module",a:"动态module"},"6.0":{t:"hi  我是Eagon,今天给大家分享Nest基础系列-Nestjs核心基础概念。 愿我们共同进步",p:"",l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html",a:"hi-我是eagon-今天给大家分享nest基础系列-nestjs核心基础概念。-愿我们共同进步"},"6.1":{t:"核心概念概览",p:`
模块 Modules 组合所有逻辑的地方,我理解为DI的Container
控制器 Controller处理请求
服务 Service 操作数据库以及处理所有逻辑的地方
管道 Pipes 核验请求的 ...`,l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html#核心概念概览",a:"核心概念概览"},"6.2":{t:" 重点1: NestJs 处理Https时的生命周期",p:"",l:"articles/BackEnd/NestJs/Basic/NestJs核心概念.html#重点1-nestjs-处理https时的生命周期",a:"重点1-nestjs-处理https时的生命周期"},"7.0":{t:">他代表了一个HTTP请求的执行上下文，提供了许多属性和方法，可用于在请求的生命周期内访问",p:`
ExecutionContext是在每个请求到达控制器之前被Nestjs封装产生的，他的请求是将请求的上下文，传递给控制器，拦截器，管道，守卫等各个部分。以便他们可以对请求进行处理和转换
当一个请求 ...`,l:"articles/BackEnd/NestJs/Basic/link/Execution Context 执行上下文.html",a:"他代表了一个http请求的执行上下文-提供了许多属性和方法-可用于在请求的生命周期内访问"},"8.0":{t:"# NestJs",p:"",l:"articles/BackEnd/NestJs/index.html",a:"nestjs"},"9.0":{t:"- register 接收账号密码argon2 hash 加密插入数据库",p:`
login   登录接收账号密码，argon2 verify对密码进行解密
解密符合，根据头信息，载荷, 签名规则 返回token

`,l:"articles/BackEnd/NestJs/jwt/流程.html",a:"register-接收账号密码argon2-hash-加密插入数据库"},"11.0":{t:"js",p:"",l:"articles/FontEnd/js/index.html",a:"js"},"12.0":{t:"# React 速通",p:"",l:"articles/FontEnd/react/Basic/index.html",a:"react-速通"},"12.1":{t:"Hooks",p:"",l:"articles/FontEnd/react/Basic/index.html#hooks",a:"hooks"},"12.2":{t:"useRef",p:`场景：稳定引用，获取dom节点，获取上一次的值

闭包 异步访问到旧变量的问题

::: code-group
 // 典型的闭包循环案例，每次循环调用setTimeout的时候都会保存当前的作用域， ...`,l:"articles/FontEnd/react/Basic/index.html#useref",a:"useref"},"12.3":{t:"API分类",p:`
关键词： concurrent
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;使用范围&lt;/th&gt;
&lt;th&gt;Hooks&lt;/th&gt;
&lt;t ...`,l:"articles/FontEnd/react/Basic/index.html#api分类",a:"api分类"},"12.4":{t:"数据更新驱动类",p:"",l:"articles/FontEnd/react/Basic/index.html#数据更新驱动类",a:"数据更新驱动类"},"12.5":{t:"useState",p:`const [state, setState] = useState(initialState);
参数接收一个初始值，返回一个数组，数组的第一个元素是当前的state，第二个元素是更新state的函 ...`,l:"articles/FontEnd/react/Basic/index.html#usestate",a:"usestate"},"12.6":{t:"useReducer",p:`对于拥有许多状态更新逻辑的组件来说，过于分散的事件处理程序可能会令人不知所措。对于这种情况，你可以将组件的所有状态更新(增删改查)逻辑整合到一个外部函数中，这个函数叫作 reducer。
reduce ...`,l:"articles/FontEnd/react/Basic/index.html#usereducer",a:"usereducer"},"12.7":{t:"useContext",p:`作用: 传递数据，避免props层层传递，导致代码冗余
项目列表
`,l:"articles/FontEnd/react/Basic/index.html#usecontext",a:"usecontext"},"12.8":{t:"高阶组件HOC",p:"",l:"articles/FontEnd/react/Basic/index.html#高阶组件hoc",a:"高阶组件hoc"},"13.0":{t:"# React Query",p:"",l:"articles/FontEnd/react/ReactQuery/index.html",a:"react-query"},"13.1":{t:"出现背景/解决问题",p:"**灵魂拷问Q： 为什么用axios不可以 为什么需要出现React QueryA:尽管可以使用普通的 Axios 或其他数据获取库来处理数据请求，但在某些情况下，使用 React Query 可以带 ...",l:"articles/FontEnd/react/ReactQuery/index.html#出现背景-解决问题",a:"出现背景-解决问题"},"13.2":{t:"核心概念",p:`解决普通请求代码重复，后期维护困难。无数据缓存，无数据同步，无数据预取，无数据失效处理，无服务器状态更新等问题。
`,l:"articles/FontEnd/react/ReactQuery/index.html#核心概念",a:"核心概念"},"13.3":{t:"使用教程",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#使用教程",a:"使用教程"},"13.4":{t:"自动缓存和数据同步",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#自动缓存和数据同步",a:"自动缓存和数据同步"},"13.5":{t:"加载状态管理",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#加载状态管理",a:"加载状态管理"},"13.6":{t:"数据同步和预取",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#数据同步和预取",a:"数据同步和预取"},"13.7":{t:"自动缓存失效处理",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#自动缓存失效处理",a:"自动缓存失效处理"},"13.8":{t:"服务器状态更新",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#服务器状态更新",a:"服务器状态更新"},"13.9":{t:"更少的重复代码",p:`::: code-group
import as React from 'react';
​
export default function App() {
  // 存储 后端返回数据
  cons ...`,l:"articles/FontEnd/react/ReactQuery/index.html#更少的重复代码",a:"更少的重复代码"},"13.10":{t:"API",p:`


APIname
Are




data：
查询返回的数据


isLoading：
表示查询是否正在加载中。如果数据正在加载，该属性为 true；否则为 false。


isError：
表 ...`,l:"articles/FontEnd/react/ReactQuery/index.html#api",a:"api"},"13.11":{t:"总结",p:"",l:"articles/FontEnd/react/ReactQuery/index.html#总结",a:"总结"},"14.0":{t:"# React Router",p:`后端概念：发送url请求到服务器端，server会通过不同的地址返回不同的页面
为什么需要路由：

单页应用需要路由切换
通过url可以定位到页面
更有语义的组织资源

三种路由的实现方式：

Bro ...`,l:"articles/FontEnd/react/ReactRouter/index.html",a:"react-router"},"14.1":{t:"快速上手",p:"",l:"articles/FontEnd/react/ReactRouter/index.html#快速上手",a:"快速上手"},"14.2":{t:"原理分析",p:"",l:"articles/FontEnd/react/ReactRouter/index.html#原理分析",a:"原理分析"},"14.3":{t:"核心API",p:`


name
effect
demo




Link
普通链接，不会触发刷新
&lt;Link to=&quot;&quot;/&gt;


NavLink
类似Link
但是会添加当前选中状态& ...`,l:"articles/FontEnd/react/ReactRouter/index.html#核心api",a:"核心api"},"15.0":{t:"# React 全局存储/状态管理",p:"",l:"articles/FontEnd/react/Storage/index.html",a:"react-全局存储-状态管理"},"15.1":{t:"常见的状态管理模式",p:`
global：  全局式，也被称作单一数据源，将所有的数据放到一个大对象中，关键词：combineReducers();
multiple stores：  多数据源模式，将状态存放到多个数据源中， ...`,l:"articles/FontEnd/react/Storage/index.html#常见的状态管理模式",a:"常见的状态管理模式"},"15.2":{t:"Flex 架构",p:"",l:"articles/FontEnd/react/Storage/index.html#flex-架构",a:"flex-架构"},"15.3":{t:"出现背景 & 解决痛点",p:"Flux架构解决前端应用程序中状态管理和数据流动的复杂性问题。在传统的MVC（Model-View-Controller）模式中，应用程序的状态分散在多个视图和控制器之间，导致数据流动难以追踪和管理。 ...",l:"articles/FontEnd/react/Storage/index.html#出现背景-解决痛点",a:"出现背景-解决痛点"},"15.4":{t:"架构特点 & 详细介绍",p:`Flux架构通过引入单向数据流的概念，将数据的流动变得可控和可预测。它明确了数据流动的路径，并将状态的修改限制在特定的流程中。这样做的好处包括：


易于追踪和调试：由于数据流是单向的，数据的变化路径 ...`,l:"articles/FontEnd/react/Storage/index.html#架构特点-详细介绍",a:"架构特点-详细介绍"},"16.0":{t:"# Jotai",p:`引用来源：Ryun
`,l:"articles/FontEnd/react/Storage/jotai/index.html",a:"jotai"},"16.1":{t:"常见的状态管理模式",p:`
global：  全局式，也被称作单一数据源，将所有的数据放到一个大对象中，关键词：combineReducers();
multiple stores：  多数据源模式，将状态存放到多个数据源中， ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#常见的状态管理模式",a:"常见的状态管理模式"},"16.2":{t:"Jotai  原子状态管理",p:"",l:"articles/FontEnd/react/Storage/jotai/index.html#jotai-原子状态管理",a:"jotai-原子状态管理"},"16.3":{t:"原子式解决了什么问题",p:`reactHook 使State的拆分和逻辑共享变得更容易
但useState 和 useContext对于多个store仍需要维护多个Context Provider 因为当Context改变，所有 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#原子式解决了什么问题",a:"原子式解决了什么问题"},"16.4":{t:"使用教程",p:"",l:"articles/FontEnd/react/Storage/jotai/index.html#使用教程",a:"使用教程"},"16.5":{t:"1. 创建 atom  派生atom  使用 useAtom",p:`::: details View The Code
import { atom, useAtom } from &quot;jotai&quot;;
import { FC } from &quot; ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_1-创建-atom-派生atom-使用-useatom",a:"_1-创建-atom-派生atom-使用-useatom"},"16.6":{t:"2. 异步派生",p:`::: details View The Code
import { atom, useAtom } from &quot;jotai&quot;;
import { FC } from &quot; ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_2-异步派生",a:"_2-异步派生"},"16.7":{t:"3. 函数组件内更新方式",p:`::: details View The Code
  const ValueAtom = atom(1)
  const Text = ()=&gt;{
    const [value,setVa ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_3-函数组件内更新方式",a:"_3-函数组件内更新方式"},"16.8":{t:"4. atom内更新方式",p:`::: details View The Code
  const ValueAtom = atom(1)
  const AddNumberAtom = atom(ge=&gt;ge(ValueAt ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_4-atom内更新方式",a:"_4-atom内更新方式"},"16.9":{t:"5. 异步更新atom 区别于第二条异步获取，异步更新不会阻塞线程",p:`::: details View The Code
  const MockData = new Promise&lt;string&gt;((r) =&gt; {
    setTimeout(() ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_5-异步更新atom-区别于第二条异步获取-异步更新不会阻塞线程",a:"_5-异步更新atom-区别于第二条异步获取-异步更新不会阻塞线程"},"16.10":{t:"6. 渲染问题",p:`:::   details View The Code

当我们点击add时，发现A和B都重新渲染了，但是问题来了，A为什么要重新渲染呀，A只是触发了更新操作，并不需要重新渲染呀？？？


这是因为， ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_6-渲染问题",a:"_6-渲染问题"},"16.11":{t:"7. 解决渲染问题 useAtomValue、useSetAtom",p:`
如果有的组件只需要监听状态的变化值，而没有更新操作 请使用useAtomValue
如果仅更新操作，而无需渲染状态的组件，请使用 useSetAtom
这么做的目的：防止无意义的渲染

`,l:"articles/FontEnd/react/Storage/jotai/index.html#_7-解决渲染问题-useatomvalue、usesetatom",a:"_7-解决渲染问题-useatomvalue、usesetatom"},"16.12":{t:"8. Provider",p:`
正常情况下，无需用Provider包裹组件
但如果需要控制某些组件的状态不发生更新，可以用Provider包裹
或者说，用Provider包裹的组件，状态是独立的，不受外部影响，同时也不影响外部，即 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_8-provider",a:"_8-provider"},"16.13":{t:"9.store",p:`
createStore,export出去,使用Jotai的Provider提供给App


其中，store中的状态，是全局的，任何组件都可以使用，但是，如果某个组件使用了Provider包裹，那么 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#_9-store",a:"_9-store"},"16.14":{t:"实际使用",p:`::: code-group
import { createStore, atom } from &quot;jotai&quot;;

const myStore = createStore();
 ...`,l:"articles/FontEnd/react/Storage/jotai/index.html#实际使用",a:"实际使用"},"17.0":{t:"# Redux",p:"",l:"articles/FontEnd/react/Storage/redux/index.html",a:"redux"},"17.1":{t:"API介绍",p:`
reducer 纯函数，接收两个参数，一个是state，一个是action，返回一个新的state
createStore 创建一个 root 存放 state的根对象
dispatch 更新sto ...`,l:"articles/FontEnd/react/Storage/redux/index.html#api介绍",a:"api介绍"},"17.2":{t:"摘要",p:`
middleware 中间件,中间件用于增强 dispatch 功能，返回一个增强后的 dispatch（比如 redux-thunk 使 action 可以为 function）
enhancer ...`,l:"articles/FontEnd/react/Storage/redux/index.html#摘要",a:"摘要"},"18.0":{t:"react",p:`sdas
abc
asdasdas
asdasdasdasdasdas
213123
asdas
adsas
zzz
`,l:"articles/FontEnd/react/index.html",a:"react"},"20.0":{t:"context",p:"",l:"articles/FontEnd/relevance/context.html",a:"context"},"21.0":{t:"# reducer",p:`
action + state  = new state

`,l:"articles/FontEnd/relevance/reducer.html",a:"reducer"},"21.1":{t:"与state的区别",p:`state是用户触发函数来执行具体的一步一步操作，reducer是把操作整合到一起，用户触发事件名进而执行相应的处理函数
例如：用户触发添加程序, 程序了解到事件名以后去reducer中找到对应的函数 ...`,l:"articles/FontEnd/relevance/reducer.html#与state的区别",a:"与state的区别"},"21.2":{t:"命名原因",p:`reducer是根据reduce命名 ,它接收目前的结果和当前的值，然后返回下一个结果.
React中的reducer也是这样的他们都接受 当前state 和触发的事件action ,然后返回新的st ...`,l:"articles/FontEnd/relevance/reducer.html#命名原因",a:"命名原因"},"21.3":{t:" ",p:"",l:"articles/FontEnd/relevance/reducer.html#",a:""},"21.4":{t:"reduce实现reducer",p:`::: code-group
import tasksReducer from './tasksReducer.js';

let actions = [
  {type: 'added', id:  ...`,l:"articles/FontEnd/relevance/reducer.html#reduce实现reducer",a:"reduce实现reducer"},"21.5":{t:"实现useReducer",p:`通过useState保存当前状态＋action = new state
::: code-group
const App = ()=&gt;{
  const [state,dispatch] = u ...`,l:"articles/FontEnd/relevance/reducer.html#实现usereducer",a:"实现usereducer"},"21.6":{t:"实际用途",p:`useReducer是React提供的一个Hook，用于管理组件的状态（state）。它的实际用途包括：


状态复杂逻辑：当组件的状态逻辑较为复杂，涉及多个状态变化时，可以使用useReducer来 ...`,l:"articles/FontEnd/relevance/reducer.html#实际用途",a:"实际用途"},"22.0":{t:"useRef",p:"",l:"articles/FontEnd/relevance/useRef.html",a:"useref"},"23.0":{t:"# vue",p:"",l:"articles/FontEnd/vue/index.html",a:"vue"},"25.0":{t:"前置",p:"",l:"articles/algorithm/base/index.html",a:"前置"},"26.0":{t:"时间复杂度",p:"",l:"articles/algorithm/base/time.html",a:"时间复杂度"},"27.0":{t:"# Nest主要设计模式",p:"",l:"articles/designModel/IOCDI/index.html",a:"nest主要设计模式"},"27.1":{t:"Dependency Injection 依赖注入",p:`class UserService {
  getList(id) {
    // 获取用户的逻辑 
  }
}

class Controller {
  constructor() {
     ...`,l:"articles/designModel/IOCDI/index.html#dependency-injection-依赖注入",a:"dependency-injection-依赖注入"},"27.2":{t:"Inversion of Control  控制反转",p:`控制反转的本质就是降低耦合度，不再强依赖一些属性和方法。具体的实现方式是DI依赖注入
控制反转需要一个容器，这个容器接手类的控制权
`,l:"articles/designModel/IOCDI/index.html#inversion-of-control-控制反转",a:"inversion-of-control-控制反转"},"27.3":{t:"好处",p:`
解耦和模块化
更方便的依赖注入
配置集中管理

`,l:"articles/designModel/IOCDI/index.html#好处",a:"好处"},"27.4":{t:"如何控制反转",p:`控制反转需要的条件如下

需要一个管理容器  Container
容器需要拥有register方法用来管理容器的注册
容器需要有一个解析的方法 （从容器中解析已注册的依赖项并注入)
让所有的依赖项统一 ...`,l:"articles/designModel/IOCDI/index.html#如何控制反转",a:"如何控制反转"},"27.5":{t:"案例",p:`  abstract class Service {
    getList: () =&gt; void;
    putList: () =&gt; void;
  }

  class Cont ...`,l:"articles/designModel/IOCDI/index.html#案例",a:"案例"},"28.0":{t:"设计模式",p:"",l:"articles/designModel/index.html",a:"设计模式"},"29.0":{t:"<myIndex/>",p:"",l:"index.html",a:"myindex"},"30.0":{t:"# 记录和楠楠的日常生活",p:"",l:"nannan/index.html",a:"记录和楠楠的日常生活"},"31.0":{t:"# 我们的故事",p:"",l:"nannan/story/index.html",a:"我们的故事"},"32.0":{t:"<!-- ---",p:`layout :  false
layout: page
&lt;team/&gt; --&gt;
`,l:"team/index.html",a:""}},a={previewLength:100,buttonLabel:"搜索",placeholder:"情输入关键词",allow:[],ignore:[]},r={INDEX_DATA:e,PREVIEW_LOOKUP:t,Options:a};export{r as default};
