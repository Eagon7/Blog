import{_ as s,o as a,c as n,U as l}from"./chunks/framework.c6ee4a63.js";const A=JSON.parse('{"title":"reducer","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"articles/FontEnd/relevance/reducer.md","lastUpdated":null}'),p={name:"articles/FontEnd/relevance/reducer.md"},e=l(`<h1 id="reducer" tabindex="-1">reducer <a class="header-anchor" href="#reducer" aria-label="Permalink to &quot;reducer&quot;">​</a></h1><blockquote><p>action + state = new state</p></blockquote><h4 id="与state的区别" tabindex="-1">与state的区别 <a class="header-anchor" href="#与state的区别" aria-label="Permalink to &quot;与state的区别&quot;">​</a></h4><p>state是用户触发函数来执行具体的一步一步操作，<strong>reducer是把操作整合到一起</strong>，用户触发事件名进而执行相应的处理函数</p><p>例如：用户触发添加程序, 程序了解到事件名以后去reducer中找到对应的函数执行操作</p><p>这样的优点就是把操作整合到一起，只需要知道用户执行了什么操作去reducer中寻找响应的程序而不是直接触发这些程序，更加符合常理</p><h4 id="命名原因" tabindex="-1">命名原因 <a class="header-anchor" href="#命名原因" aria-label="Permalink to &quot;命名原因&quot;">​</a></h4><p>reducer是根据reduce命名 ,它接收目前的结果和当前的值，然后返回下一个结果.</p><p>React中的reducer也是这样的他们都接受 当前state 和触发的事件action ,然后返回新的state 这样action行为会随着时间的推移积累到状态中</p><h2 id="实现usereducer" tabindex="-1">实现useReducer <a class="header-anchor" href="#实现usereducer" aria-label="Permalink to &quot;实现useReducer&quot;">​</a></h2><p>通过useState保存当前状态＋action = new state</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-HIez5" id="tab-Tbbb2He" checked="checked"><label for="tab-Tbbb2He">app.js</label><input type="radio" name="group-HIez5" id="tab-vLlwJ3d"><label for="tab-vLlwJ3d">reducer.js</label><input type="radio" name="group-HIez5" id="tab-NV5gWJM"><label for="tab-NV5gWJM">useReducer.js</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> App </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">dispatch</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useReducer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">reducer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">initialState</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#82AAFF;">dispatch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">add</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">添加</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}/&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">reducer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#FFCB6B;">newState</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// reducer 接收状态事件 计算新的状态</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reducer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">add</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">useReducer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reducer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">initState</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">state</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">dispatch</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// useReducer 接收接受个初始值，和状态计算函数。 返回的dispatch来调用状态计算函数，通过useState保存状态</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> useReducer </span><span style="color:#89DDFF;">=(</span><span style="color:#A6ACCD;font-style:italic;">reducer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">initState</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">setState</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">initState</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">dispatch</span><span style="color:#F07178;"> = </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">const</span><span style="color:#F07178;"> newState </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> reducer(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">action</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    setState</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newState</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">export</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">dispatch</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></div></div><h2 id="实际用途" tabindex="-1">实际用途 <a class="header-anchor" href="#实际用途" aria-label="Permalink to &quot;实际用途&quot;">​</a></h2><p>useReducer是React提供的一个Hook，用于管理组件的状态（state）。它的实际用途包括：</p><ul><li><p>状态复杂逻辑：当组件的状态逻辑较为复杂，涉及多个状态变化时，可以使用useReducer来更好地组织和管理状态的变化逻辑。</p></li><li><p>替代useState：在一些情况下，使用useReducer可以替代多个独立的useState，从而将相关状态集中管理，减少状态逻辑的分散。</p></li><li><p>可预测性：使用useReducer可以使状态变化变得可预测，因为它通过一个reducer函数来处理状态变化，可以更好地理解状态变化的来源。</p></li><li><p>中间件和副作用：useReducer可以配合副作用和中间件来处理状态变化时的特定逻辑，使得状态管理更加灵活。</p></li><li><p>复杂动态表单：在处理复杂的动态表单或用户输入场景时，useReducer可以帮助更好地处理不同字段的状态变化。</p></li><li><p>总之，useReducer适用于需要更精细控制状态逻辑、处理复杂状态变化、使用中间件或副作用等情况下，可以优于简单使用useState来管理组件状态。</p></li></ul>`,15),o=[e];function t(c,r,y,F,D,i){return a(),n("div",null,o)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
