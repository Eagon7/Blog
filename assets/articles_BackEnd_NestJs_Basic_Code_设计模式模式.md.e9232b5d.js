import{_ as s,o as a,c as n,U as l}from"./chunks/framework.c6ee4a63.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/BackEnd/NestJs/Basic/Code/设计模式模式.md","lastUpdated":null}'),o={name:"articles/BackEnd/NestJs/Basic/Code/设计模式模式.md"},p=l(`<h2 id="控制反转-ioc" tabindex="-1">控制反转 IOC <a class="header-anchor" href="#控制反转-ioc" aria-label="Permalink to &quot;控制反转 IOC&quot;">​</a></h2><pre><code>面向对象中的设计原则，用来减少计算机代码之前的耦合度。其根本思想是：”借助于第三方“ 实现具有依赖关系的对象之间的解耦
</code></pre><p>$$ 第三方举例：TS注解，或直接传递参数。总之控制权不在类中，而是由外部决定，内部仅仅调用一个抽象的方法，具体的方法实现由第三方决定$$</p><h2 id="依赖注入-di" tabindex="-1">依赖注入 DI <a class="header-anchor" href="#依赖注入-di" aria-label="Permalink to &quot;依赖注入 DI&quot;">​</a></h2><pre><code>IOC 的具体实现，在类以外的地方提供服务。类内部调用的是该具体服务的抽象
</code></pre><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	abstrct </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Phone</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">playGame</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Iphone</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Phone</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">play</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">student</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">phone</span><span style="color:#89DDFF;">:){}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,6),e=[p];function t(c,r,C,y,i,A){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
